
USPD_05_REV_1_0_BOOTLOADER_MODBUS_16_BIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800f77c  0800f77c  0001f77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd54  0800fd54  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd54  0800fd54  0001fd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd5c  0800fd5c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd5c  0800fd5c  0001fd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd60  0800fd60  0001fd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800fd64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00018aa4  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20018b2c  20018b2c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029e74  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056e3  00000000  00000000  00049f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b68  00000000  00000000  0004f610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001940  00000000  00000000  00051178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027504  00000000  00000000  00052ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022f48  00000000  00000000  00079fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0e50  00000000  00000000  0009cf04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017dd54  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007408  00000000  00000000  0017dda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f764 	.word	0x0800f764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800f764 	.word	0x0800f764

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200000a4 	.word	0x200000a4
 80005a8:	20000158 	.word	0x20000158

080005ac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetTimerTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000358 	.word	0x20000358
 80005dc:	2000040c 	.word	0x2000040c

080005e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__NVIC_SystemReset+0x24>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005f2:	4904      	ldr	r1, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x24>)
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <__NVIC_SystemReset+0x28>)
 80005f6:	4313      	orrs	r3, r2
 80005f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <__NVIC_SystemReset+0x20>
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	05fa0004 	.word	0x05fa0004

0800060c <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <HAL_UART_TxCpltCallback+0x24>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d104      	bne.n	8000628 <HAL_UART_TxCpltCallback+0x1c>
	  {
		  osSemaphoreRelease(TransmissionStateHandle);
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_UART_TxCpltCallback+0x28>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f006 f8ac 	bl	8006780 <osSemaphoreRelease>
	  }
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40004800 	.word	0x40004800
 8000634:	20016e4c 	.word	0x20016e4c

08000638 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a11      	ldr	r2, [pc, #68]	; (800068c <HAL_UART_RxCpltCallback+0x54>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d11c      	bne.n	8000684 <HAL_UART_RxCpltCallback+0x4c>
	  {
		  connect_timer = 0;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <HAL_UART_RxCpltCallback+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]

		  modem_rx_buffer[modem_rx_number++] = modem_rx_data[0];
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <HAL_UART_RxCpltCallback+0x5c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	b2d1      	uxtb	r1, r2
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_UART_RxCpltCallback+0x5c>)
 800065a:	7011      	strb	r1, [r2, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <HAL_UART_RxCpltCallback+0x60>)
 8000660:	7819      	ldrb	r1, [r3, #0]
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <HAL_UART_RxCpltCallback+0x64>)
 8000664:	5499      	strb	r1, [r3, r2]
		  osMessagePut(ModbusQueueHandle, (uint32_t)modem_rx_data[0], osWaitForever);
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_UART_RxCpltCallback+0x68>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <HAL_UART_RxCpltCallback+0x60>)
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	4611      	mov	r1, r2
 8000670:	f04f 32ff 	mov.w	r2, #4294967295
 8000674:	4618      	mov	r0, r3
 8000676:	f006 f8e1 	bl	800683c <osMessagePut>
		  HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800067a:	2201      	movs	r2, #1
 800067c:	4906      	ldr	r1, [pc, #24]	; (8000698 <HAL_UART_RxCpltCallback+0x60>)
 800067e:	4809      	ldr	r0, [pc, #36]	; (80006a4 <HAL_UART_RxCpltCallback+0x6c>)
 8000680:	f004 fdaa 	bl	80051d8 <HAL_UART_Receive_DMA>
	  }
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40004800 	.word	0x40004800
 8000690:	20007f9d 	.word	0x20007f9d
 8000694:	2000080c 	.word	0x2000080c
 8000698:	20016c40 	.word	0x20016c40
 800069c:	20016d40 	.word	0x20016d40
 80006a0:	200080c4 	.word	0x200080c4
 80006a4:	20008070 	.word	0x20008070

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b5b0      	push	{r4, r5, r7, lr}
 80006aa:	b0be      	sub	sp, #248	; 0xf8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f001 f90d 	bl	80018cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 faf9 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 fc83 	bl	8000fc0 <MX_GPIO_Init>
  MX_IWDG_Init();
 80006ba:	f000 fb63 	bl	8000d84 <MX_IWDG_Init>
  MX_RTC_Init();
 80006be:	f000 fb7b 	bl	8000db8 <MX_RTC_Init>
  MX_DMA_Init();
 80006c2:	f000 fc55 	bl	8000f70 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80006c6:	f000 fc29 	bl	8000f1c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80006ca:	f000 fbb9 	bl	8000e40 <MX_SPI2_Init>
  MX_SPI3_Init();
 80006ce:	f000 fbed 	bl	8000eac <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

	spi_buf[0] = 0x07;
 80006d2:	4bb5      	ldr	r3, [pc, #724]	; (80009a8 <main+0x300>)
 80006d4:	2207      	movs	r2, #7
 80006d6:	701a      	strb	r2, [r3, #0]
	spi_buf[1] = 0x40;
 80006d8:	4bb3      	ldr	r3, [pc, #716]	; (80009a8 <main+0x300>)
 80006da:	2240      	movs	r2, #64	; 0x40
 80006dc:	705a      	strb	r2, [r3, #1]
	spi_buf[2] = 0x40;
 80006de:	4bb2      	ldr	r3, [pc, #712]	; (80009a8 <main+0x300>)
 80006e0:	2240      	movs	r2, #64	; 0x40
 80006e2:	709a      	strb	r2, [r3, #2]
	spi_buf[3] = 0x03;
 80006e4:	4bb0      	ldr	r3, [pc, #704]	; (80009a8 <main+0x300>)
 80006e6:	2203      	movs	r2, #3
 80006e8:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f0:	48ae      	ldr	r0, [pc, #696]	; (80009ac <main+0x304>)
 80006f2:	f002 fc69 	bl	8002fc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006f6:	2064      	movs	r0, #100	; 0x64
 80006f8:	f001 f95e 	bl	80019b8 <HAL_Delay>
	if( HAL_SPI_Transmit(&hspi3, &spi_buf[0], 4, 100) != HAL_OK ){}
 80006fc:	2364      	movs	r3, #100	; 0x64
 80006fe:	2204      	movs	r2, #4
 8000700:	49a9      	ldr	r1, [pc, #676]	; (80009a8 <main+0x300>)
 8000702:	48ab      	ldr	r0, [pc, #684]	; (80009b0 <main+0x308>)
 8000704:	f003 fca1 	bl	800404a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070e:	48a7      	ldr	r0, [pc, #668]	; (80009ac <main+0x304>)
 8000710:	f002 fc5a 	bl	8002fc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f001 f94f 	bl	80019b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000720:	48a2      	ldr	r0, [pc, #648]	; (80009ac <main+0x304>)
 8000722:	f002 fc51 	bl	8002fc8 <HAL_GPIO_WritePin>

  BUZ_ON(); // пикаем бузером
 8000726:	f00b fa47 	bl	800bbb8 <BUZ_ON>
  HAL_Delay(50);
 800072a:	2032      	movs	r0, #50	; 0x32
 800072c:	f001 f944 	bl	80019b8 <HAL_Delay>
  BUZ_OFF();
 8000730:	f00b fa4e 	bl	800bbd0 <BUZ_OFF>


  if( ((RCC->BDCR)&0x02) != 0 ) // Проверяем, запустился ли часовой кварц, если запустился включаем светодиод
 8000734:	4b9f      	ldr	r3, [pc, #636]	; (80009b4 <main+0x30c>)
 8000736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	//{
		//fm25v02_write(2*i, 0x00);
		//fm25v02_write(2*i+1, 0x00);
	//}

	fm25v02_write(2*IP_1_REG, 0x00);
 8000738:	2100      	movs	r1, #0
 800073a:	f242 105e 	movw	r0, #8542	; 0x215e
 800073e:	f00b f98d 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*IP_1_REG+1, 195);
 8000742:	21c3      	movs	r1, #195	; 0xc3
 8000744:	f242 105f 	movw	r0, #8543	; 0x215f
 8000748:	f00b f988 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*IP_2_REG, 0x00);
 800074c:	2100      	movs	r1, #0
 800074e:	f242 1060 	movw	r0, #8544	; 0x2160
 8000752:	f00b f983 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*IP_2_REG+1, 208);
 8000756:	21d0      	movs	r1, #208	; 0xd0
 8000758:	f242 1061 	movw	r0, #8545	; 0x2161
 800075c:	f00b f97e 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*IP_3_REG, 0x00);
 8000760:	2100      	movs	r1, #0
 8000762:	f242 1062 	movw	r0, #8546	; 0x2162
 8000766:	f00b f979 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*IP_3_REG+1, 163);
 800076a:	21a3      	movs	r1, #163	; 0xa3
 800076c:	f242 1063 	movw	r0, #8547	; 0x2163
 8000770:	f00b f974 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*IP_4_REG, 0x00);
 8000774:	2100      	movs	r1, #0
 8000776:	f242 1064 	movw	r0, #8548	; 0x2164
 800077a:	f00b f96f 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*IP_4_REG+1, 67);
 800077e:	2143      	movs	r1, #67	; 0x43
 8000780:	f242 1065 	movw	r0, #8549	; 0x2165
 8000784:	f00b f96a 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*PORT_HIGH_REG, 0x00);
 8000788:	2100      	movs	r1, #0
 800078a:	f242 1066 	movw	r0, #8550	; 0x2166
 800078e:	f00b f965 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*PORT_HIGH_REG+1, 136);
 8000792:	2188      	movs	r1, #136	; 0x88
 8000794:	f242 1067 	movw	r0, #8551	; 0x2167
 8000798:	f00b f960 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*PORT_LOW_REG, 0x00);
 800079c:	2100      	movs	r1, #0
 800079e:	f242 1068 	movw	r0, #8552	; 0x2168
 80007a2:	f00b f95b 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*PORT_LOW_REG+1, 234);
 80007a6:	21ea      	movs	r1, #234	; 0xea
 80007a8:	f242 1069 	movw	r0, #8553	; 0x2169
 80007ac:	f00b f956 	bl	800ba5c <fm25v02_write>

	fm25v02_write(2*ID_HIGH_REG, 0x00);
 80007b0:	2100      	movs	r1, #0
 80007b2:	f242 1056 	movw	r0, #8534	; 0x2156
 80007b6:	f00b f951 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*ID_HIGH_REG+1, 0x00);
 80007ba:	2100      	movs	r1, #0
 80007bc:	f242 1057 	movw	r0, #8535	; 0x2157
 80007c0:	f00b f94c 	bl	800ba5c <fm25v02_write>

	fm25v02_write(2*ID_LOW_REG, 0x00);
 80007c4:	2100      	movs	r1, #0
 80007c6:	f242 1058 	movw	r0, #8536	; 0x2158
 80007ca:	f00b f947 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*ID_LOW_REG+1, 0x00);
 80007ce:	2100      	movs	r1, #0
 80007d0:	f242 1059 	movw	r0, #8537	; 0x2159
 80007d4:	f00b f942 	bl	800ba5c <fm25v02_write>




  	read_bootloader_registers_no_rtos(); // читаем ригистры бутлоадера до запуска операционной системы
 80007d8:	f00d fe22 	bl	800e420 <read_bootloader_registers_no_rtos>


	start_address = ((((uint32_t)(bootloader_registers.start_address_firmware_high_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.start_address_firmware_2_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.start_address_firmware_3_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.start_address_firmware_low_reg))&0x000000FF);
 80007dc:	4b76      	ldr	r3, [pc, #472]	; (80009b8 <main+0x310>)
 80007de:	885b      	ldrh	r3, [r3, #2]
 80007e0:	061a      	lsls	r2, r3, #24
 80007e2:	4b75      	ldr	r3, [pc, #468]	; (80009b8 <main+0x310>)
 80007e4:	889b      	ldrh	r3, [r3, #4]
 80007e6:	041b      	lsls	r3, r3, #16
 80007e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80007ec:	431a      	orrs	r2, r3
 80007ee:	4b72      	ldr	r3, [pc, #456]	; (80009b8 <main+0x310>)
 80007f0:	88db      	ldrh	r3, [r3, #6]
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	431a      	orrs	r2, r3
 80007f8:	4b6f      	ldr	r3, [pc, #444]	; (80009b8 <main+0x310>)
 80007fa:	891b      	ldrh	r3, [r3, #8]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4313      	orrs	r3, r2
 8000800:	4a6e      	ldr	r2, [pc, #440]	; (80009bc <main+0x314>)
 8000802:	6013      	str	r3, [r2, #0]

	end_address = ((((uint32_t)(bootloader_registers.end_address_firmware_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.end_address_firmware_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.end_address_firmware_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.end_address_firmware_low_reg))&0x000000FF);
 8000804:	4b6c      	ldr	r3, [pc, #432]	; (80009b8 <main+0x310>)
 8000806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000808:	061a      	lsls	r2, r3, #24
 800080a:	4b6b      	ldr	r3, [pc, #428]	; (80009b8 <main+0x310>)
 800080c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000814:	431a      	orrs	r2, r3
 8000816:	4b68      	ldr	r3, [pc, #416]	; (80009b8 <main+0x310>)
 8000818:	895b      	ldrh	r3, [r3, #10]
 800081a:	021b      	lsls	r3, r3, #8
 800081c:	b29b      	uxth	r3, r3
 800081e:	431a      	orrs	r2, r3
 8000820:	4b65      	ldr	r3, [pc, #404]	; (80009b8 <main+0x310>)
 8000822:	899b      	ldrh	r3, [r3, #12]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4313      	orrs	r3, r2
 8000828:	4a65      	ldr	r2, [pc, #404]	; (80009c0 <main+0x318>)
 800082a:	6013      	str	r3, [r2, #0]

	//end_address = 0x08029EEB;

	firmware_length = end_address - start_address + 1;
 800082c:	4b64      	ldr	r3, [pc, #400]	; (80009c0 <main+0x318>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b62      	ldr	r3, [pc, #392]	; (80009bc <main+0x314>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	3301      	adds	r3, #1
 8000838:	4a62      	ldr	r2, [pc, #392]	; (80009c4 <main+0x31c>)
 800083a:	6013      	str	r3, [r2, #0]

	firmware_crc = (((bootloader_registers.crc_firmware_low_reg)<<8)&0xFF00) | ((bootloader_registers.crc_firmware_high_reg)&0x00FF);
 800083c:	4b5e      	ldr	r3, [pc, #376]	; (80009b8 <main+0x310>)
 800083e:	8a1b      	ldrh	r3, [r3, #16]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21a      	sxth	r2, r3
 8000844:	4b5c      	ldr	r3, [pc, #368]	; (80009b8 <main+0x310>)
 8000846:	89db      	ldrh	r3, [r3, #14]
 8000848:	b21b      	sxth	r3, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	b21b      	sxth	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b21b      	sxth	r3, r3
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b5c      	ldr	r3, [pc, #368]	; (80009c8 <main+0x320>)
 8000856:	801a      	strh	r2, [r3, #0]

	if( (start_address >= 0x08000000) && (start_address <= 0x080FFFFF) && ((start_address + firmware_length) <= 0x080FFFFF) && (firmware_length <= 0xFFFFF) ) // стартовый адресс для расчета контрольной суммы должен входить в диапазон основной памяти контроллера, длина прошивки не должна превышать длину памяти программ контроллера иначе при чтении будет хардфолт
 8000858:	4b58      	ldr	r3, [pc, #352]	; (80009bc <main+0x314>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000860:	d31e      	bcc.n	80008a0 <main+0x1f8>
 8000862:	4b56      	ldr	r3, [pc, #344]	; (80009bc <main+0x314>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800086a:	d219      	bcs.n	80008a0 <main+0x1f8>
 800086c:	4b53      	ldr	r3, [pc, #332]	; (80009bc <main+0x314>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b54      	ldr	r3, [pc, #336]	; (80009c4 <main+0x31c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4413      	add	r3, r2
 8000876:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800087a:	d211      	bcs.n	80008a0 <main+0x1f8>
 800087c:	4b51      	ldr	r3, [pc, #324]	; (80009c4 <main+0x31c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000884:	d20c      	bcs.n	80008a0 <main+0x1f8>
	{
		calculating_firmware_crc = CRC16((unsigned char*)start_address, firmware_length);
 8000886:	4b4d      	ldr	r3, [pc, #308]	; (80009bc <main+0x314>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	4b4d      	ldr	r3, [pc, #308]	; (80009c4 <main+0x31c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	4610      	mov	r0, r2
 8000894:	f00e fa52 	bl	800ed3c <CRC16>
 8000898:	4603      	mov	r3, r0
 800089a:	4a4c      	ldr	r2, [pc, #304]	; (80009cc <main+0x324>)
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e002      	b.n	80008a6 <main+0x1fe>
	}
	else
	{
		calculating_firmware_crc = 0;
 80008a0:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <main+0x324>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
	}



	if( (firmware_crc == calculating_firmware_crc) && (firmware_crc != 0) ) // если рассчетная контрольная сумма прошивки совпадает с указанной и не равна 0
 80008a6:	4b48      	ldr	r3, [pc, #288]	; (80009c8 <main+0x320>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b47      	ldr	r3, [pc, #284]	; (80009cc <main+0x324>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d111      	bne.n	80008d8 <main+0x230>
 80008b4:	4b44      	ldr	r3, [pc, #272]	; (80009c8 <main+0x320>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00d      	beq.n	80008d8 <main+0x230>
	{


		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // записываем в регистры и переменную корректность прошивки
 80008bc:	2100      	movs	r1, #0
 80008be:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80008c2:	f00b f8cb 	bl	800ba5c <fm25v02_write>
		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x01);
 80008c6:	2101      	movs	r1, #1
 80008c8:	f240 201d 	movw	r0, #541	; 0x21d
 80008cc:	f00b f8c6 	bl	800ba5c <fm25v02_write>
		bootloader_registers.firmware_correctness_reg = 0x0001;
 80008d0:	4b39      	ldr	r3, [pc, #228]	; (80009b8 <main+0x310>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	835a      	strh	r2, [r3, #26]
 80008d6:	e00c      	b.n	80008f2 <main+0x24a>

	else // если рассчетная контрольная сумма прошивки не совпадает с указанной
	{


		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // записываем в регистры и переменную ошибку контрольной суммы прошивки
 80008d8:	2100      	movs	r1, #0
 80008da:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80008de:	f00b f8bd 	bl	800ba5c <fm25v02_write>
		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x00);
 80008e2:	2100      	movs	r1, #0
 80008e4:	f240 201d 	movw	r0, #541	; 0x21d
 80008e8:	f00b f8b8 	bl	800ba5c <fm25v02_write>
		bootloader_registers.firmware_correctness_reg = 0x0000;
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <main+0x310>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	835a      	strh	r2, [r3, #26]
	//fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x01);
	//bootloader_registers.firmware_correctness_reg = 0x0001;
	//-----------------------


  	if( bootloader_registers.working_mode_reg == 0 ) // если включен нормальный режим работы
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <main+0x310>)
 80008f4:	8b9b      	ldrh	r3, [r3, #28]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f040 80c9 	bne.w	8000a8e <main+0x3e6>
  	{
  		if(bootloader_registers.jump_attempt_reg < bootloader_registers.max_jump_attempt_reg)
 80008fc:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <main+0x310>)
 80008fe:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <main+0x310>)
 8000902:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000904:	429a      	cmp	r2, r3
 8000906:	f080 80bf 	bcs.w	8000a88 <main+0x3e0>
  		{
  			if( bootloader_registers.firmware_correctness_reg == 1 ) // если прошивка корректна (контрольная сумма совпадает)
 800090a:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <main+0x310>)
 800090c:	8b5b      	ldrh	r3, [r3, #26]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d172      	bne.n	80009f8 <main+0x350>
  			{

  				fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // обнуляем корректность прошивки
 8000912:	2100      	movs	r1, #0
 8000914:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8000918:	f00b f8a0 	bl	800ba5c <fm25v02_write>
  				fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x00);
 800091c:	2100      	movs	r1, #0
 800091e:	f240 201d 	movw	r0, #541	; 0x21d
 8000922:	f00b f89b 	bl	800ba5c <fm25v02_write>
  				bootloader_registers.firmware_correctness_reg = 0x0000;
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <main+0x310>)
 8000928:	2200      	movs	r2, #0
 800092a:	835a      	strh	r2, [r3, #26]

  				fm25v02_write(2*WORKING_MODE_REG, 0x00); // обнуляем корректность прошивки
 800092c:	2100      	movs	r1, #0
 800092e:	f240 201e 	movw	r0, #542	; 0x21e
 8000932:	f00b f893 	bl	800ba5c <fm25v02_write>
  				fm25v02_write(2*WORKING_MODE_REG+1, 0x00);
 8000936:	2100      	movs	r1, #0
 8000938:	f240 201f 	movw	r0, #543	; 0x21f
 800093c:	f00b f88e 	bl	800ba5c <fm25v02_write>
  				bootloader_registers.working_mode_reg = 0x0000;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <main+0x310>)
 8000942:	2200      	movs	r2, #0
 8000944:	839a      	strh	r2, [r3, #28]

  				fm25v02_read(271, &test_data1); // обнуляем регистр режима работы с номером 271 в fram памяти, нужно только для старой прошивки
 8000946:	4922      	ldr	r1, [pc, #136]	; (80009d0 <main+0x328>)
 8000948:	f240 100f 	movw	r0, #271	; 0x10f
 800094c:	f00b f84c 	bl	800b9e8 <fm25v02_read>


  				HAL_UART_DeInit(&huart3);
 8000950:	4820      	ldr	r0, [pc, #128]	; (80009d4 <main+0x32c>)
 8000952:	f004 fb94 	bl	800507e <HAL_UART_DeInit>
  				HAL_SPI_DeInit(&hspi2);
 8000956:	4820      	ldr	r0, [pc, #128]	; (80009d8 <main+0x330>)
 8000958:	f003 fb4f 	bl	8003ffa <HAL_SPI_DeInit>
  				HAL_DMA_DeInit(&hdma_usart3_rx);
 800095c:	481f      	ldr	r0, [pc, #124]	; (80009dc <main+0x334>)
 800095e:	f001 fa11 	bl	8001d84 <HAL_DMA_DeInit>
  				HAL_DMA_DeInit(&hdma_usart3_tx);
 8000962:	481f      	ldr	r0, [pc, #124]	; (80009e0 <main+0x338>)
 8000964:	f001 fa0e 	bl	8001d84 <HAL_DMA_DeInit>

  				HAL_RCC_DeInit();
 8000968:	f003 f8f6 	bl	8003b58 <HAL_RCC_DeInit>

  				HAL_DeInit(); // деинициализируем HAL
 800096c:	f000 ffd0 	bl	8001910 <HAL_DeInit>

  				JumpAddress = *(__IO uint32_t*) (ApplicationAddress2+4); // адрес перехода
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <main+0x33c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3304      	adds	r3, #4
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <main+0x340>)
 800097a:	6013      	str	r3, [r2, #0]
  				Jump_To_Application = (pFunction) JumpAddress; // приводим адрес к типу функции
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <main+0x340>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <main+0x344>)
 8000984:	601a      	str	r2, [r3, #0]
  				__set_MSP (*(__IO uint32_t*) ApplicationAddress2);// устанавливаем указатель стека
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <main+0x33c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000990:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000994:	f383 8808 	msr	MSP, r3
}
 8000998:	bf00      	nop

  				SCB->VTOR = FLASH_BASE | 0x10000; // смещаем таблицу векторов прерываний
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <main+0x348>)
 800099c:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <main+0x34c>)
 800099e:	609a      	str	r2, [r3, #8]

  				Jump_To_Application(); // переход к основной программе
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <main+0x344>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4798      	blx	r3
 80009a6:	e072      	b.n	8000a8e <main+0x3e6>
 80009a8:	2000800c 	.word	0x2000800c
 80009ac:	40020800 	.word	0x40020800
 80009b0:	20016bac 	.word	0x20016bac
 80009b4:	40023800 	.word	0x40023800
 80009b8:	20018990 	.word	0x20018990
 80009bc:	20016e48 	.word	0x20016e48
 80009c0:	20016e58 	.word	0x20016e58
 80009c4:	20016e5c 	.word	0x20016e5c
 80009c8:	20016e42 	.word	0x20016e42
 80009cc:	20016e50 	.word	0x20016e50
 80009d0:	20016b28 	.word	0x20016b28
 80009d4:	20008070 	.word	0x20008070
 80009d8:	20007fb0 	.word	0x20007fb0
 80009dc:	20008010 	.word	0x20008010
 80009e0:	20016b40 	.word	0x20016b40
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20016b2c 	.word	0x20016b2c
 80009ec:	20016ba8 	.word	0x20016ba8
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	08010000 	.word	0x08010000

  			}
  			else if( bootloader_registers.firmware_correctness_reg == 0 )
 80009f8:	4b93      	ldr	r3, [pc, #588]	; (8000c48 <main+0x5a0>)
 80009fa:	8b5b      	ldrh	r3, [r3, #26]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d146      	bne.n	8000a8e <main+0x3e6>
  			{
  				fm25v02_read(2*JUMP_ATTEMPT_REG, &temp_h); // увеличиваем количество попыток перейти в основную программу
 8000a00:	f107 03ef 	add.w	r3, r7, #239	; 0xef
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 7009 	mov.w	r0, #548	; 0x224
 8000a0a:	f00a ffed 	bl	800b9e8 <fm25v02_read>
  				fm25v02_read(2*JUMP_ATTEMPT_REG+1, &temp_l);
 8000a0e:	f107 03ee 	add.w	r3, r7, #238	; 0xee
 8000a12:	4619      	mov	r1, r3
 8000a14:	f240 2025 	movw	r0, #549	; 0x225
 8000a18:	f00a ffe6 	bl	800b9e8 <fm25v02_read>
  				temp_jump_attempt = (((uint16_t)temp_h)<<8)|((uint16_t)(temp_l));
 8000a1c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8000a28:	b21b      	sxth	r3, r3
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
  				temp_jump_attempt = temp_jump_attempt + 1;
 8000a32:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8000a36:	3301      	adds	r3, #1
 8000a38:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
  				temp_h = (uint8_t)(temp_jump_attempt>>8);
 8000a3c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  				temp_l = (uint8_t)(temp_jump_attempt);
 8000a4a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
  				fm25v02_write(2*JUMP_ATTEMPT_REG, temp_h);
 8000a54:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f44f 7009 	mov.w	r0, #548	; 0x224
 8000a5e:	f00a fffd 	bl	800ba5c <fm25v02_write>
  				fm25v02_write(2*JUMP_ATTEMPT_REG+1, temp_l);
 8000a62:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8000a66:	4619      	mov	r1, r3
 8000a68:	f240 2025 	movw	r0, #549	; 0x225
 8000a6c:	f00a fff6 	bl	800ba5c <fm25v02_write>

  				HAL_Delay(100);
 8000a70:	2064      	movs	r0, #100	; 0x64
 8000a72:	f000 ffa1 	bl	80019b8 <HAL_Delay>

  				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 8000a76:	4b75      	ldr	r3, [pc, #468]	; (8000c4c <main+0x5a4>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fd6c 	bl	800655c <osMutexWait>
  				NVIC_SystemReset();
 8000a84:	f7ff fdac 	bl	80005e0 <__NVIC_SystemReset>
  			}
  		}

  		else
  		{
  			start_default_task_delay = 100;
 8000a88:	4b71      	ldr	r3, [pc, #452]	; (8000c50 <main+0x5a8>)
 8000a8a:	2264      	movs	r2, #100	; 0x64
 8000a8c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

    osMutexDef(UartMutex);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8000a9a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 fd44 	bl	800652c <osMutexCreate>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4a6b      	ldr	r2, [pc, #428]	; (8000c54 <main+0x5ac>)
 8000aa8:	6013      	str	r3, [r2, #0]

    osMutexDef(Fm25v02Mutex);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    Fm25v02MutexHandle = osMutexCreate(osMutex(Fm25v02Mutex));
 8000ab6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000aba:	4618      	mov	r0, r3
 8000abc:	f005 fd36 	bl	800652c <osMutexCreate>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a62      	ldr	r2, [pc, #392]	; (8000c4c <main+0x5a4>)
 8000ac4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

    osSemaphoreDef(TransmissionState);
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    TransmissionStateHandle = osSemaphoreCreate(osSemaphore(TransmissionState), 1);
 8000ad2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f005 fdc3 	bl	8006664 <osSemaphoreCreate>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4a5d      	ldr	r2, [pc, #372]	; (8000c58 <main+0x5b0>)
 8000ae2:	6013      	str	r3, [r2, #0]

    osSemaphoreDef(ModbusPacketReceive);
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    ModbusPacketReceiveHandle = osSemaphoreCreate(osSemaphore(ModbusPacketReceive), 1);
 8000af0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f005 fdb4 	bl	8006664 <osSemaphoreCreate>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a57      	ldr	r2, [pc, #348]	; (8000c5c <main+0x5b4>)
 8000b00:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

    osTimerDef(AT_Timer, Callback_AT_Timer);
 8000b02:	4b57      	ldr	r3, [pc, #348]	; (8000c60 <main+0x5b8>)
 8000b04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    AT_TimerHandle = osTimerCreate(osTimer(AT_Timer), osTimerOnce, NULL);
 8000b0e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 fc54 	bl	80063c4 <osTimerCreate>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a51      	ldr	r2, [pc, #324]	; (8000c64 <main+0x5bc>)
 8000b20:	6013      	str	r3, [r2, #0]

    osTimerDef(Ring_Center_Timer, Callback_Ring_Center_Timer);
 8000b22:	4b51      	ldr	r3, [pc, #324]	; (8000c68 <main+0x5c0>)
 8000b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    Ring_Center_TimerHandle = osTimerCreate(osTimer(Ring_Center_Timer), osTimerOnce, NULL);
 8000b2e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f005 fc44 	bl	80063c4 <osTimerCreate>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a4b      	ldr	r2, [pc, #300]	; (8000c6c <main+0x5c4>)
 8000b40:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

    osMessageQDef(ModbusQueue, 6000, uint8_t);
 8000b42:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <main+0x5c8>)
 8000b44:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000b48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ModbusQueueHandle = osMessageCreate(osMessageQ(ModbusQueue), NULL);
 8000b4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f005 fe49 	bl	80067ec <osMessageCreate>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4a45      	ldr	r2, [pc, #276]	; (8000c74 <main+0x5cc>)
 8000b5e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b60:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <main+0x5d0>)
 8000b62:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000b66:	461d      	mov	r5, r3
 8000b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b74:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f005 fbc1 	bl	8006302 <osThreadCreate>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4a3e      	ldr	r2, [pc, #248]	; (8000c7c <main+0x5d4>)
 8000b84:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(M95Task, ThreadM95Task, osPriorityNormal, 0, 128);
 8000b86:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <main+0x5d8>)
 8000b88:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b8c:	461d      	mov	r5, r3
 8000b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  M95TaskHandle = osThreadCreate(osThread(M95Task), NULL);
 8000b9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f005 fbae 	bl	8006302 <osThreadCreate>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <main+0x5dc>)
 8000baa:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusTask, ThreadModbusTask, osPriorityNormal, 0, 128);
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <main+0x5e0>)
 8000bae:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTaskHandle = osThreadCreate(osThread(ModbusTask), NULL);
 8000bc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f005 fb9b 	bl	8006302 <osThreadCreate>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <main+0x5e4>)
 8000bd0:	6013      	str	r3, [r2, #0]

  osThreadDef(MainTask, ThreadMainTask, osPriorityNormal, 0, 128);
 8000bd2:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <main+0x5e8>)
 8000bd4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000bd8:	461d      	mov	r5, r3
 8000bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8000be6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f005 fb88 	bl	8006302 <osThreadCreate>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a27      	ldr	r2, [pc, #156]	; (8000c94 <main+0x5ec>)
 8000bf6:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusPacketTask, ThreadModbusPacketTask, osPriorityNormal, 0, 128);
 8000bf8:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <main+0x5f0>)
 8000bfa:	f107 0420 	add.w	r4, r7, #32
 8000bfe:	461d      	mov	r5, r3
 8000c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusPacketTaskHandle = osThreadCreate(osThread(ModbusPacketTask), NULL);
 8000c0c:	f107 0320 	add.w	r3, r7, #32
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f005 fb75 	bl	8006302 <osThreadCreate>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4a20      	ldr	r2, [pc, #128]	; (8000c9c <main+0x5f4>)
 8000c1c:	6013      	str	r3, [r2, #0]

  osThreadDef(ReadRegistersTask, ThreadReadRegistersTask, osPriorityNormal, 0, 128);
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <main+0x5f8>)
 8000c20:	1d3c      	adds	r4, r7, #4
 8000c22:	461d      	mov	r5, r3
 8000c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadRegistersTaskHandle = osThreadCreate(osThread(ReadRegistersTask), NULL);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f005 fb64 	bl	8006302 <osThreadCreate>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <main+0x5fc>)
 8000c3e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c40:	f005 fb58 	bl	80062f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <main+0x59c>
 8000c46:	bf00      	nop
 8000c48:	20018990 	.word	0x20018990
 8000c4c:	20016c3c 	.word	0x20016c3c
 8000c50:	20000004 	.word	0x20000004
 8000c54:	20016b38 	.word	0x20016b38
 8000c58:	20016e4c 	.word	0x20016e4c
 8000c5c:	20016c14 	.word	0x20016c14
 8000c60:	080011b9 	.word	0x080011b9
 8000c64:	20016b30 	.word	0x20016b30
 8000c68:	080011d9 	.word	0x080011d9
 8000c6c:	20016b3c 	.word	0x20016b3c
 8000c70:	0800f7d0 	.word	0x0800f7d0
 8000c74:	200080c4 	.word	0x200080c4
 8000c78:	0800f7e0 	.word	0x0800f7e0
 8000c7c:	20007fac 	.word	0x20007fac
 8000c80:	0800f7fc 	.word	0x0800f7fc
 8000c84:	20016c10 	.word	0x20016c10
 8000c88:	0800f818 	.word	0x0800f818
 8000c8c:	20016c0c 	.word	0x20016c0c
 8000c90:	0800f834 	.word	0x0800f834
 8000c94:	20016c08 	.word	0x20016c08
 8000c98:	0800f850 	.word	0x0800f850
 8000c9c:	20016ba4 	.word	0x20016ba4
 8000ca0:	0800f86c 	.word	0x0800f86c
 8000ca4:	200080b4 	.word	0x200080b4

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	; 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2230      	movs	r2, #48	; 0x30
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00e f8ac 	bl	800ee14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <SystemClock_Config+0xd4>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a29      	ldr	r2, [pc, #164]	; (8000d7c <SystemClock_Config+0xd4>)
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <SystemClock_Config+0xd4>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <SystemClock_Config+0xd8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a23      	ldr	r2, [pc, #140]	; (8000d80 <SystemClock_Config+0xd8>)
 8000cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <SystemClock_Config+0xd8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000d04:	230d      	movs	r3, #13
 8000d06:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d12:	2301      	movs	r3, #1
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d20:	2319      	movs	r3, #25
 8000d22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0320 	add.w	r3, r7, #32
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 f9b2 	bl	80030a0 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d42:	f000 fab1 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	2105      	movs	r1, #5
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fc13 	bl	8003590 <HAL_RCC_ClockConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d70:	f000 fa9a 	bl	80012a8 <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3750      	adds	r7, #80	; 0x50
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40007000 	.word	0x40007000

08000d84 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_IWDG_Init+0x2c>)
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <MX_IWDG_Init+0x30>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_IWDG_Init+0x2c>)
 8000d90:	2203      	movs	r2, #3
 8000d92:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_IWDG_Init+0x2c>)
 8000d96:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000d9a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_IWDG_Init+0x2c>)
 8000d9e:	f002 f92c 	bl	8002ffa <HAL_IWDG_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000da8:	f000 fa7e 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200080b8 	.word	0x200080b8
 8000db4:	40003000 	.word	0x40003000

08000db8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000dcc:	2300      	movs	r3, #0
 8000dce:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_RTC_Init+0x80>)
 8000dd2:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <MX_RTC_Init+0x84>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_RTC_Init+0x80>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_RTC_Init+0x80>)
 8000dde:	227f      	movs	r2, #127	; 0x7f
 8000de0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_RTC_Init+0x80>)
 8000de4:	22ff      	movs	r2, #255	; 0xff
 8000de6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_RTC_Init+0x80>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_RTC_Init+0x80>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_RTC_Init+0x80>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dfa:	480f      	ldr	r0, [pc, #60]	; (8000e38 <MX_RTC_Init+0x80>)
 8000dfc:	f002 ff7a 	bl	8003cf4 <HAL_RTC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000e06:	f000 fa4f 	bl	80012a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  //if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  //{
    //Error_Handler();
  //}
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e22:	2301      	movs	r3, #1
 8000e24:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000e26:	2301      	movs	r3, #1
 8000e28:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	70fb      	strb	r3, [r7, #3]
  //}
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20016c1c 	.word	0x20016c1c
 8000e3c:	40002800 	.word	0x40002800

08000e40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e46:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <MX_SPI2_Init+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e74:	2220      	movs	r2, #32
 8000e76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e8c:	220a      	movs	r2, #10
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e92:	f003 f829 	bl	8003ee8 <HAL_SPI_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e9c:	f000 fa04 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20007fb0 	.word	0x20007fb0
 8000ea8:	40003800 	.word	0x40003800

08000eac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000eb2:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <MX_SPI3_Init+0x6c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000eb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ebc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000ec0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ec4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ede:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000efa:	220a      	movs	r2, #10
 8000efc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_SPI3_Init+0x68>)
 8000f00:	f002 fff2 	bl	8003ee8 <HAL_SPI_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000f0a:	f000 f9cd 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20016bac 	.word	0x20016bac
 8000f18:	40003c00 	.word	0x40003c00

08000f1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_USART3_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_USART3_UART_Init+0x4c>)
 8000f54:	f004 f846 	bl	8004fe4 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f000 f9a3 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20008070 	.word	0x20008070
 8000f6c:	40004800 	.word	0x40004800

08000f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_DMA_Init+0x4c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <MX_DMA_Init+0x4c>)
 8000f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <MX_DMA_Init+0x4c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2105      	movs	r1, #5
 8000f96:	200c      	movs	r0, #12
 8000f98:	f000 fe0e 	bl	8001bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f9c:	200c      	movs	r0, #12
 8000f9e:	f000 fe27 	bl	8001bf0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	200e      	movs	r0, #14
 8000fa8:	f000 fe06 	bl	8001bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fac:	200e      	movs	r0, #14
 8000fae:	f000 fe1f 	bl	8001bf0 <HAL_NVIC_EnableIRQ>

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	; 0x30
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	4b71      	ldr	r3, [pc, #452]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a70      	ldr	r2, [pc, #448]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b6e      	ldr	r3, [pc, #440]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	61bb      	str	r3, [r7, #24]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	4b6a      	ldr	r3, [pc, #424]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a69      	ldr	r2, [pc, #420]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b67      	ldr	r3, [pc, #412]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a62      	ldr	r2, [pc, #392]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b60      	ldr	r3, [pc, #384]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a5b      	ldr	r2, [pc, #364]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b59      	ldr	r3, [pc, #356]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b55      	ldr	r3, [pc, #340]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a54      	ldr	r2, [pc, #336]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b52      	ldr	r3, [pc, #328]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b4e      	ldr	r3, [pc, #312]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a4d      	ldr	r2, [pc, #308]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <MX_GPIO_Init+0x1e0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800107e:	2200      	movs	r2, #0
 8001080:	f248 017e 	movw	r1, #32894	; 0x807e
 8001084:	4847      	ldr	r0, [pc, #284]	; (80011a4 <MX_GPIO_Init+0x1e4>)
 8001086:	f001 ff9f 	bl	8002fc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_15|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_1, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f242 0102 	movw	r1, #8194	; 0x2002
 8001090:	4845      	ldr	r0, [pc, #276]	; (80011a8 <MX_GPIO_Init+0x1e8>)
 8001092:	f001 ff99 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2103      	movs	r1, #3
 800109a:	4844      	ldr	r0, [pc, #272]	; (80011ac <MX_GPIO_Init+0x1ec>)
 800109c:	f001 ff94 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a6:	4842      	ldr	r0, [pc, #264]	; (80011b0 <MX_GPIO_Init+0x1f0>)
 80010a8:	f001 ff8e 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80010b2:	4840      	ldr	r0, [pc, #256]	; (80011b4 <MX_GPIO_Init+0x1f4>)
 80010b4:	f001 ff88 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010be:	483a      	ldr	r0, [pc, #232]	; (80011a8 <MX_GPIO_Init+0x1e8>)
 80010c0:	f001 ff82 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2120      	movs	r1, #32
 80010c8:	4839      	ldr	r0, [pc, #228]	; (80011b0 <MX_GPIO_Init+0x1f0>)
 80010ca:	f001 ff7d 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80010ce:	237e      	movs	r3, #126	; 0x7e
 80010d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	482f      	ldr	r0, [pc, #188]	; (80011a4 <MX_GPIO_Init+0x1e4>)
 80010e6:	f001 fcd7 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC1 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_11;
 80010ea:	f642 0302 	movw	r3, #10242	; 0x2802
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4829      	ldr	r0, [pc, #164]	; (80011a8 <MX_GPIO_Init+0x1e8>)
 8001104:	f001 fcc8 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001108:	2303      	movs	r3, #3
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4823      	ldr	r0, [pc, #140]	; (80011ac <MX_GPIO_Init+0x1ec>)
 8001120:	f001 fcba 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800112e:	2302      	movs	r3, #2
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	4819      	ldr	r0, [pc, #100]	; (80011a4 <MX_GPIO_Init+0x1e4>)
 800113e:	f001 fcab 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_5;
 8001142:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <MX_GPIO_Init+0x1f0>)
 800115c:	f001 fc9c 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001160:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800116a:	2302      	movs	r3, #2
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	480e      	ldr	r0, [pc, #56]	; (80011b4 <MX_GPIO_Init+0x1f4>)
 800117a:	f001 fc8d 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800117e:	2301      	movs	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_GPIO_Init+0x1e4>)
 8001192:	f001 fc81 	bl	8002a98 <HAL_GPIO_Init>

}
 8001196:	bf00      	nop
 8001198:	3730      	adds	r7, #48	; 0x30
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020c00 	.word	0x40020c00

080011b8 <Callback_AT_Timer>:

/* USER CODE BEGIN 4 */

void Callback_AT_Timer(void const * argument)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

	read_rx_state = NOT_ACTIVE;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <Callback_AT_Timer+0x1c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20016c18 	.word	0x20016c18

080011d8 <Callback_Ring_Center_Timer>:

void Callback_Ring_Center_Timer(void const * argument)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	modem_reset_state = 1;
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <Callback_Ring_Center_Timer+0x1c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	2000080d 	.word	0x2000080d

080011f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	HAL_IWDG_Refresh(&hiwdg);
 8001200:	481b      	ldr	r0, [pc, #108]	; (8001270 <StartDefaultTask+0x78>)
 8001202:	f001 ff3c 	bl	800307e <HAL_IWDG_Refresh>
	//LED_VD3_TOGGLE();

		spi_buf[0] = 0x07;
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <StartDefaultTask+0x7c>)
 8001208:	2207      	movs	r2, #7
 800120a:	701a      	strb	r2, [r3, #0]
		spi_buf[1] = 0x40;
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <StartDefaultTask+0x7c>)
 800120e:	2240      	movs	r2, #64	; 0x40
 8001210:	705a      	strb	r2, [r3, #1]
		spi_buf[2] = 0x40;
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <StartDefaultTask+0x7c>)
 8001214:	2240      	movs	r2, #64	; 0x40
 8001216:	709a      	strb	r2, [r3, #2]
		spi_buf[3] = 0x03;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <StartDefaultTask+0x7c>)
 800121a:	2203      	movs	r2, #3
 800121c:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001224:	4814      	ldr	r0, [pc, #80]	; (8001278 <StartDefaultTask+0x80>)
 8001226:	f001 fecf 	bl	8002fc8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800122a:	2064      	movs	r0, #100	; 0x64
 800122c:	f000 fbc4 	bl	80019b8 <HAL_Delay>
		while( HAL_SPI_Transmit(&hspi3, &spi_buf[0], 4, 100) != HAL_OK ){}
 8001230:	bf00      	nop
 8001232:	2364      	movs	r3, #100	; 0x64
 8001234:	2204      	movs	r2, #4
 8001236:	490f      	ldr	r1, [pc, #60]	; (8001274 <StartDefaultTask+0x7c>)
 8001238:	4810      	ldr	r0, [pc, #64]	; (800127c <StartDefaultTask+0x84>)
 800123a:	f002 ff06 	bl	800404a <HAL_SPI_Transmit>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f6      	bne.n	8001232 <StartDefaultTask+0x3a>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124a:	480b      	ldr	r0, [pc, #44]	; (8001278 <StartDefaultTask+0x80>)
 800124c:	f001 febc 	bl	8002fc8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f000 fbb1 	bl	80019b8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <StartDefaultTask+0x80>)
 800125e:	f001 feb3 	bl	8002fc8 <HAL_GPIO_WritePin>

	osDelay(start_default_task_delay);
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <StartDefaultTask+0x88>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f005 f897 	bl	800639a <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 800126c:	e7c8      	b.n	8001200 <StartDefaultTask+0x8>
 800126e:	bf00      	nop
 8001270:	200080b8 	.word	0x200080b8
 8001274:	2000800c 	.word	0x2000800c
 8001278:	40020800 	.word	0x40020800
 800127c:	20016bac 	.word	0x20016bac
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001296:	f000 fb6f 	bl	8001978 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40010000 	.word	0x40010000

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	NVIC_SystemReset();
 80012ac:	f7ff f998 	bl	80005e0 <__NVIC_SystemReset>

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_MspInit+0x54>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <HAL_MspInit+0x54>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_MspInit+0x54>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_MspInit+0x54>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_MspInit+0x54>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_MspInit+0x54>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	210f      	movs	r1, #15
 80012f2:	f06f 0001 	mvn.w	r0, #1
 80012f6:	f000 fc5f 	bl	8001bb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <HAL_RTC_MspInit+0x4c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d111      	bne.n	800134c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001328:	2302      	movs	r3, #2
 800132a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800132c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001330:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fb2c 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001342:	f7ff ffb1 	bl	80012a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <HAL_RTC_MspInit+0x50>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40002800 	.word	0x40002800
 8001358:	42470e3c 	.word	0x42470e3c

0800135c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a33      	ldr	r2, [pc, #204]	; (8001448 <HAL_SPI_MspInit+0xec>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12d      	bne.n	80013da <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	4b32      	ldr	r3, [pc, #200]	; (800144c <HAL_SPI_MspInit+0xf0>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a31      	ldr	r2, [pc, #196]	; (800144c <HAL_SPI_MspInit+0xf0>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <HAL_SPI_MspInit+0xf0>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_SPI_MspInit+0xf0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a2a      	ldr	r2, [pc, #168]	; (800144c <HAL_SPI_MspInit+0xf0>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <HAL_SPI_MspInit+0xf0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013c8:	2305      	movs	r3, #5
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	481f      	ldr	r0, [pc, #124]	; (8001450 <HAL_SPI_MspInit+0xf4>)
 80013d4:	f001 fb60 	bl	8002a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013d8:	e031      	b.n	800143e <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_SPI_MspInit+0xf8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d12c      	bne.n	800143e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_SPI_MspInit+0xf0>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_SPI_MspInit+0xf0>)
 80013ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f2:	6413      	str	r3, [r2, #64]	; 0x40
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_SPI_MspInit+0xf0>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_SPI_MspInit+0xf0>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_SPI_MspInit+0xf0>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6313      	str	r3, [r2, #48]	; 0x30
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_SPI_MspInit+0xf0>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800141c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800142e:	2306      	movs	r3, #6
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	4807      	ldr	r0, [pc, #28]	; (8001458 <HAL_SPI_MspInit+0xfc>)
 800143a:	f001 fb2d 	bl	8002a98 <HAL_GPIO_Init>
}
 800143e:	bf00      	nop
 8001440:	3730      	adds	r7, #48	; 0x30
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40003800 	.word	0x40003800
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400
 8001454:	40003c00 	.word	0x40003c00
 8001458:	40020800 	.word	0x40020800

0800145c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <HAL_SPI_MspDeInit+0x54>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10b      	bne.n	8001486 <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_SPI_MspDeInit+0x58>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <HAL_SPI_MspDeInit+0x58>)
 8001474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800147a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800147e:	480e      	ldr	r0, [pc, #56]	; (80014b8 <HAL_SPI_MspDeInit+0x5c>)
 8001480:	f001 fca6 	bl	8002dd0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001484:	e00f      	b.n	80014a6 <HAL_SPI_MspDeInit+0x4a>
  else if(hspi->Instance==SPI3)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <HAL_SPI_MspDeInit+0x60>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d10a      	bne.n	80014a6 <HAL_SPI_MspDeInit+0x4a>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_SPI_MspDeInit+0x58>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_SPI_MspDeInit+0x58>)
 8001496:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_12);
 800149c:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <HAL_SPI_MspDeInit+0x64>)
 80014a2:	f001 fc95 	bl	8002dd0 <HAL_GPIO_DeInit>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40003800 	.word	0x40003800
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40003c00 	.word	0x40003c00
 80014c0:	40020800 	.word	0x40020800

080014c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_UART_MspInit+0x150>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	f040 8091 	bne.w	800160a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <HAL_UART_MspInit+0x154>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a49      	ldr	r2, [pc, #292]	; (8001618 <HAL_UART_MspInit+0x154>)
 80014f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b47      	ldr	r3, [pc, #284]	; (8001618 <HAL_UART_MspInit+0x154>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	4b43      	ldr	r3, [pc, #268]	; (8001618 <HAL_UART_MspInit+0x154>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	4a42      	ldr	r2, [pc, #264]	; (8001618 <HAL_UART_MspInit+0x154>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	6313      	str	r3, [r2, #48]	; 0x30
 8001514:	4b40      	ldr	r3, [pc, #256]	; (8001618 <HAL_UART_MspInit+0x154>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001520:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001532:	2307      	movs	r3, #7
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4837      	ldr	r0, [pc, #220]	; (800161c <HAL_UART_MspInit+0x158>)
 800153e:	f001 faab 	bl	8002a98 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001542:	4b37      	ldr	r3, [pc, #220]	; (8001620 <HAL_UART_MspInit+0x15c>)
 8001544:	4a37      	ldr	r2, [pc, #220]	; (8001624 <HAL_UART_MspInit+0x160>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <HAL_UART_MspInit+0x15c>)
 800154a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800154e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001550:	4b33      	ldr	r3, [pc, #204]	; (8001620 <HAL_UART_MspInit+0x15c>)
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	4b32      	ldr	r3, [pc, #200]	; (8001620 <HAL_UART_MspInit+0x15c>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_UART_MspInit+0x15c>)
 800155e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001562:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <HAL_UART_MspInit+0x15c>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_UART_MspInit+0x15c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_UART_MspInit+0x15c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_UART_MspInit+0x15c>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800157c:	4b28      	ldr	r3, [pc, #160]	; (8001620 <HAL_UART_MspInit+0x15c>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001582:	4827      	ldr	r0, [pc, #156]	; (8001620 <HAL_UART_MspInit+0x15c>)
 8001584:	f000 fb50 	bl	8001c28 <HAL_DMA_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800158e:	f7ff fe8b 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a22      	ldr	r2, [pc, #136]	; (8001620 <HAL_UART_MspInit+0x15c>)
 8001596:	635a      	str	r2, [r3, #52]	; 0x34
 8001598:	4a21      	ldr	r2, [pc, #132]	; (8001620 <HAL_UART_MspInit+0x15c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015a0:	4a22      	ldr	r2, [pc, #136]	; (800162c <HAL_UART_MspInit+0x168>)
 80015a2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015be:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80015de:	4812      	ldr	r0, [pc, #72]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015e0:	f000 fb22 	bl	8001c28 <HAL_DMA_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80015ea:	f7ff fe5d 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015f2:	639a      	str	r2, [r3, #56]	; 0x38
 80015f4:	4a0c      	ldr	r2, [pc, #48]	; (8001628 <HAL_UART_MspInit+0x164>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2105      	movs	r1, #5
 80015fe:	2027      	movs	r0, #39	; 0x27
 8001600:	f000 fada 	bl	8001bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001604:	2027      	movs	r0, #39	; 0x27
 8001606:	f000 faf3 	bl	8001bf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40004800 	.word	0x40004800
 8001618:	40023800 	.word	0x40023800
 800161c:	40020400 	.word	0x40020400
 8001620:	20016b40 	.word	0x20016b40
 8001624:	40026058 	.word	0x40026058
 8001628:	20008010 	.word	0x20008010
 800162c:	40026028 	.word	0x40026028

08001630 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_UART_MspDeInit+0x4c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d117      	bne.n	8001672 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_UART_MspDeInit+0x50>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <HAL_UART_MspDeInit+0x50>)
 8001648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800164e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001652:	480c      	ldr	r0, [pc, #48]	; (8001684 <HAL_UART_MspDeInit+0x54>)
 8001654:	f001 fbbc 	bl	8002dd0 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fb91 	bl	8001d84 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fb8c 	bl	8001d84 <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800166c:	2027      	movs	r0, #39	; 0x27
 800166e:	f000 facd 	bl	8001c0c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40004800 	.word	0x40004800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400

08001688 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	2019      	movs	r0, #25
 800169e:	f000 fa8b 	bl	8001bb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016a2:	2019      	movs	r0, #25
 80016a4:	f000 faa4 	bl	8001bf0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <HAL_InitTick+0xa4>)
 80016ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b0:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_InitTick+0xa4>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6453      	str	r3, [r2, #68]	; 0x44
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <HAL_InitTick+0xa4>)
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016c4:	f107 0210 	add.w	r2, r7, #16
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 f92e 	bl	8003930 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80016d4:	f002 f918 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 80016d8:	4603      	mov	r3, r0
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e0:	4a13      	ldr	r2, [pc, #76]	; (8001730 <HAL_InitTick+0xa8>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0c9b      	lsrs	r3, r3, #18
 80016e8:	3b01      	subs	r3, #1
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_InitTick+0xac>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <HAL_InitTick+0xb0>)
 80016f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_InitTick+0xac>)
 80016f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_InitTick+0xac>)
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_InitTick+0xac>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_InitTick+0xac>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <HAL_InitTick+0xac>)
 800170e:	f003 f9bb 	bl	8004a88 <HAL_TIM_Base_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d104      	bne.n	8001722 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <HAL_InitTick+0xac>)
 800171a:	f003 fa0f 	bl	8004b3c <HAL_TIM_Base_Start_IT>
 800171e:	4603      	mov	r3, r0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3730      	adds	r7, #48	; 0x30
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	431bde83 	.word	0x431bde83
 8001734:	20016e60 	.word	0x20016e60
 8001738:	40010000 	.word	0x40010000

0800173c <__NVIC_SystemReset>:
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001740:	f3bf 8f4f 	dsb	sy
}
 8001744:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <__NVIC_SystemReset+0x24>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800174e:	4904      	ldr	r1, [pc, #16]	; (8001760 <__NVIC_SystemReset+0x24>)
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_SystemReset+0x28>)
 8001752:	4313      	orrs	r3, r2
 8001754:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001756:	f3bf 8f4f 	dsb	sy
}
 800175a:	bf00      	nop
    __NOP();
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <__NVIC_SystemReset+0x20>
 8001760:	e000ed00 	.word	0xe000ed00
 8001764:	05fa0004 	.word	0x05fa0004

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	NVIC_SystemReset();
 8001772:	f7ff ffe3 	bl	800173c <__NVIC_SystemReset>

08001776 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <MemManage_Handler+0x4>

0800177c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <BusFault_Handler+0x4>

08001782 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <UsageFault_Handler+0x4>

08001788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <DMA1_Stream1_IRQHandler+0x10>)
 800179e:	f000 fc39 	bl	8002014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20008010 	.word	0x20008010

080017ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <DMA1_Stream3_IRQHandler+0x10>)
 80017b2:	f000 fc2f 	bl	8002014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20016b40 	.word	0x20016b40

080017c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017c6:	f003 fa29 	bl	8004c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20016e60 	.word	0x20016e60

080017d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <USART3_IRQHandler+0x10>)
 80017da:	f003 fd2d 	bl	8005238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20008070 	.word	0x20008070

080017e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <_sbrk+0x5c>)
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <_sbrk+0x60>)
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <_sbrk+0x64>)
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <_sbrk+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	429a      	cmp	r2, r3
 8001816:	d207      	bcs.n	8001828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001818:	f00d fac2 	bl	800eda0 <__errno>
 800181c:	4603      	mov	r3, r0
 800181e:	220c      	movs	r2, #12
 8001820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e009      	b.n	800183c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <_sbrk+0x64>)
 8001838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20020000 	.word	0x20020000
 8001848:	00000400 	.word	0x00000400
 800184c:	20000810 	.word	0x20000810
 8001850:	20018b30 	.word	0x20018b30

08001854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <SystemInit+0x20>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <SystemInit+0x20>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800187e:	490e      	ldr	r1, [pc, #56]	; (80018b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001894:	4c0b      	ldr	r4, [pc, #44]	; (80018c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018a2:	f7ff ffd7 	bl	8001854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a6:	f00d fa81 	bl	800edac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018aa:	f7fe fefd 	bl	80006a8 <main>
  bx  lr    
 80018ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80018bc:	0800fd64 	.word	0x0800fd64
  ldr r2, =_sbss
 80018c0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80018c4:	20018b2c 	.word	0x20018b2c

080018c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC_IRQHandler>
	...

080018cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0d      	ldr	r2, [pc, #52]	; (800190c <HAL_Init+0x40>)
 80018d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_Init+0x40>)
 80018e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <HAL_Init+0x40>)
 80018ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f4:	2003      	movs	r0, #3
 80018f6:	f000 f954 	bl	8001ba2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fa:	200f      	movs	r0, #15
 80018fc:	f7ff fec4 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001900:	f7ff fcd6 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023c00 	.word	0x40023c00

08001910 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_DeInit+0x54>)
 8001916:	f04f 32ff 	mov.w	r2, #4294967295
 800191a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_DeInit+0x54>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_DeInit+0x54>)
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_DeInit+0x54>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_DeInit+0x54>)
 8001932:	f04f 32ff 	mov.w	r2, #4294967295
 8001936:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_DeInit+0x54>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_DeInit+0x54>)
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_DeInit+0x54>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_DeInit+0x54>)
 800194e:	f04f 32ff 	mov.w	r2, #4294967295
 8001952:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_DeInit+0x54>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800195a:	f000 f805 	bl	8001968 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x20>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x24>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_IncTick+0x24>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000010 	.word	0x20000010
 800199c:	20016ea8 	.word	0x20016ea8

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20016ea8 	.word	0x20016ea8

080019b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff ffee 	bl	80019a0 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d005      	beq.n	80019de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_Delay+0x44>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019de:	bf00      	nop
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8f7      	bhi.n	80019e0 <HAL_Delay+0x28>
  {
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000010 	.word	0x20000010

08001a00 <__NVIC_SetPriorityGrouping>:
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <__NVIC_EnableIRQ+0x38>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_DisableIRQ>:
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db12      	blt.n	8001ad8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	490a      	ldr	r1, [pc, #40]	; (8001ae4 <__NVIC_DisableIRQ+0x44>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	3320      	adds	r3, #32
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001acc:	f3bf 8f4f 	dsb	sy
}
 8001ad0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ad2:	f3bf 8f6f 	isb	sy
}
 8001ad6:	bf00      	nop
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff28 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bca:	f7ff ff3d 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001bce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	6978      	ldr	r0, [r7, #20]
 8001bd6:	f7ff ffb1 	bl	8001b3c <NVIC_EncodePriority>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff80 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001be8:	bf00      	nop
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff30 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff40 	bl	8001aa0 <__NVIC_DisableIRQ>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff feb4 	bl	80019a0 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e099      	b.n	8001d78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c64:	e00f      	b.n	8001c86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c66:	f7ff fe9b 	bl	80019a0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d908      	bls.n	8001c86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e078      	b.n	8001d78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e8      	bne.n	8001c66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_DMA_Init+0x158>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d107      	bne.n	8001cf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f023 0307 	bic.w	r3, r3, #7
 8001d06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d117      	bne.n	8001d4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00e      	beq.n	8001d4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fb5f 	bl	80023f0 <DMA_CheckFifoParam>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d46:	2301      	movs	r3, #1
 8001d48:	e016      	b.n	8001d78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fb16 	bl	8002384 <DMA_CalcBaseAndBitshift>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	223f      	movs	r2, #63	; 0x3f
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	f010803f 	.word	0xf010803f

08001d84 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e050      	b.n	8001e38 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d101      	bne.n	8001da6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
 8001da4:	e048      	b.n	8001e38 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0201 	bic.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2221      	movs	r2, #33	; 0x21
 8001de4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 facc 	bl	8002384 <DMA_CalcBaseAndBitshift>
 8001dec:	4603      	mov	r3, r0
 8001dee:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	223f      	movs	r2, #63	; 0x3f
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_DMA_Start_IT+0x26>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e040      	b.n	8001ee8 <HAL_DMA_Start_IT+0xa8>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d12f      	bne.n	8001eda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fa4a 	bl	8002328 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	223f      	movs	r2, #63	; 0x3f
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0216 	orr.w	r2, r2, #22
 8001eae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0208 	orr.w	r2, r2, #8
 8001ec6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e005      	b.n	8001ee6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001efe:	f7ff fd4f 	bl	80019a0 <HAL_GetTick>
 8001f02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d008      	beq.n	8001f22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e052      	b.n	8001fc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0216 	bic.w	r2, r2, #22
 8001f30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <HAL_DMA_Abort+0x62>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0208 	bic.w	r2, r2, #8
 8001f60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f72:	e013      	b.n	8001f9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f74:	f7ff fd14 	bl	80019a0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d90c      	bls.n	8001f9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e015      	b.n	8001fc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1e4      	bne.n	8001f74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	223f      	movs	r2, #63	; 0x3f
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00c      	b.n	8002008 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002020:	4b92      	ldr	r3, [pc, #584]	; (800226c <HAL_DMA_IRQHandler+0x258>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a92      	ldr	r2, [pc, #584]	; (8002270 <HAL_DMA_IRQHandler+0x25c>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0a9b      	lsrs	r3, r3, #10
 800202c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2208      	movs	r2, #8
 8002040:	409a      	lsls	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01a      	beq.n	8002080 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0204 	bic.w	r2, r2, #4
 8002066:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	2208      	movs	r2, #8
 800206e:	409a      	lsls	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002084:	2201      	movs	r2, #1
 8002086:	409a      	lsls	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d012      	beq.n	80020b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	2201      	movs	r2, #1
 80020a4:	409a      	lsls	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	f043 0202 	orr.w	r2, r3, #2
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	2204      	movs	r2, #4
 80020bc:	409a      	lsls	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d012      	beq.n	80020ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00b      	beq.n	80020ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2204      	movs	r2, #4
 80020da:	409a      	lsls	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	f043 0204 	orr.w	r2, r3, #4
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2210      	movs	r2, #16
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d043      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d03c      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	2210      	movs	r2, #16
 8002110:	409a      	lsls	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d018      	beq.n	8002156 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d108      	bne.n	8002144 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d024      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
 8002142:	e01f      	b.n	8002184 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01b      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
 8002154:	e016      	b.n	8002184 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0208 	bic.w	r2, r2, #8
 8002172:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	2220      	movs	r2, #32
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 808e 	beq.w	80022b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8086 	beq.w	80022b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	2220      	movs	r2, #32
 80021ac:	409a      	lsls	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d136      	bne.n	800222c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0216 	bic.w	r2, r2, #22
 80021cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <HAL_DMA_IRQHandler+0x1da>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0208 	bic.w	r2, r2, #8
 80021fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	223f      	movs	r2, #63	; 0x3f
 8002204:	409a      	lsls	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221e:	2b00      	cmp	r3, #0
 8002220:	d07d      	beq.n	800231e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
        }
        return;
 800222a:	e078      	b.n	800231e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01c      	beq.n	8002274 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d108      	bne.n	800225a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	2b00      	cmp	r3, #0
 800224e:	d030      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4798      	blx	r3
 8002258:	e02b      	b.n	80022b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d027      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
 800226a:	e022      	b.n	80022b2 <HAL_DMA_IRQHandler+0x29e>
 800226c:	20000008 	.word	0x20000008
 8002270:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0210 	bic.w	r2, r2, #16
 8002290:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d032      	beq.n	8002320 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d022      	beq.n	800230c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2205      	movs	r2, #5
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d307      	bcc.n	80022fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f2      	bne.n	80022de <HAL_DMA_IRQHandler+0x2ca>
 80022f8:	e000      	b.n	80022fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022fa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
 800231c:	e000      	b.n	8002320 <HAL_DMA_IRQHandler+0x30c>
        return;
 800231e:	bf00      	nop
    }
  }
}
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop

08002328 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002344:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b40      	cmp	r3, #64	; 0x40
 8002354:	d108      	bne.n	8002368 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002366:	e007      	b.n	8002378 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	60da      	str	r2, [r3, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	3b10      	subs	r3, #16
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800239e:	4a13      	ldr	r2, [pc, #76]	; (80023ec <DMA_CalcBaseAndBitshift+0x68>)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d909      	bls.n	80023c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	1d1a      	adds	r2, r3, #4
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	659a      	str	r2, [r3, #88]	; 0x58
 80023c4:	e007      	b.n	80023d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	aaaaaaab 	.word	0xaaaaaaab
 80023ec:	0800fab8 	.word	0x0800fab8

080023f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d11f      	bne.n	800244a <DMA_CheckFifoParam+0x5a>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d856      	bhi.n	80024be <DMA_CheckFifoParam+0xce>
 8002410:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <DMA_CheckFifoParam+0x28>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	08002429 	.word	0x08002429
 800241c:	0800243b 	.word	0x0800243b
 8002420:	08002429 	.word	0x08002429
 8002424:	080024bf 	.word	0x080024bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d046      	beq.n	80024c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002438:	e043      	b.n	80024c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002442:	d140      	bne.n	80024c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002448:	e03d      	b.n	80024c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002452:	d121      	bne.n	8002498 <DMA_CheckFifoParam+0xa8>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d837      	bhi.n	80024ca <DMA_CheckFifoParam+0xda>
 800245a:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <DMA_CheckFifoParam+0x70>)
 800245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002460:	08002471 	.word	0x08002471
 8002464:	08002477 	.word	0x08002477
 8002468:	08002471 	.word	0x08002471
 800246c:	08002489 	.word	0x08002489
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      break;
 8002474:	e030      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d025      	beq.n	80024ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002486:	e022      	b.n	80024ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002490:	d11f      	bne.n	80024d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002496:	e01c      	b.n	80024d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d903      	bls.n	80024a6 <DMA_CheckFifoParam+0xb6>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d003      	beq.n	80024ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024a4:	e018      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
      break;
 80024aa:	e015      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00e      	beq.n	80024d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      break;
 80024bc:	e00b      	b.n	80024d6 <DMA_CheckFifoParam+0xe6>
      break;
 80024be:	bf00      	nop
 80024c0:	e00a      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;
 80024c2:	bf00      	nop
 80024c4:	e008      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;
 80024c6:	bf00      	nop
 80024c8:	e006      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e004      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ce:	bf00      	nop
 80024d0:	e002      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024d2:	bf00      	nop
 80024d4:	e000      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;
 80024d6:	bf00      	nop
    }
  } 
  
  return status; 
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024fa:	4b23      	ldr	r3, [pc, #140]	; (8002588 <HAL_FLASH_Program+0xa0>)
 80024fc:	7e1b      	ldrb	r3, [r3, #24]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_FLASH_Program+0x1e>
 8002502:	2302      	movs	r3, #2
 8002504:	e03b      	b.n	800257e <HAL_FLASH_Program+0x96>
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_FLASH_Program+0xa0>)
 8002508:	2201      	movs	r2, #1
 800250a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800250c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002510:	f000 f870 	bl	80025f4 <FLASH_WaitForLastOperation>
 8002514:	4603      	mov	r3, r0
 8002516:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002518:	7dfb      	ldrb	r3, [r7, #23]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d12b      	bne.n	8002576 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002524:	783b      	ldrb	r3, [r7, #0]
 8002526:	4619      	mov	r1, r3
 8002528:	68b8      	ldr	r0, [r7, #8]
 800252a:	f000 f91b 	bl	8002764 <FLASH_Program_Byte>
 800252e:	e016      	b.n	800255e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002536:	883b      	ldrh	r3, [r7, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	68b8      	ldr	r0, [r7, #8]
 800253c:	f000 f8ee 	bl	800271c <FLASH_Program_HalfWord>
 8002540:	e00d      	b.n	800255e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d105      	bne.n	8002554 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	68b8      	ldr	r0, [r7, #8]
 800254e:	f000 f8c3 	bl	80026d8 <FLASH_Program_Word>
 8002552:	e004      	b.n	800255e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002558:	68b8      	ldr	r0, [r7, #8]
 800255a:	f000 f88b 	bl	8002674 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800255e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002562:	f000 f847 	bl	80025f4 <FLASH_WaitForLastOperation>
 8002566:	4603      	mov	r3, r0
 8002568:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_FLASH_Program+0xa4>)
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	4a07      	ldr	r2, [pc, #28]	; (800258c <HAL_FLASH_Program+0xa4>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <HAL_FLASH_Program+0xa0>)
 8002578:	2200      	movs	r2, #0
 800257a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800257c:	7dfb      	ldrb	r3, [r7, #23]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20016eac 	.word	0x20016eac
 800258c:	40023c00 	.word	0x40023c00

08002590 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_FLASH_Unlock+0x38>)
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	da0b      	bge.n	80025ba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_FLASH_Unlock+0x38>)
 80025a4:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_FLASH_Unlock+0x3c>)
 80025a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <HAL_FLASH_Unlock+0x38>)
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_FLASH_Unlock+0x40>)
 80025ac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_FLASH_Unlock+0x38>)
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da01      	bge.n	80025ba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80025ba:	79fb      	ldrb	r3, [r7, #7]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40023c00 	.word	0x40023c00
 80025cc:	45670123 	.word	0x45670123
 80025d0:	cdef89ab 	.word	0xcdef89ab

080025d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_FLASH_Lock+0x1c>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_FLASH_Lock+0x1c>)
 80025de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025e2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40023c00 	.word	0x40023c00

080025f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <FLASH_WaitForLastOperation+0x78>)
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002606:	f7ff f9cb 	bl	80019a0 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800260c:	e010      	b.n	8002630 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d00c      	beq.n	8002630 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <FLASH_WaitForLastOperation+0x38>
 800261c:	f7ff f9c0 	bl	80019a0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	d201      	bcs.n	8002630 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e019      	b.n	8002664 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <FLASH_WaitForLastOperation+0x7c>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e8      	bne.n	800260e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <FLASH_WaitForLastOperation+0x7c>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <FLASH_WaitForLastOperation+0x7c>)
 800264a:	2201      	movs	r2, #1
 800264c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <FLASH_WaitForLastOperation+0x7c>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800265a:	f000 f8a5 	bl	80027a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
  
}  
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20016eac 	.word	0x20016eac
 8002670:	40023c00 	.word	0x40023c00

08002674 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <FLASH_Program_DoubleWord+0x60>)
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <FLASH_Program_DoubleWord+0x60>)
 8002686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <FLASH_Program_DoubleWord+0x60>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <FLASH_Program_DoubleWord+0x60>)
 8002692:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002696:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <FLASH_Program_DoubleWord+0x60>)
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <FLASH_Program_DoubleWord+0x60>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80026aa:	f3bf 8f6f 	isb	sy
}
 80026ae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80026b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	000a      	movs	r2, r1
 80026be:	2300      	movs	r3, #0
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	3104      	adds	r1, #4
 80026c4:	4613      	mov	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40023c00 	.word	0x40023c00

080026d8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <FLASH_Program_Word+0x40>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <FLASH_Program_Word+0x40>)
 80026e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <FLASH_Program_Word+0x40>)
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <FLASH_Program_Word+0x40>)
 80026f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <FLASH_Program_Word+0x40>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	4a06      	ldr	r2, [pc, #24]	; (8002718 <FLASH_Program_Word+0x40>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	601a      	str	r2, [r3, #0]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40023c00 	.word	0x40023c00

0800271c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002728:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <FLASH_Program_HalfWord+0x44>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <FLASH_Program_HalfWord+0x44>)
 800272e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002732:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <FLASH_Program_HalfWord+0x44>)
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	4a09      	ldr	r2, [pc, #36]	; (8002760 <FLASH_Program_HalfWord+0x44>)
 800273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <FLASH_Program_HalfWord+0x44>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	4a06      	ldr	r2, [pc, #24]	; (8002760 <FLASH_Program_HalfWord+0x44>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	801a      	strh	r2, [r3, #0]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00

08002764 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <FLASH_Program_Byte+0x40>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <FLASH_Program_Byte+0x40>)
 8002776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <FLASH_Program_Byte+0x40>)
 800277e:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <FLASH_Program_Byte+0x40>)
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <FLASH_Program_Byte+0x40>)
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	4a06      	ldr	r2, [pc, #24]	; (80027a4 <FLASH_Program_Byte+0x40>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	701a      	strb	r2, [r3, #0]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40023c00 	.word	0x40023c00

080027a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <FLASH_SetErrorCode+0xa4>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <FLASH_SetErrorCode+0xa8>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	f043 0310 	orr.w	r3, r3, #16
 80027c0:	4a23      	ldr	r2, [pc, #140]	; (8002850 <FLASH_SetErrorCode+0xa8>)
 80027c2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80027c4:	4b21      	ldr	r3, [pc, #132]	; (800284c <FLASH_SetErrorCode+0xa4>)
 80027c6:	2210      	movs	r2, #16
 80027c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <FLASH_SetErrorCode+0xa4>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d008      	beq.n	80027e8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <FLASH_SetErrorCode+0xa8>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f043 0308 	orr.w	r3, r3, #8
 80027de:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <FLASH_SetErrorCode+0xa8>)
 80027e0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <FLASH_SetErrorCode+0xa4>)
 80027e4:	2220      	movs	r2, #32
 80027e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80027e8:	4b18      	ldr	r3, [pc, #96]	; (800284c <FLASH_SetErrorCode+0xa4>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <FLASH_SetErrorCode+0xa8>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	4a14      	ldr	r2, [pc, #80]	; (8002850 <FLASH_SetErrorCode+0xa8>)
 80027fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <FLASH_SetErrorCode+0xa4>)
 8002802:	2240      	movs	r2, #64	; 0x40
 8002804:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <FLASH_SetErrorCode+0xa4>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <FLASH_SetErrorCode+0xa8>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <FLASH_SetErrorCode+0xa8>)
 800281c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <FLASH_SetErrorCode+0xa4>)
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <FLASH_SetErrorCode+0xa4>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <FLASH_SetErrorCode+0xa8>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f043 0320 	orr.w	r3, r3, #32
 8002838:	4a05      	ldr	r2, [pc, #20]	; (8002850 <FLASH_SetErrorCode+0xa8>)
 800283a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <FLASH_SetErrorCode+0xa4>)
 800283e:	2202      	movs	r2, #2
 8002840:	60da      	str	r2, [r3, #12]
  }
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	40023c00 	.word	0x40023c00
 8002850:	20016eac 	.word	0x20016eac

08002854 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <HAL_FLASHEx_Erase+0xd8>)
 8002868:	7e1b      	ldrb	r3, [r3, #24]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_FLASHEx_Erase+0x1e>
 800286e:	2302      	movs	r3, #2
 8002870:	e058      	b.n	8002924 <HAL_FLASHEx_Erase+0xd0>
 8002872:	4b2e      	ldr	r3, [pc, #184]	; (800292c <HAL_FLASHEx_Erase+0xd8>)
 8002874:	2201      	movs	r2, #1
 8002876:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002878:	f24c 3050 	movw	r0, #50000	; 0xc350
 800287c:	f7ff feba 	bl	80025f4 <FLASH_WaitForLastOperation>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d148      	bne.n	800291c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d115      	bne.n	80028c6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 f844 	bl	8002934 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028b0:	f7ff fea0 	bl	80025f4 <FLASH_WaitForLastOperation>
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_FLASHEx_Erase+0xdc>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_FLASHEx_Erase+0xdc>)
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	6113      	str	r3, [r2, #16]
 80028c4:	e028      	b.n	8002918 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	e01c      	b.n	8002908 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	4619      	mov	r1, r3
 80028d6:	68b8      	ldr	r0, [r7, #8]
 80028d8:	f000 f850 	bl	800297c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028e0:	f7ff fe88 	bl	80025f4 <FLASH_WaitForLastOperation>
 80028e4:	4603      	mov	r3, r0
 80028e6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_FLASHEx_Erase+0xdc>)
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_FLASHEx_Erase+0xdc>)
 80028ee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80028f2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	601a      	str	r2, [r3, #0]
          break;
 8002900:	e00a      	b.n	8002918 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3301      	adds	r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4413      	add	r3, r2
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	429a      	cmp	r2, r3
 8002916:	d3da      	bcc.n	80028ce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002918:	f000 f878 	bl	8002a0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_FLASHEx_Erase+0xd8>)
 800291e:	2200      	movs	r2, #0
 8002920:	761a      	strb	r2, [r3, #24]

  return status;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20016eac 	.word	0x20016eac
 8002930:	40023c00 	.word	0x40023c00

08002934 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <FLASH_MassErase+0x44>)
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <FLASH_MassErase+0x44>)
 8002946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <FLASH_MassErase+0x44>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	4a09      	ldr	r2, [pc, #36]	; (8002978 <FLASH_MassErase+0x44>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002958:	4b07      	ldr	r3, [pc, #28]	; (8002978 <FLASH_MassErase+0x44>)
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	4313      	orrs	r3, r2
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <FLASH_MassErase+0x44>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6113      	str	r3, [r2, #16]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023c00 	.word	0x40023c00

0800297c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e010      	b.n	80029ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d103      	bne.n	80029a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800299e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e009      	b.n	80029ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d103      	bne.n	80029b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80029ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	e002      	b.n	80029ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80029b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <FLASH_Erase_Sector+0x8c>)
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <FLASH_Erase_Sector+0x8c>)
 80029c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <FLASH_Erase_Sector+0x8c>)
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	490f      	ldr	r1, [pc, #60]	; (8002a08 <FLASH_Erase_Sector+0x8c>)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <FLASH_Erase_Sector+0x8c>)
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <FLASH_Erase_Sector+0x8c>)
 80029d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <FLASH_Erase_Sector+0x8c>)
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4313      	orrs	r3, r2
 80029e8:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <FLASH_Erase_Sector+0x8c>)
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <FLASH_Erase_Sector+0x8c>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <FLASH_Erase_Sector+0x8c>)
 80029f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fa:	6113      	str	r3, [r2, #16]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	40023c00 	.word	0x40023c00

08002a0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d017      	beq.n	8002a4c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a26:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002a28:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a3e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a40:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d017      	beq.n	8002a88 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002a58:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0d      	ldr	r2, [pc, #52]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a62:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a7a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <FLASH_FlushCaches+0x88>)
 8002a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a86:	6013      	str	r3, [r2, #0]
  }
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e16b      	b.n	8002d8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	f040 815a 	bne.w	8002d86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d005      	beq.n	8002aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d130      	bne.n	8002b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b20:	2201      	movs	r2, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 0201 	and.w	r2, r3, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d017      	beq.n	8002b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d123      	bne.n	8002bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	220f      	movs	r2, #15
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80b4 	beq.w	8002d86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b60      	ldr	r3, [pc, #384]	; (8002da4 <HAL_GPIO_Init+0x30c>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4a5f      	ldr	r2, [pc, #380]	; (8002da4 <HAL_GPIO_Init+0x30c>)
 8002c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_GPIO_Init+0x30c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c3a:	4a5b      	ldr	r2, [pc, #364]	; (8002da8 <HAL_GPIO_Init+0x310>)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a52      	ldr	r2, [pc, #328]	; (8002dac <HAL_GPIO_Init+0x314>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02b      	beq.n	8002cbe <HAL_GPIO_Init+0x226>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a51      	ldr	r2, [pc, #324]	; (8002db0 <HAL_GPIO_Init+0x318>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d025      	beq.n	8002cba <HAL_GPIO_Init+0x222>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a50      	ldr	r2, [pc, #320]	; (8002db4 <HAL_GPIO_Init+0x31c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01f      	beq.n	8002cb6 <HAL_GPIO_Init+0x21e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4f      	ldr	r2, [pc, #316]	; (8002db8 <HAL_GPIO_Init+0x320>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d019      	beq.n	8002cb2 <HAL_GPIO_Init+0x21a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4e      	ldr	r2, [pc, #312]	; (8002dbc <HAL_GPIO_Init+0x324>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_GPIO_Init+0x216>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4d      	ldr	r2, [pc, #308]	; (8002dc0 <HAL_GPIO_Init+0x328>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00d      	beq.n	8002caa <HAL_GPIO_Init+0x212>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4c      	ldr	r2, [pc, #304]	; (8002dc4 <HAL_GPIO_Init+0x32c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <HAL_GPIO_Init+0x20e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4b      	ldr	r2, [pc, #300]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_GPIO_Init+0x20a>
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	e00e      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	e00c      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	e00a      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002caa:	2305      	movs	r3, #5
 8002cac:	e008      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e004      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f002 0203 	and.w	r2, r2, #3
 8002cc6:	0092      	lsls	r2, r2, #2
 8002cc8:	4093      	lsls	r3, r2
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd0:	4935      	ldr	r1, [pc, #212]	; (8002da8 <HAL_GPIO_Init+0x310>)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HAL_GPIO_Init+0x334>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d02:	4a32      	ldr	r2, [pc, #200]	; (8002dcc <HAL_GPIO_Init+0x334>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d08:	4b30      	ldr	r3, [pc, #192]	; (8002dcc <HAL_GPIO_Init+0x334>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d2c:	4a27      	ldr	r2, [pc, #156]	; (8002dcc <HAL_GPIO_Init+0x334>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d32:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HAL_GPIO_Init+0x334>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d56:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <HAL_GPIO_Init+0x334>)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_GPIO_Init+0x334>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d80:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <HAL_GPIO_Init+0x334>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b0f      	cmp	r3, #15
 8002d90:	f67f ae90 	bls.w	8002ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3724      	adds	r7, #36	; 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40013800 	.word	0x40013800
 8002dac:	40020000 	.word	0x40020000
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40020800 	.word	0x40020800
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40021400 	.word	0x40021400
 8002dc4:	40021800 	.word	0x40021800
 8002dc8:	40021c00 	.word	0x40021c00
 8002dcc:	40013c00 	.word	0x40013c00

08002dd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e0cd      	b.n	8002f88 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dec:	2201      	movs	r2, #1
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	f040 80bd 	bne.w	8002f82 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e08:	4a65      	ldr	r2, [pc, #404]	; (8002fa0 <HAL_GPIO_DeInit+0x1d0>)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	089b      	lsrs	r3, r3, #2
 8002e0e:	3302      	adds	r3, #2
 8002e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e14:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	220f      	movs	r2, #15
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	4013      	ands	r3, r2
 8002e28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a5d      	ldr	r2, [pc, #372]	; (8002fa4 <HAL_GPIO_DeInit+0x1d4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d02b      	beq.n	8002e8a <HAL_GPIO_DeInit+0xba>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a5c      	ldr	r2, [pc, #368]	; (8002fa8 <HAL_GPIO_DeInit+0x1d8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d025      	beq.n	8002e86 <HAL_GPIO_DeInit+0xb6>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a5b      	ldr	r2, [pc, #364]	; (8002fac <HAL_GPIO_DeInit+0x1dc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01f      	beq.n	8002e82 <HAL_GPIO_DeInit+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a5a      	ldr	r2, [pc, #360]	; (8002fb0 <HAL_GPIO_DeInit+0x1e0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_DeInit+0xae>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a59      	ldr	r2, [pc, #356]	; (8002fb4 <HAL_GPIO_DeInit+0x1e4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_DeInit+0xaa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a58      	ldr	r2, [pc, #352]	; (8002fb8 <HAL_GPIO_DeInit+0x1e8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00d      	beq.n	8002e76 <HAL_GPIO_DeInit+0xa6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a57      	ldr	r2, [pc, #348]	; (8002fbc <HAL_GPIO_DeInit+0x1ec>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_GPIO_DeInit+0xa2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a56      	ldr	r2, [pc, #344]	; (8002fc0 <HAL_GPIO_DeInit+0x1f0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_GPIO_DeInit+0x9e>
 8002e6a:	2307      	movs	r3, #7
 8002e6c:	e00e      	b.n	8002e8c <HAL_GPIO_DeInit+0xbc>
 8002e6e:	2308      	movs	r3, #8
 8002e70:	e00c      	b.n	8002e8c <HAL_GPIO_DeInit+0xbc>
 8002e72:	2306      	movs	r3, #6
 8002e74:	e00a      	b.n	8002e8c <HAL_GPIO_DeInit+0xbc>
 8002e76:	2305      	movs	r3, #5
 8002e78:	e008      	b.n	8002e8c <HAL_GPIO_DeInit+0xbc>
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	e006      	b.n	8002e8c <HAL_GPIO_DeInit+0xbc>
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e004      	b.n	8002e8c <HAL_GPIO_DeInit+0xbc>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e002      	b.n	8002e8c <HAL_GPIO_DeInit+0xbc>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_GPIO_DeInit+0xbc>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	f002 0203 	and.w	r2, r2, #3
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	4093      	lsls	r3, r2
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d132      	bne.n	8002f02 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e9c:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <HAL_GPIO_DeInit+0x1f4>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	4947      	ldr	r1, [pc, #284]	; (8002fc4 <HAL_GPIO_DeInit+0x1f4>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002eaa:	4b46      	ldr	r3, [pc, #280]	; (8002fc4 <HAL_GPIO_DeInit+0x1f4>)
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	4944      	ldr	r1, [pc, #272]	; (8002fc4 <HAL_GPIO_DeInit+0x1f4>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002eb8:	4b42      	ldr	r3, [pc, #264]	; (8002fc4 <HAL_GPIO_DeInit+0x1f4>)
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	4940      	ldr	r1, [pc, #256]	; (8002fc4 <HAL_GPIO_DeInit+0x1f4>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002ec6:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_GPIO_DeInit+0x1f4>)
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	493d      	ldr	r1, [pc, #244]	; (8002fc4 <HAL_GPIO_DeInit+0x1f4>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	220f      	movs	r2, #15
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ee4:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <HAL_GPIO_DeInit+0x1d0>)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3302      	adds	r3, #2
 8002eec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	482a      	ldr	r0, [pc, #168]	; (8002fa0 <HAL_GPIO_DeInit+0x1d0>)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	400a      	ands	r2, r1
 8002efc:	3302      	adds	r3, #2
 8002efe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2103      	movs	r1, #3
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	401a      	ands	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	08da      	lsrs	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3208      	adds	r2, #8
 8002f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	08d2      	lsrs	r2, r2, #3
 8002f38:	4019      	ands	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3208      	adds	r2, #8
 8002f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2103      	movs	r1, #3
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	401a      	ands	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	2103      	movs	r1, #3
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3301      	adds	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	f67f af2e 	bls.w	8002dec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40013800 	.word	0x40013800
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	40020400 	.word	0x40020400
 8002fac:	40020800 	.word	0x40020800
 8002fb0:	40020c00 	.word	0x40020c00
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40021400 	.word	0x40021400
 8002fbc:	40021800 	.word	0x40021800
 8002fc0:	40021c00 	.word	0x40021c00
 8002fc4:	40013c00 	.word	0x40013c00

08002fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd8:	787b      	ldrb	r3, [r7, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe4:	e003      	b.n	8002fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fe6:	887b      	ldrh	r3, [r7, #2]
 8002fe8:	041a      	lsls	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	619a      	str	r2, [r3, #24]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e034      	b.n	8003076 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003014:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f245 5255 	movw	r2, #21845	; 0x5555
 800301e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6852      	ldr	r2, [r2, #4]
 8003028:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6892      	ldr	r2, [r2, #8]
 8003032:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003034:	f7fe fcb4 	bl	80019a0 <HAL_GetTick>
 8003038:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800303a:	e00f      	b.n	800305c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800303c:	f7fe fcb0 	bl	80019a0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b31      	cmp	r3, #49	; 0x31
 8003048:	d908      	bls.n	800305c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e00c      	b.n	8003076 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e8      	bne.n	800303c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003072:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800308e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e264      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d075      	beq.n	80031aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030be:	4ba3      	ldr	r3, [pc, #652]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d00c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ca:	4ba0      	ldr	r3, [pc, #640]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d112      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d6:	4b9d      	ldr	r3, [pc, #628]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e2:	d10b      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	4b99      	ldr	r3, [pc, #612]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d05b      	beq.n	80031a8 <HAL_RCC_OscConfig+0x108>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d157      	bne.n	80031a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e23f      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d106      	bne.n	8003114 <HAL_RCC_OscConfig+0x74>
 8003106:	4b91      	ldr	r3, [pc, #580]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a90      	ldr	r2, [pc, #576]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e01d      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x98>
 800311e:	4b8b      	ldr	r3, [pc, #556]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a8a      	ldr	r2, [pc, #552]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b88      	ldr	r3, [pc, #544]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a87      	ldr	r2, [pc, #540]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003138:	4b84      	ldr	r3, [pc, #528]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a83      	ldr	r2, [pc, #524]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b81      	ldr	r3, [pc, #516]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a80      	ldr	r2, [pc, #512]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe fc22 	bl	80019a0 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe fc1e 	bl	80019a0 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e204      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b76      	ldr	r3, [pc, #472]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0xc0>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe fc0e 	bl	80019a0 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003188:	f7fe fc0a 	bl	80019a0 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1f0      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	4b6c      	ldr	r3, [pc, #432]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0xe8>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d063      	beq.n	800327e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b6:	4b65      	ldr	r3, [pc, #404]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c2:	4b62      	ldr	r3, [pc, #392]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d11c      	bne.n	8003208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ce:	4b5f      	ldr	r3, [pc, #380]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	4b5c      	ldr	r3, [pc, #368]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x152>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1c4      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4b56      	ldr	r3, [pc, #344]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4952      	ldr	r1, [pc, #328]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	e03a      	b.n	800327e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003210:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <HAL_RCC_OscConfig+0x2b0>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fe fbc3 	bl	80019a0 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321e:	f7fe fbbf 	bl	80019a0 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e1a5      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	4b46      	ldr	r3, [pc, #280]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b43      	ldr	r3, [pc, #268]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4940      	ldr	r1, [pc, #256]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
 8003250:	e015      	b.n	800327e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003252:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <HAL_RCC_OscConfig+0x2b0>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe fba2 	bl	80019a0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003260:	f7fe fb9e 	bl	80019a0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e184      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d030      	beq.n	80032ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_RCC_OscConfig+0x2b4>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7fe fb82 	bl	80019a0 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a0:	f7fe fb7e 	bl	80019a0 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e164      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	4b26      	ldr	r3, [pc, #152]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x200>
 80032be:	e015      	b.n	80032ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCC_OscConfig+0x2b4>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7fe fb6b 	bl	80019a0 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ce:	f7fe fb67 	bl	80019a0 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e14d      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f0      	bne.n	80032ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a0 	beq.w	800343a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10f      	bne.n	800332a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a0e      	ldr	r2, [pc, #56]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_OscConfig+0x2b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d121      	bne.n	800337a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCC_OscConfig+0x2b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a07      	ldr	r2, [pc, #28]	; (8003358 <HAL_RCC_OscConfig+0x2b8>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fe fb2d 	bl	80019a0 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	e011      	b.n	800336e <HAL_RCC_OscConfig+0x2ce>
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	42470000 	.word	0x42470000
 8003354:	42470e80 	.word	0x42470e80
 8003358:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335c:	f7fe fb20 	bl	80019a0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e106      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4b85      	ldr	r3, [pc, #532]	; (8003584 <HAL_RCC_OscConfig+0x4e4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d106      	bne.n	8003390 <HAL_RCC_OscConfig+0x2f0>
 8003382:	4b81      	ldr	r3, [pc, #516]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a80      	ldr	r2, [pc, #512]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
 800338e:	e01c      	b.n	80033ca <HAL_RCC_OscConfig+0x32a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b05      	cmp	r3, #5
 8003396:	d10c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x312>
 8003398:	4b7b      	ldr	r3, [pc, #492]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4a7a      	ldr	r2, [pc, #488]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	6713      	str	r3, [r2, #112]	; 0x70
 80033a4:	4b78      	ldr	r3, [pc, #480]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a77      	ldr	r2, [pc, #476]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
 80033b0:	e00b      	b.n	80033ca <HAL_RCC_OscConfig+0x32a>
 80033b2:	4b75      	ldr	r3, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a74      	ldr	r2, [pc, #464]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	4b72      	ldr	r3, [pc, #456]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	4a71      	ldr	r2, [pc, #452]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 80033c4:	f023 0304 	bic.w	r3, r3, #4
 80033c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d015      	beq.n	80033fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d2:	f7fe fae5 	bl	80019a0 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe fae1 	bl	80019a0 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e0c5      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	4b65      	ldr	r3, [pc, #404]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ee      	beq.n	80033da <HAL_RCC_OscConfig+0x33a>
 80033fc:	e014      	b.n	8003428 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fe:	f7fe facf 	bl	80019a0 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fe facb 	bl	80019a0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0af      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ee      	bne.n	8003406 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342e:	4b56      	ldr	r3, [pc, #344]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a55      	ldr	r2, [pc, #340]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 8003434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 809b 	beq.w	800357a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003444:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d05c      	beq.n	800350a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d141      	bne.n	80034dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003458:	4b4c      	ldr	r3, [pc, #304]	; (800358c <HAL_RCC_OscConfig+0x4ec>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fe fa9f 	bl	80019a0 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe fa9b 	bl	80019a0 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e081      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003478:	4b43      	ldr	r3, [pc, #268]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	019b      	lsls	r3, r3, #6
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	3b01      	subs	r3, #1
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	061b      	lsls	r3, r3, #24
 80034a8:	4937      	ldr	r1, [pc, #220]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <HAL_RCC_OscConfig+0x4ec>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fa74 	bl	80019a0 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fe fa70 	bl	80019a0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e056      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ce:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x41c>
 80034da:	e04e      	b.n	800357a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_RCC_OscConfig+0x4ec>)
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fe fa5d 	bl	80019a0 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fe fa59 	bl	80019a0 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e03f      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fc:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x44a>
 8003508:	e037      	b.n	800357a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e032      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003516:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <HAL_RCC_OscConfig+0x4e8>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d028      	beq.n	8003576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d121      	bne.n	8003576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d11a      	bne.n	8003576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003546:	4013      	ands	r3, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800354c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354e:	4293      	cmp	r3, r2
 8003550:	d111      	bne.n	8003576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	3b01      	subs	r3, #1
 8003560:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d107      	bne.n	8003576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d001      	beq.n	800357a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40007000 	.word	0x40007000
 8003588:	40023800 	.word	0x40023800
 800358c:	42470060 	.word	0x42470060

08003590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0cc      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a4:	4b68      	ldr	r3, [pc, #416]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d90c      	bls.n	80035cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b65      	ldr	r3, [pc, #404]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b8      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e4:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a58      	ldr	r2, [pc, #352]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035fc:	4b53      	ldr	r3, [pc, #332]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a52      	ldr	r2, [pc, #328]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	494d      	ldr	r1, [pc, #308]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d044      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d119      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e07f      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d003      	beq.n	800364e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364a:	2b03      	cmp	r3, #3
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	4b3f      	ldr	r3, [pc, #252]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e06f      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365e:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e067      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366e:	4b37      	ldr	r3, [pc, #220]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f023 0203 	bic.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4934      	ldr	r1, [pc, #208]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	4313      	orrs	r3, r2
 800367e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003680:	f7fe f98e 	bl	80019a0 <HAL_GetTick>
 8003684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	e00a      	b.n	800369e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003688:	f7fe f98a 	bl	80019a0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e04f      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 020c 	and.w	r2, r3, #12
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d1eb      	bne.n	8003688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d20c      	bcs.n	80036d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b22      	ldr	r3, [pc, #136]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e032      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4916      	ldr	r1, [pc, #88]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003702:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	490e      	ldr	r1, [pc, #56]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003716:	f000 f821 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800371a:	4602      	mov	r2, r0
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	490a      	ldr	r1, [pc, #40]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	5ccb      	ldrb	r3, [r1, r3]
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	4a09      	ldr	r2, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd ffa6 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023c00 	.word	0x40023c00
 800374c:	40023800 	.word	0x40023800
 8003750:	0800faa0 	.word	0x0800faa0
 8003754:	20000008 	.word	0x20000008
 8003758:	2000000c 	.word	0x2000000c

0800375c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	b5b0      	push	{r4, r5, r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003762:	2100      	movs	r1, #0
 8003764:	6079      	str	r1, [r7, #4]
 8003766:	2100      	movs	r1, #0
 8003768:	60f9      	str	r1, [r7, #12]
 800376a:	2100      	movs	r1, #0
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800376e:	2100      	movs	r1, #0
 8003770:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003772:	4952      	ldr	r1, [pc, #328]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 8003774:	6889      	ldr	r1, [r1, #8]
 8003776:	f001 010c 	and.w	r1, r1, #12
 800377a:	2908      	cmp	r1, #8
 800377c:	d00d      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0x3e>
 800377e:	2908      	cmp	r1, #8
 8003780:	f200 8094 	bhi.w	80038ac <HAL_RCC_GetSysClockFreq+0x150>
 8003784:	2900      	cmp	r1, #0
 8003786:	d002      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x32>
 8003788:	2904      	cmp	r1, #4
 800378a:	d003      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x38>
 800378c:	e08e      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800378e:	4b4c      	ldr	r3, [pc, #304]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003790:	60bb      	str	r3, [r7, #8]
       break;
 8003792:	e08e      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003794:	4b4b      	ldr	r3, [pc, #300]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003796:	60bb      	str	r3, [r7, #8]
      break;
 8003798:	e08b      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800379a:	4948      	ldr	r1, [pc, #288]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 800379c:	6849      	ldr	r1, [r1, #4]
 800379e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80037a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a4:	4945      	ldr	r1, [pc, #276]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 80037a6:	6849      	ldr	r1, [r1, #4]
 80037a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80037ac:	2900      	cmp	r1, #0
 80037ae:	d024      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b0:	4942      	ldr	r1, [pc, #264]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 80037b2:	6849      	ldr	r1, [r1, #4]
 80037b4:	0989      	lsrs	r1, r1, #6
 80037b6:	4608      	mov	r0, r1
 80037b8:	f04f 0100 	mov.w	r1, #0
 80037bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80037c0:	f04f 0500 	mov.w	r5, #0
 80037c4:	ea00 0204 	and.w	r2, r0, r4
 80037c8:	ea01 0305 	and.w	r3, r1, r5
 80037cc:	493d      	ldr	r1, [pc, #244]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80037ce:	fb01 f003 	mul.w	r0, r1, r3
 80037d2:	2100      	movs	r1, #0
 80037d4:	fb01 f102 	mul.w	r1, r1, r2
 80037d8:	1844      	adds	r4, r0, r1
 80037da:	493a      	ldr	r1, [pc, #232]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80037dc:	fba2 0101 	umull	r0, r1, r2, r1
 80037e0:	1863      	adds	r3, r4, r1
 80037e2:	4619      	mov	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	f7fc fd48 	bl	8000280 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4613      	mov	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e04a      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fa:	4b30      	ldr	r3, [pc, #192]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	461a      	mov	r2, r3
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	f240 10ff 	movw	r0, #511	; 0x1ff
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	ea02 0400 	and.w	r4, r2, r0
 8003812:	ea03 0501 	and.w	r5, r3, r1
 8003816:	4620      	mov	r0, r4
 8003818:	4629      	mov	r1, r5
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	014b      	lsls	r3, r1, #5
 8003824:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003828:	0142      	lsls	r2, r0, #5
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	1b00      	subs	r0, r0, r4
 8003830:	eb61 0105 	sbc.w	r1, r1, r5
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	018b      	lsls	r3, r1, #6
 800383e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003842:	0182      	lsls	r2, r0, #6
 8003844:	1a12      	subs	r2, r2, r0
 8003846:	eb63 0301 	sbc.w	r3, r3, r1
 800384a:	f04f 0000 	mov.w	r0, #0
 800384e:	f04f 0100 	mov.w	r1, #0
 8003852:	00d9      	lsls	r1, r3, #3
 8003854:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003858:	00d0      	lsls	r0, r2, #3
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	1912      	adds	r2, r2, r4
 8003860:	eb45 0303 	adc.w	r3, r5, r3
 8003864:	f04f 0000 	mov.w	r0, #0
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	0299      	lsls	r1, r3, #10
 800386e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003872:	0290      	lsls	r0, r2, #10
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	461a      	mov	r2, r3
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	f7fc fcfc 	bl	8000280 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4613      	mov	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	3301      	adds	r3, #1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	60bb      	str	r3, [r7, #8]
      break;
 80038aa:	e002      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80038ae:	60bb      	str	r3, [r7, #8]
      break;
 80038b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b2:	68bb      	ldr	r3, [r7, #8]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bdb0      	pop	{r4, r5, r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	00f42400 	.word	0x00f42400
 80038c4:	017d7840 	.word	0x017d7840

080038c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000008 	.word	0x20000008

080038e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038e4:	f7ff fff0 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4903      	ldr	r1, [pc, #12]	; (8003904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800
 8003904:	0800fab0 	.word	0x0800fab0

08003908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800390c:	f7ff ffdc 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	0b5b      	lsrs	r3, r3, #13
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4903      	ldr	r1, [pc, #12]	; (800392c <HAL_RCC_GetPCLK2Freq+0x24>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	0800fab0 	.word	0x0800fab0

08003930 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	220f      	movs	r2, #15
 800393e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <HAL_RCC_GetClockConfig+0x5c>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0203 	and.w	r2, r3, #3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <HAL_RCC_GetClockConfig+0x5c>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_RCC_GetClockConfig+0x5c>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_GetClockConfig+0x5c>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	08db      	lsrs	r3, r3, #3
 800396a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <HAL_RCC_GetClockConfig+0x60>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0207 	and.w	r2, r3, #7
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	601a      	str	r2, [r3, #0]
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	40023c00 	.word	0x40023c00

08003994 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d105      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d035      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039bc:	4b62      	ldr	r3, [pc, #392]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039c2:	f7fd ffed 	bl	80019a0 <HAL_GetTick>
 80039c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039ca:	f7fd ffe9 	bl	80019a0 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0b0      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039dc:	4b5b      	ldr	r3, [pc, #364]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	019a      	lsls	r2, r3, #6
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	071b      	lsls	r3, r3, #28
 80039f4:	4955      	ldr	r1, [pc, #340]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039fc:	4b52      	ldr	r3, [pc, #328]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a02:	f7fd ffcd 	bl	80019a0 <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a0a:	f7fd ffc9 	bl	80019a0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e090      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a1c:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8083 	beq.w	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	4b44      	ldr	r3, [pc, #272]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a43      	ldr	r2, [pc, #268]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6413      	str	r3, [r2, #64]	; 0x40
 8003a46:	4b41      	ldr	r3, [pc, #260]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a52:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a3e      	ldr	r2, [pc, #248]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a5e:	f7fd ff9f 	bl	80019a0 <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a66:	f7fd ff9b 	bl	80019a0 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e062      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a78:	4b35      	ldr	r3, [pc, #212]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a84:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02f      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d028      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aa2:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aaa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aac:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab2:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ab8:	4a24      	ldr	r2, [pc, #144]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003abe:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d114      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003aca:	f7fd ff69 	bl	80019a0 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fd ff65 	bl	80019a0 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e02a      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae8:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ee      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b00:	d10d      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b16:	490d      	ldr	r1, [pc, #52]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	608b      	str	r3, [r1, #8]
 8003b1c:	e005      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b24:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b28:	6093      	str	r3, [r2, #8]
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b36:	4905      	ldr	r1, [pc, #20]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	42470068 	.word	0x42470068
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40007000 	.word	0x40007000
 8003b54:	42470e40 	.word	0x42470e40

08003b58 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b5e:	f7fd ff1f 	bl	80019a0 <HAL_GetTick>
 8003b62:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b64:	4b5d      	ldr	r3, [pc, #372]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a5c      	ldr	r2, [pc, #368]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b72:	f7fd ff15 	bl	80019a0 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e0a7      	b.n	8003cd4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b84:	4b55      	ldr	r3, [pc, #340]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003b90:	4b52      	ldr	r3, [pc, #328]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a51      	ldr	r2, [pc, #324]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b9c:	f7fd ff00 	bl	80019a0 <HAL_GetTick>
 8003ba0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003ba2:	4b4e      	ldr	r3, [pc, #312]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003baa:	f7fd fef9 	bl	80019a0 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e089      	b.n	8003cd4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003bc0:	4b46      	ldr	r3, [pc, #280]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ee      	bne.n	8003baa <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bcc:	f7fd fee8 	bl	80019a0 <HAL_GetTick>
 8003bd0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003bd2:	4b42      	ldr	r3, [pc, #264]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a41      	ldr	r2, [pc, #260]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003bd8:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fd fede 	bl	80019a0 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e070      	b.n	8003cd4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003bf2:	4b3a      	ldr	r3, [pc, #232]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bfe:	f7fd fecf 	bl	80019a0 <HAL_GetTick>
 8003c02:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003c04:	4b35      	ldr	r3, [pc, #212]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a34      	ldr	r2, [pc, #208]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c12:	f7fd fec5 	bl	80019a0 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e057      	b.n	8003cd4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003c24:	4b2d      	ldr	r3, [pc, #180]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003c30:	f7fd feb6 	bl	80019a0 <HAL_GetTick>
 8003c34:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003c36:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a28      	ldr	r2, [pc, #160]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c40:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c44:	f7fd feac 	bl	80019a0 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e03e      	b.n	8003cd4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003c56:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c64:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <HAL_RCC_DeInit+0x188>)
 8003c66:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003c68:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <HAL_RCC_DeInit+0x18c>)
 8003c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c76:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c7a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003c7c:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c86:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c8e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003c92:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a10      	ldr	r2, [pc, #64]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003c9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c9e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003ca0:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca4:	4a0d      	ldr	r2, [pc, #52]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb0:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <HAL_RCC_DeInit+0x184>)
 8003cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_DeInit+0x190>)
 8003cba:	4a0c      	ldr	r2, [pc, #48]	; (8003cec <HAL_RCC_DeInit+0x194>)
 8003cbc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCC_DeInit+0x198>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd fce0 	bl	8001688 <HAL_InitTick>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
  }
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	04003010 	.word	0x04003010
 8003ce4:	20003000 	.word	0x20003000
 8003ce8:	20000008 	.word	0x20000008
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	2000000c 	.word	0x2000000c

08003cf4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e066      	b.n	8003dd8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	7f5b      	ldrb	r3, [r3, #29]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd faf4 	bl	8001308 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	22ca      	movs	r2, #202	; 0xca
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2253      	movs	r2, #83	; 0x53
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f87a 	bl	8003e30 <RTC_EnterInitMode>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12c      	bne.n	8003da0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d58:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6899      	ldr	r1, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68d2      	ldr	r2, [r2, #12]
 8003d80:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6919      	ldr	r1, [r3, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	041a      	lsls	r2, r3, #16
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f881 	bl	8003e9e <RTC_ExitInitMode>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d113      	bne.n	8003dce <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	22ff      	movs	r2, #255	; 0xff
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dfc:	f7fd fdd0 	bl	80019a0 <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e02:	e009      	b.n	8003e18 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e04:	f7fd fdcc 	bl	80019a0 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e12:	d901      	bls.n	8003e18 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e007      	b.n	8003e28 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ee      	beq.n	8003e04 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d122      	bne.n	8003e94 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e5e:	f7fd fd9f 	bl	80019a0 <HAL_GetTick>
 8003e62:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e64:	e00c      	b.n	8003e80 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e66:	f7fd fd9b 	bl	80019a0 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e74:	d904      	bls.n	8003e80 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <RTC_EnterInitMode+0x64>
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d1e8      	bne.n	8003e66 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eb8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff ff89 	bl	8003de0 <HAL_RTC_WaitForSynchro>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e07b      	b.n	8003ff2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d108      	bne.n	8003f14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f0a:	d009      	beq.n	8003f20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	61da      	str	r2, [r3, #28]
 8003f12:	e005      	b.n	8003f20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd fa0e 	bl	800135c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	ea42 0103 	orr.w	r1, r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f003 0104 	and.w	r1, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	f003 0210 	and.w	r2, r3, #16
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e01a      	b.n	8004042 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004022:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fd fa19 	bl	800145c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b088      	sub	sp, #32
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_SPI_Transmit+0x22>
 8004068:	2302      	movs	r3, #2
 800406a:	e126      	b.n	80042ba <HAL_SPI_Transmit+0x270>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004074:	f7fd fc94 	bl	80019a0 <HAL_GetTick>
 8004078:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d002      	beq.n	8004090 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800408a:	2302      	movs	r3, #2
 800408c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800408e:	e10b      	b.n	80042a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_SPI_Transmit+0x52>
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040a0:	e102      	b.n	80042a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2203      	movs	r2, #3
 80040a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	88fa      	ldrh	r2, [r7, #6]
 80040ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e8:	d10f      	bne.n	800410a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004108:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d007      	beq.n	8004128 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004126:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004130:	d14b      	bne.n	80041ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_SPI_Transmit+0xf6>
 800413a:	8afb      	ldrh	r3, [r7, #22]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d13e      	bne.n	80041be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	881a      	ldrh	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	1c9a      	adds	r2, r3, #2
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004164:	e02b      	b.n	80041be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	d112      	bne.n	800419a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	881a      	ldrh	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	1c9a      	adds	r2, r3, #2
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	86da      	strh	r2, [r3, #54]	; 0x36
 8004198:	e011      	b.n	80041be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800419a:	f7fd fc01 	bl	80019a0 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d803      	bhi.n	80041b2 <HAL_SPI_Transmit+0x168>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d102      	bne.n	80041b8 <HAL_SPI_Transmit+0x16e>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041bc:	e074      	b.n	80042a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ce      	bne.n	8004166 <HAL_SPI_Transmit+0x11c>
 80041c8:	e04c      	b.n	8004264 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_SPI_Transmit+0x18e>
 80041d2:	8afb      	ldrh	r3, [r7, #22]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d140      	bne.n	800425a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	7812      	ldrb	r2, [r2, #0]
 80041e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041fe:	e02c      	b.n	800425a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d113      	bne.n	8004236 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	330c      	adds	r3, #12
 8004218:	7812      	ldrb	r2, [r2, #0]
 800421a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	86da      	strh	r2, [r3, #54]	; 0x36
 8004234:	e011      	b.n	800425a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004236:	f7fd fbb3 	bl	80019a0 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d803      	bhi.n	800424e <HAL_SPI_Transmit+0x204>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d102      	bne.n	8004254 <HAL_SPI_Transmit+0x20a>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004258:	e026      	b.n	80042a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1cd      	bne.n	8004200 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	6839      	ldr	r1, [r7, #0]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fbcb 	bl	8004a04 <SPI_EndRxTxTransaction>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e000      	b.n	80042a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80042a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b088      	sub	sp, #32
 80042c6:	af02      	add	r7, sp, #8
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042de:	d112      	bne.n	8004306 <HAL_SPI_Receive+0x44>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10e      	bne.n	8004306 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2204      	movs	r2, #4
 80042ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042f0:	88fa      	ldrh	r2, [r7, #6]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f8f1 	bl	80044e4 <HAL_SPI_TransmitReceive>
 8004302:	4603      	mov	r3, r0
 8004304:	e0ea      	b.n	80044dc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_SPI_Receive+0x52>
 8004310:	2302      	movs	r3, #2
 8004312:	e0e3      	b.n	80044dc <HAL_SPI_Receive+0x21a>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800431c:	f7fd fb40 	bl	80019a0 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b01      	cmp	r3, #1
 800432c:	d002      	beq.n	8004334 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800432e:	2302      	movs	r3, #2
 8004330:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004332:	e0ca      	b.n	80044ca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_SPI_Receive+0x7e>
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004344:	e0c1      	b.n	80044ca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2204      	movs	r2, #4
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	88fa      	ldrh	r2, [r7, #6]
 800435e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800438c:	d10f      	bne.n	80043ae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	d007      	beq.n	80043cc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d162      	bne.n	800449a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043d4:	e02e      	b.n	8004434 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d115      	bne.n	8004410 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f103 020c 	add.w	r2, r3, #12
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	7812      	ldrb	r2, [r2, #0]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800440e:	e011      	b.n	8004434 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004410:	f7fd fac6 	bl	80019a0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d803      	bhi.n	8004428 <HAL_SPI_Receive+0x166>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d102      	bne.n	800442e <HAL_SPI_Receive+0x16c>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004432:	e04a      	b.n	80044ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1cb      	bne.n	80043d6 <HAL_SPI_Receive+0x114>
 800443e:	e031      	b.n	80044a4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d113      	bne.n	8004476 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	b292      	uxth	r2, r2
 800445a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	1c9a      	adds	r2, r3, #2
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004474:	e011      	b.n	800449a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004476:	f7fd fa93 	bl	80019a0 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d803      	bhi.n	800448e <HAL_SPI_Receive+0x1cc>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d102      	bne.n	8004494 <HAL_SPI_Receive+0x1d2>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d102      	bne.n	800449a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004498:	e017      	b.n	80044ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1cd      	bne.n	8004440 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	6839      	ldr	r1, [r7, #0]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fa45 	bl	8004938 <SPI_EndRxTransaction>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
 80044c6:	e000      	b.n	80044ca <HAL_SPI_Receive+0x208>
  }

error :
 80044c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044da:	7dfb      	ldrb	r3, [r7, #23]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08c      	sub	sp, #48	; 0x30
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044f2:	2301      	movs	r3, #1
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_SPI_TransmitReceive+0x26>
 8004506:	2302      	movs	r3, #2
 8004508:	e18a      	b.n	8004820 <HAL_SPI_TransmitReceive+0x33c>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004512:	f7fd fa45 	bl	80019a0 <HAL_GetTick>
 8004516:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004528:	887b      	ldrh	r3, [r7, #2]
 800452a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800452c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004530:	2b01      	cmp	r3, #1
 8004532:	d00f      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x70>
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800453a:	d107      	bne.n	800454c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <HAL_SPI_TransmitReceive+0x68>
 8004544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004548:	2b04      	cmp	r3, #4
 800454a:	d003      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800454c:	2302      	movs	r3, #2
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004552:	e15b      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x82>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x82>
 8004560:	887b      	ldrh	r3, [r7, #2]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800456c:	e14e      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b04      	cmp	r3, #4
 8004578:	d003      	beq.n	8004582 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2205      	movs	r2, #5
 800457e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	887a      	ldrh	r2, [r7, #2]
 8004592:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	887a      	ldrh	r2, [r7, #2]
 80045a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	887a      	ldrh	r2, [r7, #2]
 80045aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b40      	cmp	r3, #64	; 0x40
 80045c4:	d007      	beq.n	80045d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045de:	d178      	bne.n	80046d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_SPI_TransmitReceive+0x10a>
 80045e8:	8b7b      	ldrh	r3, [r7, #26]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d166      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	881a      	ldrh	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	1c9a      	adds	r2, r3, #2
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004612:	e053      	b.n	80046bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d11b      	bne.n	800465a <HAL_SPI_TransmitReceive+0x176>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d016      	beq.n	800465a <HAL_SPI_TransmitReceive+0x176>
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	2b01      	cmp	r3, #1
 8004630:	d113      	bne.n	800465a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	881a      	ldrh	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	1c9a      	adds	r2, r3, #2
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b01      	cmp	r3, #1
 8004666:	d119      	bne.n	800469c <HAL_SPI_TransmitReceive+0x1b8>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d014      	beq.n	800469c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	b292      	uxth	r2, r2
 800467e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	1c9a      	adds	r2, r3, #2
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004698:	2301      	movs	r3, #1
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800469c:	f7fd f980 	bl	80019a0 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d807      	bhi.n	80046bc <HAL_SPI_TransmitReceive+0x1d8>
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d003      	beq.n	80046bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046ba:	e0a7      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1a6      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x130>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1a1      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x130>
 80046d0:	e07c      	b.n	80047cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x1fc>
 80046da:	8b7b      	ldrh	r3, [r7, #26]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d16b      	bne.n	80047b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	7812      	ldrb	r2, [r2, #0]
 80046ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004706:	e057      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d11c      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x26c>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d017      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x26c>
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	2b01      	cmp	r3, #1
 8004724:	d114      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d119      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x2ae>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d014      	beq.n	8004792 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800478e:	2301      	movs	r3, #1
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004792:	f7fd f905 	bl	80019a0 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800479e:	429a      	cmp	r2, r3
 80047a0:	d803      	bhi.n	80047aa <HAL_SPI_TransmitReceive+0x2c6>
 80047a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d102      	bne.n	80047b0 <HAL_SPI_TransmitReceive+0x2cc>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d103      	bne.n	80047b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047b6:	e029      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1a2      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x224>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d19d      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f917 	bl	8004a04 <SPI_EndRxTxTransaction>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d006      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047e8:	e010      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	e000      	b.n	800480c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800480a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800481c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004820:	4618      	mov	r0, r3
 8004822:	3730      	adds	r7, #48	; 0x30
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004838:	f7fd f8b2 	bl	80019a0 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	4413      	add	r3, r2
 8004846:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004848:	f7fd f8aa 	bl	80019a0 <HAL_GetTick>
 800484c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800484e:	4b39      	ldr	r3, [pc, #228]	; (8004934 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	015b      	lsls	r3, r3, #5
 8004854:	0d1b      	lsrs	r3, r3, #20
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	fb02 f303 	mul.w	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	e054      	b.n	800490a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d050      	beq.n	800490a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004868:	f7fd f89a 	bl	80019a0 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	429a      	cmp	r2, r3
 8004876:	d902      	bls.n	800487e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d13d      	bne.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800488c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004896:	d111      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a0:	d004      	beq.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048aa:	d107      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	d10f      	bne.n	80048e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e017      	b.n	800492a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	3b01      	subs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	429a      	cmp	r2, r3
 8004926:	d19b      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000008 	.word	0x20000008

08004938 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494c:	d111      	bne.n	8004972 <SPI_EndRxTransaction+0x3a>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004956:	d004      	beq.n	8004962 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004960:	d107      	bne.n	8004972 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004970:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800497a:	d12a      	bne.n	80049d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004984:	d012      	beq.n	80049ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2200      	movs	r2, #0
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f7ff ff49 	bl	8004828 <SPI_WaitFlagStateUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d02d      	beq.n	80049f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a0:	f043 0220 	orr.w	r2, r3, #32
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e026      	b.n	80049fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2200      	movs	r2, #0
 80049b4:	2101      	movs	r1, #1
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff ff36 	bl	8004828 <SPI_WaitFlagStateUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01a      	beq.n	80049f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	f043 0220 	orr.w	r2, r3, #32
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e013      	b.n	80049fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2200      	movs	r2, #0
 80049da:	2101      	movs	r1, #1
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f7ff ff23 	bl	8004828 <SPI_WaitFlagStateUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e000      	b.n	80049fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a10:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <SPI_EndRxTxTransaction+0x7c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1b      	ldr	r2, [pc, #108]	; (8004a84 <SPI_EndRxTxTransaction+0x80>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	0d5b      	lsrs	r3, r3, #21
 8004a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2e:	d112      	bne.n	8004a56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2200      	movs	r2, #0
 8004a38:	2180      	movs	r1, #128	; 0x80
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff fef4 	bl	8004828 <SPI_WaitFlagStateUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d016      	beq.n	8004a74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	f043 0220 	orr.w	r2, r3, #32
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e00f      	b.n	8004a76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6c:	2b80      	cmp	r3, #128	; 0x80
 8004a6e:	d0f2      	beq.n	8004a56 <SPI_EndRxTxTransaction+0x52>
 8004a70:	e000      	b.n	8004a74 <SPI_EndRxTxTransaction+0x70>
        break;
 8004a72:	bf00      	nop
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000008 	.word	0x20000008
 8004a84:	165e9f81 	.word	0x165e9f81

08004a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e041      	b.n	8004b1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f839 	bl	8004b26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f000 f9d8 	bl	8004e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d001      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e04e      	b.n	8004bf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a23      	ldr	r2, [pc, #140]	; (8004c00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d022      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7e:	d01d      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1f      	ldr	r2, [pc, #124]	; (8004c04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d018      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1c      	ldr	r2, [pc, #112]	; (8004c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00e      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d111      	bne.n	8004be0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b06      	cmp	r3, #6
 8004bcc:	d010      	beq.n	8004bf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0201 	orr.w	r2, r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bde:	e007      	b.n	8004bf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800
 8004c0c:	40000c00 	.word	0x40000c00
 8004c10:	40010400 	.word	0x40010400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40001800 	.word	0x40001800

08004c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0202 	mvn.w	r2, #2
 8004c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8ee 	bl	8004e40 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f8e0 	bl	8004e2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f8f1 	bl	8004e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0204 	mvn.w	r2, #4
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8c4 	bl	8004e40 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f8b6 	bl	8004e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f8c7 	bl	8004e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d122      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0208 	mvn.w	r2, #8
 8004cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f89a 	bl	8004e40 <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f88c 	bl	8004e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f89d 	bl	8004e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d122      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0210 	mvn.w	r2, #16
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2208      	movs	r2, #8
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f870 	bl	8004e40 <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f862 	bl	8004e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f873 	bl	8004e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d10e      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d107      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0201 	mvn.w	r2, #1
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fc fa72 	bl	8001284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b80      	cmp	r3, #128	; 0x80
 8004dac:	d10e      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b80      	cmp	r3, #128	; 0x80
 8004dba:	d107      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f902 	bl	8004fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d10e      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d107      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f838 	bl	8004e68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d10e      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d107      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0220 	mvn.w	r2, #32
 8004e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f8cc 	bl	8004fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a40      	ldr	r2, [pc, #256]	; (8004f90 <TIM_Base_SetConfig+0x114>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d013      	beq.n	8004ebc <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9a:	d00f      	beq.n	8004ebc <TIM_Base_SetConfig+0x40>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a3d      	ldr	r2, [pc, #244]	; (8004f94 <TIM_Base_SetConfig+0x118>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_Base_SetConfig+0x40>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a3c      	ldr	r2, [pc, #240]	; (8004f98 <TIM_Base_SetConfig+0x11c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_Base_SetConfig+0x40>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a3b      	ldr	r2, [pc, #236]	; (8004f9c <TIM_Base_SetConfig+0x120>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a3a      	ldr	r2, [pc, #232]	; (8004fa0 <TIM_Base_SetConfig+0x124>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d108      	bne.n	8004ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2f      	ldr	r2, [pc, #188]	; (8004f90 <TIM_Base_SetConfig+0x114>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d02b      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004edc:	d027      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a2c      	ldr	r2, [pc, #176]	; (8004f94 <TIM_Base_SetConfig+0x118>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d023      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2b      	ldr	r2, [pc, #172]	; (8004f98 <TIM_Base_SetConfig+0x11c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01f      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a2a      	ldr	r2, [pc, #168]	; (8004f9c <TIM_Base_SetConfig+0x120>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01b      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a29      	ldr	r2, [pc, #164]	; (8004fa0 <TIM_Base_SetConfig+0x124>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d017      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a28      	ldr	r2, [pc, #160]	; (8004fa4 <TIM_Base_SetConfig+0x128>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a27      	ldr	r2, [pc, #156]	; (8004fa8 <TIM_Base_SetConfig+0x12c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00f      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a26      	ldr	r2, [pc, #152]	; (8004fac <TIM_Base_SetConfig+0x130>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00b      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a25      	ldr	r2, [pc, #148]	; (8004fb0 <TIM_Base_SetConfig+0x134>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a24      	ldr	r2, [pc, #144]	; (8004fb4 <TIM_Base_SetConfig+0x138>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a23      	ldr	r2, [pc, #140]	; (8004fb8 <TIM_Base_SetConfig+0x13c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d108      	bne.n	8004f40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <TIM_Base_SetConfig+0x114>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_Base_SetConfig+0xf8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <TIM_Base_SetConfig+0x124>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d103      	bne.n	8004f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	615a      	str	r2, [r3, #20]
}
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40010400 	.word	0x40010400
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400
 8004fac:	40014800 	.word	0x40014800
 8004fb0:	40001800 	.word	0x40001800
 8004fb4:	40001c00 	.word	0x40001c00
 8004fb8:	40002000 	.word	0x40002000

08004fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e03f      	b.n	8005076 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fc fa5a 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2224      	movs	r2, #36	; 0x24
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 ff71 	bl	8005f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800503c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695a      	ldr	r2, [r3, #20]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800504c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800505c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e021      	b.n	80050d4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2224      	movs	r2, #36	; 0x24
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7fc fac1 	bl	8001630 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	; 0x30
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d165      	bne.n	80051c2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <HAL_UART_Transmit_DMA+0x26>
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e05e      	b.n	80051c4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_UART_Transmit_DMA+0x38>
 8005110:	2302      	movs	r3, #2
 8005112:	e057      	b.n	80051c4 <HAL_UART_Transmit_DMA+0xe8>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	88fa      	ldrh	r2, [r7, #6]
 8005126:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2221      	movs	r2, #33	; 0x21
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005140:	4a22      	ldr	r2, [pc, #136]	; (80051cc <HAL_UART_Transmit_DMA+0xf0>)
 8005142:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	4a21      	ldr	r2, [pc, #132]	; (80051d0 <HAL_UART_Transmit_DMA+0xf4>)
 800514a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005150:	4a20      	ldr	r2, [pc, #128]	; (80051d4 <HAL_UART_Transmit_DMA+0xf8>)
 8005152:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	2200      	movs	r2, #0
 800515a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800515c:	f107 0308 	add.w	r3, r7, #8
 8005160:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	6819      	ldr	r1, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3304      	adds	r3, #4
 8005170:	461a      	mov	r2, r3
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	f7fc fe64 	bl	8001e40 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005180:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3314      	adds	r3, #20
 8005190:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	617b      	str	r3, [r7, #20]
   return(result);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3314      	adds	r3, #20
 80051a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051aa:	627a      	str	r2, [r7, #36]	; 0x24
 80051ac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6a39      	ldr	r1, [r7, #32]
 80051b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e5      	bne.n	800518a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	e000      	b.n	80051c4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80051c2:	2302      	movs	r3, #2
  }
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3730      	adds	r7, #48	; 0x30
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	080057a9 	.word	0x080057a9
 80051d0:	08005843 	.word	0x08005843
 80051d4:	080059bb 	.word	0x080059bb

080051d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d11d      	bne.n	800522e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <HAL_UART_Receive_DMA+0x26>
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e016      	b.n	8005230 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_UART_Receive_DMA+0x38>
 800520c:	2302      	movs	r3, #2
 800520e:	e00f      	b.n	8005230 <HAL_UART_Receive_DMA+0x58>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	461a      	mov	r2, r3
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 fc13 	bl	8005a50 <UART_Start_Receive_DMA>
 800522a:	4603      	mov	r3, r0
 800522c:	e000      	b.n	8005230 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800522e:	2302      	movs	r3, #2
  }
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b0ba      	sub	sp, #232	; 0xe8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800525e:	2300      	movs	r3, #0
 8005260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005264:	2300      	movs	r3, #0
 8005266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800526a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10f      	bne.n	800529e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HAL_UART_IRQHandler+0x66>
 800528a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fd7f 	bl	8005d9a <UART_Receive_IT>
      return;
 800529c:	e256      	b.n	800574c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800529e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80de 	beq.w	8005464 <HAL_UART_IRQHandler+0x22c>
 80052a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80d1 	beq.w	8005464 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <HAL_UART_IRQHandler+0xae>
 80052ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f043 0201 	orr.w	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <HAL_UART_IRQHandler+0xd2>
 80052f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	f043 0202 	orr.w	r2, r3, #2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <HAL_UART_IRQHandler+0xf6>
 8005316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f043 0204 	orr.w	r2, r3, #4
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d011      	beq.n	800535e <HAL_UART_IRQHandler+0x126>
 800533a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d105      	bne.n	8005352 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f043 0208 	orr.w	r2, r3, #8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 81ed 	beq.w	8005742 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_UART_IRQHandler+0x14e>
 8005374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fd0a 	bl	8005d9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <HAL_UART_IRQHandler+0x17a>
 80053aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d04f      	beq.n	8005452 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fc12 	bl	8005bdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d141      	bne.n	800544a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3314      	adds	r3, #20
 80053cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3314      	adds	r3, #20
 80053ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800540a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1d9      	bne.n	80053c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	2b00      	cmp	r3, #0
 8005418:	d013      	beq.n	8005442 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	4a7d      	ldr	r2, [pc, #500]	; (8005614 <HAL_UART_IRQHandler+0x3dc>)
 8005420:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	4618      	mov	r0, r3
 8005428:	f7fc fdd2 	bl	8001fd0 <HAL_DMA_Abort_IT>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800543c:	4610      	mov	r0, r2
 800543e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005440:	e00e      	b.n	8005460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f99a 	bl	800577c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005448:	e00a      	b.n	8005460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f996 	bl	800577c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005450:	e006      	b.n	8005460 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f992 	bl	800577c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800545e:	e170      	b.n	8005742 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005460:	bf00      	nop
    return;
 8005462:	e16e      	b.n	8005742 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	2b01      	cmp	r3, #1
 800546a:	f040 814a 	bne.w	8005702 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 8143 	beq.w	8005702 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800547c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 813c 	beq.w	8005702 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800548a:	2300      	movs	r3, #0
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	f040 80b4 	bne.w	8005618 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8140 	beq.w	8005746 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ce:	429a      	cmp	r2, r3
 80054d0:	f080 8139 	bcs.w	8005746 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e6:	f000 8088 	beq.w	80055fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800551a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005522:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800552e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1d9      	bne.n	80054ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3314      	adds	r3, #20
 800553c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3314      	adds	r3, #20
 8005556:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800555a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800555e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005562:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800556c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e1      	bne.n	8005536 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3314      	adds	r3, #20
 8005592:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005596:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005598:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800559c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e3      	bne.n	8005572 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ca:	f023 0310 	bic.w	r3, r3, #16
 80055ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80055de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e3      	bne.n	80055b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fc fc7b 	bl	8001ef0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005602:	b29b      	uxth	r3, r3
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8c0 	bl	8005790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005610:	e099      	b.n	8005746 <HAL_UART_IRQHandler+0x50e>
 8005612:	bf00      	nop
 8005614:	08005ca3 	.word	0x08005ca3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005620:	b29b      	uxth	r3, r3
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 808b 	beq.w	800574a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8086 	beq.w	800574a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800564e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005662:	647a      	str	r2, [r7, #68]	; 0x44
 8005664:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e3      	bne.n	800563e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3314      	adds	r3, #20
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	623b      	str	r3, [r7, #32]
   return(result);
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800569a:	633a      	str	r2, [r7, #48]	; 0x30
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e3      	bne.n	8005676 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0310 	bic.w	r3, r3, #16
 80056d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056e0:	61fa      	str	r2, [r7, #28]
 80056e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	69b9      	ldr	r1, [r7, #24]
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	617b      	str	r3, [r7, #20]
   return(result);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e3      	bne.n	80056bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f848 	bl	8005790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005700:	e023      	b.n	800574a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <HAL_UART_IRQHandler+0x4ea>
 800570e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fad5 	bl	8005cca <UART_Transmit_IT>
    return;
 8005720:	e014      	b.n	800574c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00e      	beq.n	800574c <HAL_UART_IRQHandler+0x514>
 800572e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d008      	beq.n	800574c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fb15 	bl	8005d6a <UART_EndTransmit_IT>
    return;
 8005740:	e004      	b.n	800574c <HAL_UART_IRQHandler+0x514>
    return;
 8005742:	bf00      	nop
 8005744:	e002      	b.n	800574c <HAL_UART_IRQHandler+0x514>
      return;
 8005746:	bf00      	nop
 8005748:	e000      	b.n	800574c <HAL_UART_IRQHandler+0x514>
      return;
 800574a:	bf00      	nop
  }
}
 800574c:	37e8      	adds	r7, #232	; 0xe8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop

08005754 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b090      	sub	sp, #64	; 0x40
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d137      	bne.n	8005834 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	2200      	movs	r2, #0
 80057c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3314      	adds	r3, #20
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	623b      	str	r3, [r7, #32]
   return(result);
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057ea:	633a      	str	r2, [r7, #48]	; 0x30
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e5      	bne.n	80057ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	60fb      	str	r3, [r7, #12]
   return(result);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
 8005816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800581e:	61fa      	str	r2, [r7, #28]
 8005820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	69b9      	ldr	r1, [r7, #24]
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	617b      	str	r3, [r7, #20]
   return(result);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e5      	bne.n	80057fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005832:	e002      	b.n	800583a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005834:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005836:	f7fa fee9 	bl	800060c <HAL_UART_TxCpltCallback>
}
 800583a:	bf00      	nop
 800583c:	3740      	adds	r7, #64	; 0x40
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff ff7f 	bl	8005754 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b09c      	sub	sp, #112	; 0x70
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d172      	bne.n	8005960 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800587a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587c:	2200      	movs	r2, #0
 800587e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	330c      	adds	r3, #12
 8005886:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005896:	66bb      	str	r3, [r7, #104]	; 0x68
 8005898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80058a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e5      	bne.n	8005880 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3314      	adds	r3, #20
 80058ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	667b      	str	r3, [r7, #100]	; 0x64
 80058cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3314      	adds	r3, #20
 80058d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058d4:	647a      	str	r2, [r7, #68]	; 0x44
 80058d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e5      	bne.n	80058b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3314      	adds	r3, #20
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	623b      	str	r3, [r7, #32]
   return(result);
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fe:	663b      	str	r3, [r7, #96]	; 0x60
 8005900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3314      	adds	r3, #20
 8005906:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005908:	633a      	str	r2, [r7, #48]	; 0x30
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800590e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e5      	bne.n	80058e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800591c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	2b01      	cmp	r3, #1
 800592a:	d119      	bne.n	8005960 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	60fb      	str	r3, [r7, #12]
   return(result);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0310 	bic.w	r3, r3, #16
 8005942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800594c:	61fa      	str	r2, [r7, #28]
 800594e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	69b9      	ldr	r1, [r7, #24]
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	617b      	str	r3, [r7, #20]
   return(result);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e5      	bne.n	800592c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	2b01      	cmp	r3, #1
 8005966:	d106      	bne.n	8005976 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800596c:	4619      	mov	r1, r3
 800596e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005970:	f7ff ff0e 	bl	8005790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005974:	e002      	b.n	800597c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005976:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005978:	f7fa fe5e 	bl	8000638 <HAL_UART_RxCpltCallback>
}
 800597c:	bf00      	nop
 800597e:	3770      	adds	r7, #112	; 0x70
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	2b01      	cmp	r3, #1
 8005998:	d108      	bne.n	80059ac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	4619      	mov	r1, r3
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f7ff fef3 	bl	8005790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059aa:	e002      	b.n	80059b2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7ff fedb 	bl	8005768 <HAL_UART_RxHalfCpltCallback>
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	bf0c      	ite	eq
 80059da:	2301      	moveq	r3, #1
 80059dc:	2300      	movne	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b21      	cmp	r3, #33	; 0x21
 80059ec:	d108      	bne.n	8005a00 <UART_DMAError+0x46>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2200      	movs	r2, #0
 80059f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80059fa:	68b8      	ldr	r0, [r7, #8]
 80059fc:	f000 f8c6 	bl	8005b8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	bf0c      	ite	eq
 8005a0e:	2301      	moveq	r3, #1
 8005a10:	2300      	movne	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b22      	cmp	r3, #34	; 0x22
 8005a20:	d108      	bne.n	8005a34 <UART_DMAError+0x7a>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	f000 f8d4 	bl	8005bdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	f043 0210 	orr.w	r2, r3, #16
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a40:	68b8      	ldr	r0, [r7, #8]
 8005a42:	f7ff fe9b 	bl	800577c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b098      	sub	sp, #96	; 0x60
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	88fa      	ldrh	r2, [r7, #6]
 8005a68:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2222      	movs	r2, #34	; 0x22
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	4a40      	ldr	r2, [pc, #256]	; (8005b80 <UART_Start_Receive_DMA+0x130>)
 8005a7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	4a3f      	ldr	r2, [pc, #252]	; (8005b84 <UART_Start_Receive_DMA+0x134>)
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	4a3e      	ldr	r2, [pc, #248]	; (8005b88 <UART_Start_Receive_DMA+0x138>)
 8005a8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	2200      	movs	r2, #0
 8005a96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005a98:	f107 0308 	add.w	r3, r7, #8
 8005a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	f7fc f9c6 	bl	8001e40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	613b      	str	r3, [r7, #16]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d019      	beq.n	8005b0e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	330c      	adds	r3, #12
 8005ae0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	330c      	adds	r3, #12
 8005af8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005afa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005afc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e5      	bne.n	8005ada <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3314      	adds	r3, #20
 8005b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	657b      	str	r3, [r7, #84]	; 0x54
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3314      	adds	r3, #20
 8005b2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e5      	bne.n	8005b0e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3314      	adds	r3, #20
 8005b48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	617b      	str	r3, [r7, #20]
   return(result);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b58:	653b      	str	r3, [r7, #80]	; 0x50
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3314      	adds	r3, #20
 8005b60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b62:	627a      	str	r2, [r7, #36]	; 0x24
 8005b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6a39      	ldr	r1, [r7, #32]
 8005b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e5      	bne.n	8005b42 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3760      	adds	r7, #96	; 0x60
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	0800585f 	.word	0x0800585f
 8005b84:	08005985 	.word	0x08005985
 8005b88:	080059bb 	.word	0x080059bb

08005b8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b089      	sub	sp, #36	; 0x24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	61ba      	str	r2, [r7, #24]
 8005bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	6979      	ldr	r1, [r7, #20]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e5      	bne.n	8005b94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005bd0:	bf00      	nop
 8005bd2:	3724      	adds	r7, #36	; 0x24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b095      	sub	sp, #84	; 0x54
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	330c      	adds	r3, #12
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c04:	643a      	str	r2, [r7, #64]	; 0x40
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e5      	bne.n	8005be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3314      	adds	r3, #20
 8005c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f023 0301 	bic.w	r3, r3, #1
 8005c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3314      	adds	r3, #20
 8005c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e5      	bne.n	8005c18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d119      	bne.n	8005c88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f023 0310 	bic.w	r3, r3, #16
 8005c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c74:	61ba      	str	r2, [r7, #24]
 8005c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6979      	ldr	r1, [r7, #20]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	613b      	str	r3, [r7, #16]
   return(result);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e5      	bne.n	8005c54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c96:	bf00      	nop
 8005c98:	3754      	adds	r7, #84	; 0x54
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f7ff fd5d 	bl	800577c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b21      	cmp	r3, #33	; 0x21
 8005cdc:	d13e      	bne.n	8005d5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce6:	d114      	bne.n	8005d12 <UART_Transmit_IT+0x48>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d110      	bne.n	8005d12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	1c9a      	adds	r2, r3, #2
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	621a      	str	r2, [r3, #32]
 8005d10:	e008      	b.n	8005d24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	1c59      	adds	r1, r3, #1
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6211      	str	r1, [r2, #32]
 8005d1c:	781a      	ldrb	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4619      	mov	r1, r3
 8005d32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10f      	bne.n	8005d58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e000      	b.n	8005d5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d5c:	2302      	movs	r3, #2
  }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fa fc3e 	bl	800060c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b08c      	sub	sp, #48	; 0x30
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b22      	cmp	r3, #34	; 0x22
 8005dac:	f040 80ab 	bne.w	8005f06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db8:	d117      	bne.n	8005dea <UART_Receive_IT+0x50>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d113      	bne.n	8005dea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	1c9a      	adds	r2, r3, #2
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	629a      	str	r2, [r3, #40]	; 0x28
 8005de8:	e026      	b.n	8005e38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfc:	d007      	beq.n	8005e0e <UART_Receive_IT+0x74>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <UART_Receive_IT+0x82>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	e008      	b.n	8005e2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	4619      	mov	r1, r3
 8005e46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d15a      	bne.n	8005f02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0220 	bic.w	r2, r2, #32
 8005e5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0201 	bic.w	r2, r2, #1
 8005e7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d135      	bne.n	8005ef8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f023 0310 	bic.w	r3, r3, #16
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb2:	623a      	str	r2, [r7, #32]
 8005eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	69f9      	ldr	r1, [r7, #28]
 8005eb8:	6a3a      	ldr	r2, [r7, #32]
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e5      	bne.n	8005e92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d10a      	bne.n	8005eea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff fc4d 	bl	8005790 <HAL_UARTEx_RxEventCallback>
 8005ef6:	e002      	b.n	8005efe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fa fb9d 	bl	8000638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e002      	b.n	8005f08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e000      	b.n	8005f08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
  }
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3730      	adds	r7, #48	; 0x30
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	b09f      	sub	sp, #124	; 0x7c
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f26:	68d9      	ldr	r1, [r3, #12]
 8005f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	ea40 0301 	orr.w	r3, r0, r1
 8005f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	431a      	orrs	r2, r3
 8005f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f54:	f021 010c 	bic.w	r1, r1, #12
 8005f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6e:	6999      	ldr	r1, [r3, #24]
 8005f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	ea40 0301 	orr.w	r3, r0, r1
 8005f78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4bc5      	ldr	r3, [pc, #788]	; (8006294 <UART_SetConfig+0x384>)
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d004      	beq.n	8005f8e <UART_SetConfig+0x7e>
 8005f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4bc3      	ldr	r3, [pc, #780]	; (8006298 <UART_SetConfig+0x388>)
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d103      	bne.n	8005f96 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f8e:	f7fd fcbb 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 8005f92:	6778      	str	r0, [r7, #116]	; 0x74
 8005f94:	e002      	b.n	8005f9c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f96:	f7fd fca3 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8005f9a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa4:	f040 80b6 	bne.w	8006114 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005faa:	461c      	mov	r4, r3
 8005fac:	f04f 0500 	mov.w	r5, #0
 8005fb0:	4622      	mov	r2, r4
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	1891      	adds	r1, r2, r2
 8005fb6:	6439      	str	r1, [r7, #64]	; 0x40
 8005fb8:	415b      	adcs	r3, r3
 8005fba:	647b      	str	r3, [r7, #68]	; 0x44
 8005fbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fc0:	1912      	adds	r2, r2, r4
 8005fc2:	eb45 0303 	adc.w	r3, r5, r3
 8005fc6:	f04f 0000 	mov.w	r0, #0
 8005fca:	f04f 0100 	mov.w	r1, #0
 8005fce:	00d9      	lsls	r1, r3, #3
 8005fd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fd4:	00d0      	lsls	r0, r2, #3
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	1911      	adds	r1, r2, r4
 8005fdc:	6639      	str	r1, [r7, #96]	; 0x60
 8005fde:	416b      	adcs	r3, r5
 8005fe0:	667b      	str	r3, [r7, #100]	; 0x64
 8005fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	1891      	adds	r1, r2, r2
 8005fee:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ff0:	415b      	adcs	r3, r3
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ff8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ffc:	f7fa f940 	bl	8000280 <__aeabi_uldivmod>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4ba5      	ldr	r3, [pc, #660]	; (800629c <UART_SetConfig+0x38c>)
 8006006:	fba3 2302 	umull	r2, r3, r3, r2
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	011e      	lsls	r6, r3, #4
 800600e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006010:	461c      	mov	r4, r3
 8006012:	f04f 0500 	mov.w	r5, #0
 8006016:	4622      	mov	r2, r4
 8006018:	462b      	mov	r3, r5
 800601a:	1891      	adds	r1, r2, r2
 800601c:	6339      	str	r1, [r7, #48]	; 0x30
 800601e:	415b      	adcs	r3, r3
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
 8006022:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006026:	1912      	adds	r2, r2, r4
 8006028:	eb45 0303 	adc.w	r3, r5, r3
 800602c:	f04f 0000 	mov.w	r0, #0
 8006030:	f04f 0100 	mov.w	r1, #0
 8006034:	00d9      	lsls	r1, r3, #3
 8006036:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800603a:	00d0      	lsls	r0, r2, #3
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	1911      	adds	r1, r2, r4
 8006042:	65b9      	str	r1, [r7, #88]	; 0x58
 8006044:	416b      	adcs	r3, r5
 8006046:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	461a      	mov	r2, r3
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	1891      	adds	r1, r2, r2
 8006054:	62b9      	str	r1, [r7, #40]	; 0x28
 8006056:	415b      	adcs	r3, r3
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800605e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006062:	f7fa f90d 	bl	8000280 <__aeabi_uldivmod>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4b8c      	ldr	r3, [pc, #560]	; (800629c <UART_SetConfig+0x38c>)
 800606c:	fba3 1302 	umull	r1, r3, r3, r2
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	2164      	movs	r1, #100	; 0x64
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	3332      	adds	r3, #50	; 0x32
 800607e:	4a87      	ldr	r2, [pc, #540]	; (800629c <UART_SetConfig+0x38c>)
 8006080:	fba2 2303 	umull	r2, r3, r2, r3
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800608c:	441e      	add	r6, r3
 800608e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006090:	4618      	mov	r0, r3
 8006092:	f04f 0100 	mov.w	r1, #0
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	1894      	adds	r4, r2, r2
 800609c:	623c      	str	r4, [r7, #32]
 800609e:	415b      	adcs	r3, r3
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
 80060a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060a6:	1812      	adds	r2, r2, r0
 80060a8:	eb41 0303 	adc.w	r3, r1, r3
 80060ac:	f04f 0400 	mov.w	r4, #0
 80060b0:	f04f 0500 	mov.w	r5, #0
 80060b4:	00dd      	lsls	r5, r3, #3
 80060b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060ba:	00d4      	lsls	r4, r2, #3
 80060bc:	4622      	mov	r2, r4
 80060be:	462b      	mov	r3, r5
 80060c0:	1814      	adds	r4, r2, r0
 80060c2:	653c      	str	r4, [r7, #80]	; 0x50
 80060c4:	414b      	adcs	r3, r1
 80060c6:	657b      	str	r3, [r7, #84]	; 0x54
 80060c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	461a      	mov	r2, r3
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	1891      	adds	r1, r2, r2
 80060d4:	61b9      	str	r1, [r7, #24]
 80060d6:	415b      	adcs	r3, r3
 80060d8:	61fb      	str	r3, [r7, #28]
 80060da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80060e2:	f7fa f8cd 	bl	8000280 <__aeabi_uldivmod>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4b6c      	ldr	r3, [pc, #432]	; (800629c <UART_SetConfig+0x38c>)
 80060ec:	fba3 1302 	umull	r1, r3, r3, r2
 80060f0:	095b      	lsrs	r3, r3, #5
 80060f2:	2164      	movs	r1, #100	; 0x64
 80060f4:	fb01 f303 	mul.w	r3, r1, r3
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	3332      	adds	r3, #50	; 0x32
 80060fe:	4a67      	ldr	r2, [pc, #412]	; (800629c <UART_SetConfig+0x38c>)
 8006100:	fba2 2303 	umull	r2, r3, r2, r3
 8006104:	095b      	lsrs	r3, r3, #5
 8006106:	f003 0207 	and.w	r2, r3, #7
 800610a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4432      	add	r2, r6
 8006110:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006112:	e0b9      	b.n	8006288 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006116:	461c      	mov	r4, r3
 8006118:	f04f 0500 	mov.w	r5, #0
 800611c:	4622      	mov	r2, r4
 800611e:	462b      	mov	r3, r5
 8006120:	1891      	adds	r1, r2, r2
 8006122:	6139      	str	r1, [r7, #16]
 8006124:	415b      	adcs	r3, r3
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800612c:	1912      	adds	r2, r2, r4
 800612e:	eb45 0303 	adc.w	r3, r5, r3
 8006132:	f04f 0000 	mov.w	r0, #0
 8006136:	f04f 0100 	mov.w	r1, #0
 800613a:	00d9      	lsls	r1, r3, #3
 800613c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006140:	00d0      	lsls	r0, r2, #3
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	eb12 0804 	adds.w	r8, r2, r4
 800614a:	eb43 0905 	adc.w	r9, r3, r5
 800614e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4618      	mov	r0, r3
 8006154:	f04f 0100 	mov.w	r1, #0
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	008b      	lsls	r3, r1, #2
 8006162:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006166:	0082      	lsls	r2, r0, #2
 8006168:	4640      	mov	r0, r8
 800616a:	4649      	mov	r1, r9
 800616c:	f7fa f888 	bl	8000280 <__aeabi_uldivmod>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4b49      	ldr	r3, [pc, #292]	; (800629c <UART_SetConfig+0x38c>)
 8006176:	fba3 2302 	umull	r2, r3, r3, r2
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	011e      	lsls	r6, r3, #4
 800617e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006180:	4618      	mov	r0, r3
 8006182:	f04f 0100 	mov.w	r1, #0
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	1894      	adds	r4, r2, r2
 800618c:	60bc      	str	r4, [r7, #8]
 800618e:	415b      	adcs	r3, r3
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006196:	1812      	adds	r2, r2, r0
 8006198:	eb41 0303 	adc.w	r3, r1, r3
 800619c:	f04f 0400 	mov.w	r4, #0
 80061a0:	f04f 0500 	mov.w	r5, #0
 80061a4:	00dd      	lsls	r5, r3, #3
 80061a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061aa:	00d4      	lsls	r4, r2, #3
 80061ac:	4622      	mov	r2, r4
 80061ae:	462b      	mov	r3, r5
 80061b0:	1814      	adds	r4, r2, r0
 80061b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80061b4:	414b      	adcs	r3, r1
 80061b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	4618      	mov	r0, r3
 80061be:	f04f 0100 	mov.w	r1, #0
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	008b      	lsls	r3, r1, #2
 80061cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061d0:	0082      	lsls	r2, r0, #2
 80061d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80061d6:	f7fa f853 	bl	8000280 <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4b2f      	ldr	r3, [pc, #188]	; (800629c <UART_SetConfig+0x38c>)
 80061e0:	fba3 1302 	umull	r1, r3, r3, r2
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	2164      	movs	r1, #100	; 0x64
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	3332      	adds	r3, #50	; 0x32
 80061f2:	4a2a      	ldr	r2, [pc, #168]	; (800629c <UART_SetConfig+0x38c>)
 80061f4:	fba2 2303 	umull	r2, r3, r2, r3
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061fe:	441e      	add	r6, r3
 8006200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006202:	4618      	mov	r0, r3
 8006204:	f04f 0100 	mov.w	r1, #0
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	1894      	adds	r4, r2, r2
 800620e:	603c      	str	r4, [r7, #0]
 8006210:	415b      	adcs	r3, r3
 8006212:	607b      	str	r3, [r7, #4]
 8006214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006218:	1812      	adds	r2, r2, r0
 800621a:	eb41 0303 	adc.w	r3, r1, r3
 800621e:	f04f 0400 	mov.w	r4, #0
 8006222:	f04f 0500 	mov.w	r5, #0
 8006226:	00dd      	lsls	r5, r3, #3
 8006228:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800622c:	00d4      	lsls	r4, r2, #3
 800622e:	4622      	mov	r2, r4
 8006230:	462b      	mov	r3, r5
 8006232:	eb12 0a00 	adds.w	sl, r2, r0
 8006236:	eb43 0b01 	adc.w	fp, r3, r1
 800623a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4618      	mov	r0, r3
 8006240:	f04f 0100 	mov.w	r1, #0
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	008b      	lsls	r3, r1, #2
 800624e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006252:	0082      	lsls	r2, r0, #2
 8006254:	4650      	mov	r0, sl
 8006256:	4659      	mov	r1, fp
 8006258:	f7fa f812 	bl	8000280 <__aeabi_uldivmod>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4b0e      	ldr	r3, [pc, #56]	; (800629c <UART_SetConfig+0x38c>)
 8006262:	fba3 1302 	umull	r1, r3, r3, r2
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	2164      	movs	r1, #100	; 0x64
 800626a:	fb01 f303 	mul.w	r3, r1, r3
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	3332      	adds	r3, #50	; 0x32
 8006274:	4a09      	ldr	r2, [pc, #36]	; (800629c <UART_SetConfig+0x38c>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	f003 020f 	and.w	r2, r3, #15
 8006280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4432      	add	r2, r6
 8006286:	609a      	str	r2, [r3, #8]
}
 8006288:	bf00      	nop
 800628a:	377c      	adds	r7, #124	; 0x7c
 800628c:	46bd      	mov	sp, r7
 800628e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006292:	bf00      	nop
 8006294:	40011000 	.word	0x40011000
 8006298:	40011400 	.word	0x40011400
 800629c:	51eb851f 	.word	0x51eb851f

080062a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80062ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062b2:	2b84      	cmp	r3, #132	; 0x84
 80062b4:	d005      	beq.n	80062c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80062b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	3303      	adds	r3, #3
 80062c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80062c2:	68fb      	ldr	r3, [r7, #12]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062d6:	f3ef 8305 	mrs	r3, IPSR
 80062da:	607b      	str	r3, [r7, #4]
  return(result);
 80062dc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bf14      	ite	ne
 80062e2:	2301      	movne	r3, #1
 80062e4:	2300      	moveq	r3, #0
 80062e6:	b2db      	uxtb	r3, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80062f8:	f001 ffb0 	bl	800825c <vTaskStartScheduler>
  
  return osOK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	bd80      	pop	{r7, pc}

08006302 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006302:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006304:	b089      	sub	sp, #36	; 0x24
 8006306:	af04      	add	r7, sp, #16
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d020      	beq.n	8006356 <osThreadCreate+0x54>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01c      	beq.n	8006356 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685c      	ldr	r4, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681d      	ldr	r5, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691e      	ldr	r6, [r3, #16]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ffb6 	bl	80062a0 <makeFreeRtosPriority>
 8006334:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800633e:	9202      	str	r2, [sp, #8]
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	9100      	str	r1, [sp, #0]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4632      	mov	r2, r6
 8006348:	4629      	mov	r1, r5
 800634a:	4620      	mov	r0, r4
 800634c:	f001 fc14 	bl	8007b78 <xTaskCreateStatic>
 8006350:	4603      	mov	r3, r0
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e01c      	b.n	8006390 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685c      	ldr	r4, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006362:	b29e      	uxth	r6, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff ff98 	bl	80062a0 <makeFreeRtosPriority>
 8006370:	4602      	mov	r2, r0
 8006372:	f107 030c 	add.w	r3, r7, #12
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	9200      	str	r2, [sp, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	4632      	mov	r2, r6
 800637e:	4629      	mov	r1, r5
 8006380:	4620      	mov	r0, r4
 8006382:	f001 fc56 	bl	8007c32 <xTaskCreate>
 8006386:	4603      	mov	r3, r0
 8006388:	2b01      	cmp	r3, #1
 800638a:	d001      	beq.n	8006390 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800638c:	2300      	movs	r3, #0
 800638e:	e000      	b.n	8006392 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006390:	68fb      	ldr	r3, [r7, #12]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800639a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <osDelay+0x16>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	e000      	b.n	80063b2 <osDelay+0x18>
 80063b0:	2301      	movs	r3, #1
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 fd8a 	bl	8007ecc <vTaskDelay>
  
  return osOK;
 80063b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	460b      	mov	r3, r1
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d013      	beq.n	8006402 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80063da:	7afb      	ldrb	r3, [r7, #11]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <osTimerCreate+0x20>
 80063e0:	2101      	movs	r1, #1
 80063e2:	e000      	b.n	80063e6 <osTimerCreate+0x22>
 80063e4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80063ee:	9201      	str	r2, [sp, #4]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	460a      	mov	r2, r1
 80063f6:	2101      	movs	r1, #1
 80063f8:	480b      	ldr	r0, [pc, #44]	; (8006428 <osTimerCreate+0x64>)
 80063fa:	f002 fe0e 	bl	800901a <xTimerCreateStatic>
 80063fe:	4603      	mov	r3, r0
 8006400:	e00e      	b.n	8006420 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <osTimerCreate+0x48>
 8006408:	2201      	movs	r2, #1
 800640a:	e000      	b.n	800640e <osTimerCreate+0x4a>
 800640c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2101      	movs	r1, #1
 8006418:	4803      	ldr	r0, [pc, #12]	; (8006428 <osTimerCreate+0x64>)
 800641a:	f002 fddd 	bl	8008fd8 <xTimerCreate>
 800641e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	0800f888 	.word	0x0800f888

0800642c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af02      	add	r7, sp, #8
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <osTimerStart+0x20>
    ticks = 1;
 8006448:	2301      	movs	r3, #1
 800644a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800644c:	f7ff ff40 	bl	80062d0 <inHandlerMode>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d01a      	beq.n	800648c <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8006456:	f107 030c 	add.w	r3, r7, #12
 800645a:	2200      	movs	r2, #0
 800645c:	9200      	str	r2, [sp, #0]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	2109      	movs	r1, #9
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f002 fe52 	bl	800910c <xTimerGenericCommand>
 8006468:	4603      	mov	r3, r0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d002      	beq.n	8006474 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800646e:	23ff      	movs	r3, #255	; 0xff
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	e018      	b.n	80064a6 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d015      	beq.n	80064a6 <osTimerStart+0x7a>
 800647a:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <osTimerStart+0x84>)
 800647c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	e00c      	b.n	80064a6 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800648c:	2300      	movs	r3, #0
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	2300      	movs	r3, #0
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	2104      	movs	r1, #4
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f002 fe38 	bl	800910c <xTimerGenericCommand>
 800649c:	4603      	mov	r3, r0
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d001      	beq.n	80064a6 <osTimerStart+0x7a>
      result = osErrorOS;
 80064a2:	23ff      	movs	r3, #255	; 0xff
 80064a4:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80064a6:	697b      	ldr	r3, [r7, #20]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80064c4:	f7ff ff04 	bl	80062d0 <inHandlerMode>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d019      	beq.n	8006502 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80064ce:	f107 0308 	add.w	r3, r7, #8
 80064d2:	2200      	movs	r2, #0
 80064d4:	9200      	str	r2, [sp, #0]
 80064d6:	2200      	movs	r2, #0
 80064d8:	2108      	movs	r1, #8
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f002 fe16 	bl	800910c <xTimerGenericCommand>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d001      	beq.n	80064ea <osTimerStop+0x36>
      return osErrorOS;
 80064e6:	23ff      	movs	r3, #255	; 0xff
 80064e8:	e019      	b.n	800651e <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d015      	beq.n	800651c <osTimerStop+0x68>
 80064f0:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <osTimerStop+0x74>)
 80064f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	e00c      	b.n	800651c <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8006502:	2300      	movs	r3, #0
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	2300      	movs	r3, #0
 8006508:	2200      	movs	r2, #0
 800650a:	2103      	movs	r1, #3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f002 fdfd 	bl	800910c <xTimerGenericCommand>
 8006512:	4603      	mov	r3, r0
 8006514:	2b01      	cmp	r3, #1
 8006516:	d001      	beq.n	800651c <osTimerStop+0x68>
      result = osErrorOS;
 8006518:	23ff      	movs	r3, #255	; 0xff
 800651a:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800651c:	68fb      	ldr	r3, [r7, #12]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d007      	beq.n	800654c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4619      	mov	r1, r3
 8006542:	2001      	movs	r0, #1
 8006544:	f000 fc7b 	bl	8006e3e <xQueueCreateMutexStatic>
 8006548:	4603      	mov	r3, r0
 800654a:	e003      	b.n	8006554 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800654c:	2001      	movs	r0, #1
 800654e:	f000 fc5e 	bl	8006e0e <xQueueCreateMutex>
 8006552:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006566:	2300      	movs	r3, #0
 8006568:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <osMutexWait+0x18>
    return osErrorParameter;
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	e03a      	b.n	80065ea <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d103      	bne.n	8006588 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006580:	f04f 33ff 	mov.w	r3, #4294967295
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e009      	b.n	800659c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d006      	beq.n	800659c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <osMutexWait+0x40>
      ticks = 1;
 8006598:	2301      	movs	r3, #1
 800659a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800659c:	f7ff fe98 	bl	80062d0 <inHandlerMode>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d017      	beq.n	80065d6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80065a6:	f107 0308 	add.w	r3, r7, #8
 80065aa:	461a      	mov	r2, r3
 80065ac:	2100      	movs	r1, #0
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 f8dc 	bl	800776c <xQueueReceiveFromISR>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d001      	beq.n	80065be <osMutexWait+0x62>
      return osErrorOS;
 80065ba:	23ff      	movs	r3, #255	; 0xff
 80065bc:	e015      	b.n	80065ea <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d011      	beq.n	80065e8 <osMutexWait+0x8c>
 80065c4:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <osMutexWait+0x98>)
 80065c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	e008      	b.n	80065e8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 ffbb 	bl	8007554 <xQueueSemaphoreTake>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d001      	beq.n	80065e8 <osMutexWait+0x8c>
    return osErrorOS;
 80065e4:	23ff      	movs	r3, #255	; 0xff
 80065e6:	e000      	b.n	80065ea <osMutexWait+0x8e>
  }
  
  return osOK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	e000ed04 	.word	0xe000ed04

080065f8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006604:	2300      	movs	r3, #0
 8006606:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006608:	f7ff fe62 	bl	80062d0 <inHandlerMode>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d016      	beq.n	8006640 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006612:	f107 0308 	add.w	r3, r7, #8
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fe2e 	bl	800727a <xQueueGiveFromISR>
 800661e:	4603      	mov	r3, r0
 8006620:	2b01      	cmp	r3, #1
 8006622:	d001      	beq.n	8006628 <osMutexRelease+0x30>
      return osErrorOS;
 8006624:	23ff      	movs	r3, #255	; 0xff
 8006626:	e017      	b.n	8006658 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d013      	beq.n	8006656 <osMutexRelease+0x5e>
 800662e:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <osMutexRelease+0x68>)
 8006630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	e00a      	b.n	8006656 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006640:	2300      	movs	r3, #0
 8006642:	2200      	movs	r2, #0
 8006644:	2100      	movs	r1, #0
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fc7e 	bl	8006f48 <xQueueGenericSend>
 800664c:	4603      	mov	r3, r0
 800664e:	2b01      	cmp	r3, #1
 8006650:	d001      	beq.n	8006656 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006652:	23ff      	movs	r3, #255	; 0xff
 8006654:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006656:	68fb      	ldr	r3, [r7, #12]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	e000ed04 	.word	0xe000ed04

08006664 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af02      	add	r7, sp, #8
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d016      	beq.n	80066a4 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d10a      	bne.n	8006692 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2203      	movs	r2, #3
 8006682:	9200      	str	r2, [sp, #0]
 8006684:	2200      	movs	r2, #0
 8006686:	2100      	movs	r1, #0
 8006688:	2001      	movs	r0, #1
 800668a:	f000 fad5 	bl	8006c38 <xQueueGenericCreateStatic>
 800668e:	4603      	mov	r3, r0
 8006690:	e023      	b.n	80066da <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8006692:	6838      	ldr	r0, [r7, #0]
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	461a      	mov	r2, r3
 800669c:	f000 fbea 	bl	8006e74 <xQueueCreateCountingSemaphoreStatic>
 80066a0:	4603      	mov	r3, r0
 80066a2:	e01a      	b.n	80066da <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d110      	bne.n	80066cc <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 80066aa:	2203      	movs	r2, #3
 80066ac:	2100      	movs	r1, #0
 80066ae:	2001      	movs	r0, #1
 80066b0:	f000 fb3a 	bl	8006d28 <xQueueGenericCreate>
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <osSemaphoreCreate+0x64>
 80066bc:	2300      	movs	r3, #0
 80066be:	2200      	movs	r2, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fc40 	bl	8006f48 <xQueueGenericSend>
      return sema;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	e006      	b.n	80066da <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	4611      	mov	r1, r2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fc05 	bl	8006ee2 <xQueueCreateCountingSemaphore>
 80066d8:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80066ee:	2300      	movs	r3, #0
 80066f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	e03a      	b.n	8006772 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d103      	bne.n	8006710 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006708:	f04f 33ff 	mov.w	r3, #4294967295
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	e009      	b.n	8006724 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d006      	beq.n	8006724 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <osSemaphoreWait+0x40>
      ticks = 1;
 8006720:	2301      	movs	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006724:	f7ff fdd4 	bl	80062d0 <inHandlerMode>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d017      	beq.n	800675e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800672e:	f107 0308 	add.w	r3, r7, #8
 8006732:	461a      	mov	r2, r3
 8006734:	2100      	movs	r1, #0
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 f818 	bl	800776c <xQueueReceiveFromISR>
 800673c:	4603      	mov	r3, r0
 800673e:	2b01      	cmp	r3, #1
 8006740:	d001      	beq.n	8006746 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006742:	23ff      	movs	r3, #255	; 0xff
 8006744:	e015      	b.n	8006772 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d011      	beq.n	8006770 <osSemaphoreWait+0x8c>
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <osSemaphoreWait+0x98>)
 800674e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	e008      	b.n	8006770 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fef7 	bl	8007554 <xQueueSemaphoreTake>
 8006766:	4603      	mov	r3, r0
 8006768:	2b01      	cmp	r3, #1
 800676a:	d001      	beq.n	8006770 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800676c:	23ff      	movs	r3, #255	; 0xff
 800676e:	e000      	b.n	8006772 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	e000ed04 	.word	0xe000ed04

08006780 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800678c:	2300      	movs	r3, #0
 800678e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006790:	f7ff fd9e 	bl	80062d0 <inHandlerMode>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d016      	beq.n	80067c8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800679a:	f107 0308 	add.w	r3, r7, #8
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fd6a 	bl	800727a <xQueueGiveFromISR>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d001      	beq.n	80067b0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80067ac:	23ff      	movs	r3, #255	; 0xff
 80067ae:	e017      	b.n	80067e0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d013      	beq.n	80067de <osSemaphoreRelease+0x5e>
 80067b6:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <osSemaphoreRelease+0x68>)
 80067b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	e00a      	b.n	80067de <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80067c8:	2300      	movs	r3, #0
 80067ca:	2200      	movs	r2, #0
 80067cc:	2100      	movs	r1, #0
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fbba 	bl	8006f48 <xQueueGenericSend>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d001      	beq.n	80067de <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80067da:	23ff      	movs	r3, #255	; 0xff
 80067dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80067de:	68fb      	ldr	r3, [r7, #12]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80067ec:	b590      	push	{r4, r7, lr}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d011      	beq.n	8006822 <osMessageCreate+0x36>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6859      	ldr	r1, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	2400      	movs	r4, #0
 8006818:	9400      	str	r4, [sp, #0]
 800681a:	f000 fa0d 	bl	8006c38 <xQueueGenericCreateStatic>
 800681e:	4603      	mov	r3, r0
 8006820:	e008      	b.n	8006834 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	4619      	mov	r1, r3
 800682e:	f000 fa7b 	bl	8006d28 <xQueueGenericCreate>
 8006832:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bd90      	pop	{r4, r7, pc}

0800683c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006848:	2300      	movs	r3, #0
 800684a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <osMessagePut+0x1e>
    ticks = 1;
 8006856:	2301      	movs	r3, #1
 8006858:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800685a:	f7ff fd39 	bl	80062d0 <inHandlerMode>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d018      	beq.n	8006896 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006864:	f107 0210 	add.w	r2, r7, #16
 8006868:	f107 0108 	add.w	r1, r7, #8
 800686c:	2300      	movs	r3, #0
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fc68 	bl	8007144 <xQueueGenericSendFromISR>
 8006874:	4603      	mov	r3, r0
 8006876:	2b01      	cmp	r3, #1
 8006878:	d001      	beq.n	800687e <osMessagePut+0x42>
      return osErrorOS;
 800687a:	23ff      	movs	r3, #255	; 0xff
 800687c:	e018      	b.n	80068b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d014      	beq.n	80068ae <osMessagePut+0x72>
 8006884:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <osMessagePut+0x7c>)
 8006886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	e00b      	b.n	80068ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006896:	f107 0108 	add.w	r1, r7, #8
 800689a:	2300      	movs	r3, #0
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 fb52 	bl	8006f48 <xQueueGenericSend>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d001      	beq.n	80068ae <osMessagePut+0x72>
      return osErrorOS;
 80068aa:	23ff      	movs	r3, #255	; 0xff
 80068ac:	e000      	b.n	80068b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80068bc:	b590      	push	{r4, r7, lr}
 80068be:	b08b      	sub	sp, #44	; 0x2c
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10a      	bne.n	80068ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80068d6:	2380      	movs	r3, #128	; 0x80
 80068d8:	617b      	str	r3, [r7, #20]
    return event;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	461c      	mov	r4, r3
 80068de:	f107 0314 	add.w	r3, r7, #20
 80068e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068ea:	e054      	b.n	8006996 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80068ec:	2300      	movs	r3, #0
 80068ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d103      	bne.n	8006904 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80068fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
 8006902:	e009      	b.n	8006918 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d006      	beq.n	8006918 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <osMessageGet+0x5c>
      ticks = 1;
 8006914:	2301      	movs	r3, #1
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006918:	f7ff fcda 	bl	80062d0 <inHandlerMode>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01c      	beq.n	800695c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006922:	f107 0220 	add.w	r2, r7, #32
 8006926:	f107 0314 	add.w	r3, r7, #20
 800692a:	3304      	adds	r3, #4
 800692c:	4619      	mov	r1, r3
 800692e:	68b8      	ldr	r0, [r7, #8]
 8006930:	f000 ff1c 	bl	800776c <xQueueReceiveFromISR>
 8006934:	4603      	mov	r3, r0
 8006936:	2b01      	cmp	r3, #1
 8006938:	d102      	bne.n	8006940 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800693a:	2310      	movs	r3, #16
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	e001      	b.n	8006944 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006940:	2300      	movs	r3, #0
 8006942:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d01d      	beq.n	8006986 <osMessageGet+0xca>
 800694a:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <osMessageGet+0xe4>)
 800694c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	e014      	b.n	8006986 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800695c:	f107 0314 	add.w	r3, r7, #20
 8006960:	3304      	adds	r3, #4
 8006962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006964:	4619      	mov	r1, r3
 8006966:	68b8      	ldr	r0, [r7, #8]
 8006968:	f000 fd14 	bl	8007394 <xQueueReceive>
 800696c:	4603      	mov	r3, r0
 800696e:	2b01      	cmp	r3, #1
 8006970:	d102      	bne.n	8006978 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006972:	2310      	movs	r3, #16
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	e006      	b.n	8006986 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <osMessageGet+0xc6>
 800697e:	2300      	movs	r3, #0
 8006980:	e000      	b.n	8006984 <osMessageGet+0xc8>
 8006982:	2340      	movs	r3, #64	; 0x40
 8006984:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	461c      	mov	r4, r3
 800698a:	f107 0314 	add.w	r3, r7, #20
 800698e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	372c      	adds	r7, #44	; 0x2c
 800699a:	46bd      	mov	sp, r7
 800699c:	bd90      	pop	{r4, r7, pc}
 800699e:	bf00      	nop
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 fac1 	bl	8007f34 <vTaskSuspend>
  
  return osOK;
 80069b2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80069c4:	f7ff fc84 	bl	80062d0 <inHandlerMode>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00e      	beq.n	80069ec <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fbd2 	bl	8008178 <xTaskResumeFromISR>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d10b      	bne.n	80069f2 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80069da:	4b08      	ldr	r3, [pc, #32]	; (80069fc <osThreadResume+0x40>)
 80069dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	e002      	b.n	80069f2 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 fb65 	bl	80080bc <vTaskResume>
  }
  return osOK;
 80069f2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	e000ed04 	.word	0xe000ed04

08006a00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f103 0208 	add.w	r2, r3, #8
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f04f 32ff 	mov.w	r2, #4294967295
 8006a18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f103 0208 	add.w	r2, r3, #8
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f103 0208 	add.w	r2, r3, #8
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d103      	bne.n	8006ac2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	e00c      	b.n	8006adc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e002      	b.n	8006ad0 <vListInsert+0x2e>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d2f6      	bcs.n	8006aca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	601a      	str	r2, [r3, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6892      	ldr	r2, [r2, #8]
 8006b2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6852      	ldr	r2, [r2, #4]
 8006b34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d103      	bne.n	8006b48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	1e5a      	subs	r2, r3, #1
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b92:	f002 fecf 	bl	8009934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9e:	68f9      	ldr	r1, [r7, #12]
 8006ba0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	441a      	add	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	68f9      	ldr	r1, [r7, #12]
 8006bc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	441a      	add	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	22ff      	movs	r2, #255	; 0xff
 8006bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	22ff      	movs	r2, #255	; 0xff
 8006bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d114      	bne.n	8006c12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01a      	beq.n	8006c26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3310      	adds	r3, #16
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 fdc5 	bl	8008784 <xTaskRemoveFromEventList>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d012      	beq.n	8006c26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c00:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <xQueueGenericReset+0xcc>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	e009      	b.n	8006c26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3310      	adds	r3, #16
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff fef2 	bl	8006a00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3324      	adds	r3, #36	; 0x24
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff feed 	bl	8006a00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c26:	f002 feb5 	bl	8009994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c2a:	2301      	movs	r3, #1
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	e000ed04 	.word	0xe000ed04

08006c38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08e      	sub	sp, #56	; 0x38
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <xQueueGenericCreateStatic+0x52>
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <xQueueGenericCreateStatic+0x56>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <xQueueGenericCreateStatic+0x58>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	623b      	str	r3, [r7, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <xQueueGenericCreateStatic+0x7e>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <xQueueGenericCreateStatic+0x82>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <xQueueGenericCreateStatic+0x84>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10a      	bne.n	8006cd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	61fb      	str	r3, [r7, #28]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cd6:	2348      	movs	r3, #72	; 0x48
 8006cd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b48      	cmp	r3, #72	; 0x48
 8006cde:	d00a      	beq.n	8006cf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	61bb      	str	r3, [r7, #24]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	4613      	mov	r3, r2
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f83f 	bl	8006d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3730      	adds	r7, #48	; 0x30
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	613b      	str	r3, [r7, #16]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
 8006d5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	3348      	adds	r3, #72	; 0x48
 8006d60:	4618      	mov	r0, r3
 8006d62:	f002 ff09 	bl	8009b78 <pvPortMalloc>
 8006d66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d011      	beq.n	8006d92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	3348      	adds	r3, #72	; 0x48
 8006d76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d80:	79fa      	ldrb	r2, [r7, #7]
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	4613      	mov	r3, r2
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f805 	bl	8006d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d92:	69bb      	ldr	r3, [r7, #24]
	}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3720      	adds	r7, #32
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d103      	bne.n	8006db8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	e002      	b.n	8006dbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dca:	2101      	movs	r1, #1
 8006dcc:	69b8      	ldr	r0, [r7, #24]
 8006dce:	f7ff fecb 	bl	8006b68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00e      	beq.n	8006e06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2100      	movs	r1, #0
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f8a1 	bl	8006f48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b086      	sub	sp, #24
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	4603      	mov	r3, r0
 8006e16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	461a      	mov	r2, r3
 8006e24:	6939      	ldr	r1, [r7, #16]
 8006e26:	6978      	ldr	r0, [r7, #20]
 8006e28:	f7ff ff7e 	bl	8006d28 <xQueueGenericCreate>
 8006e2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff ffd3 	bl	8006dda <prvInitialiseMutex>

		return xNewQueue;
 8006e34:	68fb      	ldr	r3, [r7, #12]
	}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b088      	sub	sp, #32
 8006e42:	af02      	add	r7, sp, #8
 8006e44:	4603      	mov	r3, r0
 8006e46:	6039      	str	r1, [r7, #0]
 8006e48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	6939      	ldr	r1, [r7, #16]
 8006e5c:	6978      	ldr	r0, [r7, #20]
 8006e5e:	f7ff feeb 	bl	8006c38 <xQueueGenericCreateStatic>
 8006e62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f7ff ffb8 	bl	8006dda <prvInitialiseMutex>

		return xNewQueue;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
	}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	; 0x28
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10a      	bne.n	8006e9c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	61bb      	str	r3, [r7, #24]
}
 8006e98:	bf00      	nop
 8006e9a:	e7fe      	b.n	8006e9a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d90a      	bls.n	8006eba <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	617b      	str	r3, [r7, #20]
}
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006eba:	2302      	movs	r3, #2
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7ff feb7 	bl	8006c38 <xQueueGenericCreateStatic>
 8006eca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
	}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b086      	sub	sp, #24
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	613b      	str	r3, [r7, #16]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d90a      	bls.n	8006f26 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60fb      	str	r3, [r7, #12]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006f26:	2202      	movs	r2, #2
 8006f28:	2100      	movs	r1, #0
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff fefc 	bl	8006d28 <xQueueGenericCreate>
 8006f30:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006f3e:	697b      	ldr	r3, [r7, #20]
	}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08e      	sub	sp, #56	; 0x38
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f56:	2300      	movs	r3, #0
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <xQueueGenericSend+0x32>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <xQueueGenericSend+0x40>
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <xQueueGenericSend+0x44>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <xQueueGenericSend+0x46>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <xQueueGenericSend+0x60>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d103      	bne.n	8006fb6 <xQueueGenericSend+0x6e>
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <xQueueGenericSend+0x72>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e000      	b.n	8006fbc <xQueueGenericSend+0x74>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10a      	bne.n	8006fd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	623b      	str	r3, [r7, #32]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fd6:	f001 fd95 	bl	8008b04 <xTaskGetSchedulerState>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d102      	bne.n	8006fe6 <xQueueGenericSend+0x9e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <xQueueGenericSend+0xa2>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e000      	b.n	8006fec <xQueueGenericSend+0xa4>
 8006fea:	2300      	movs	r3, #0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10a      	bne.n	8007006 <xQueueGenericSend+0xbe>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	61fb      	str	r3, [r7, #28]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007006:	f002 fc95 	bl	8009934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007012:	429a      	cmp	r2, r3
 8007014:	d302      	bcc.n	800701c <xQueueGenericSend+0xd4>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d129      	bne.n	8007070 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007022:	f000 fc3b 	bl	800789c <prvCopyDataToQueue>
 8007026:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	2b00      	cmp	r3, #0
 800702e:	d010      	beq.n	8007052 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	3324      	adds	r3, #36	; 0x24
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fba5 	bl	8008784 <xTaskRemoveFromEventList>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d013      	beq.n	8007068 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007040:	4b3f      	ldr	r3, [pc, #252]	; (8007140 <xQueueGenericSend+0x1f8>)
 8007042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	e00a      	b.n	8007068 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007058:	4b39      	ldr	r3, [pc, #228]	; (8007140 <xQueueGenericSend+0x1f8>)
 800705a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007068:	f002 fc94 	bl	8009994 <vPortExitCritical>
				return pdPASS;
 800706c:	2301      	movs	r3, #1
 800706e:	e063      	b.n	8007138 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d103      	bne.n	800707e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007076:	f002 fc8d 	bl	8009994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800707a:	2300      	movs	r3, #0
 800707c:	e05c      	b.n	8007138 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007084:	f107 0314 	add.w	r3, r7, #20
 8007088:	4618      	mov	r0, r3
 800708a:	f001 fbdd 	bl	8008848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800708e:	2301      	movs	r3, #1
 8007090:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007092:	f002 fc7f 	bl	8009994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007096:	f001 f951 	bl	800833c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800709a:	f002 fc4b 	bl	8009934 <vPortEnterCritical>
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070a4:	b25b      	sxtb	r3, r3
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070aa:	d103      	bne.n	80070b4 <xQueueGenericSend+0x16c>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070ba:	b25b      	sxtb	r3, r3
 80070bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c0:	d103      	bne.n	80070ca <xQueueGenericSend+0x182>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070ca:	f002 fc63 	bl	8009994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070ce:	1d3a      	adds	r2, r7, #4
 80070d0:	f107 0314 	add.w	r3, r7, #20
 80070d4:	4611      	mov	r1, r2
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 fbcc 	bl	8008874 <xTaskCheckForTimeOut>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d124      	bne.n	800712c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070e4:	f000 fcd2 	bl	8007a8c <prvIsQueueFull>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d018      	beq.n	8007120 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	3310      	adds	r3, #16
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4611      	mov	r1, r2
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 faf4 	bl	80086e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070fe:	f000 fc5d 	bl	80079bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007102:	f001 f929 	bl	8008358 <xTaskResumeAll>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	f47f af7c 	bne.w	8007006 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800710e:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <xQueueGenericSend+0x1f8>)
 8007110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	e772      	b.n	8007006 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007122:	f000 fc4b 	bl	80079bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007126:	f001 f917 	bl	8008358 <xTaskResumeAll>
 800712a:	e76c      	b.n	8007006 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800712c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800712e:	f000 fc45 	bl	80079bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007132:	f001 f911 	bl	8008358 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007136:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007138:	4618      	mov	r0, r3
 800713a:	3738      	adds	r7, #56	; 0x38
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	e000ed04 	.word	0xe000ed04

08007144 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b090      	sub	sp, #64	; 0x40
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10a      	bne.n	8007172 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800716e:	bf00      	nop
 8007170:	e7fe      	b.n	8007170 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d103      	bne.n	8007180 <xQueueGenericSendFromISR+0x3c>
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <xQueueGenericSendFromISR+0x40>
 8007180:	2301      	movs	r3, #1
 8007182:	e000      	b.n	8007186 <xQueueGenericSendFromISR+0x42>
 8007184:	2300      	movs	r3, #0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10a      	bne.n	80071a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d103      	bne.n	80071ae <xQueueGenericSendFromISR+0x6a>
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <xQueueGenericSendFromISR+0x6e>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e000      	b.n	80071b4 <xQueueGenericSendFromISR+0x70>
 80071b2:	2300      	movs	r3, #0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	623b      	str	r3, [r7, #32]
}
 80071ca:	bf00      	nop
 80071cc:	e7fe      	b.n	80071cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071ce:	f002 fc93 	bl	8009af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80071d2:	f3ef 8211 	mrs	r2, BASEPRI
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	61fa      	str	r2, [r7, #28]
 80071e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80071ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d302      	bcc.n	8007200 <xQueueGenericSendFromISR+0xbc>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d12f      	bne.n	8007260 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007216:	f000 fb41 	bl	800789c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800721a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800721e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007222:	d112      	bne.n	800724a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	2b00      	cmp	r3, #0
 800722a:	d016      	beq.n	800725a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	3324      	adds	r3, #36	; 0x24
 8007230:	4618      	mov	r0, r3
 8007232:	f001 faa7 	bl	8008784 <xTaskRemoveFromEventList>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00e      	beq.n	800725a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00b      	beq.n	800725a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	e007      	b.n	800725a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800724a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800724e:	3301      	adds	r3, #1
 8007250:	b2db      	uxtb	r3, r3
 8007252:	b25a      	sxtb	r2, r3
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800725a:	2301      	movs	r3, #1
 800725c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800725e:	e001      	b.n	8007264 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007260:	2300      	movs	r3, #0
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007266:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800726e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007272:	4618      	mov	r0, r3
 8007274:	3740      	adds	r7, #64	; 0x40
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b08e      	sub	sp, #56	; 0x38
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	623b      	str	r3, [r7, #32]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	61fb      	str	r3, [r7, #28]
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <xQueueGiveFromISR+0x58>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <xQueueGiveFromISR+0x5c>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <xQueueGiveFromISR+0x5e>
 80072d6:	2300      	movs	r3, #0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	61bb      	str	r3, [r7, #24]
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072f2:	f002 fc01 	bl	8009af8 <vPortValidateInterruptPriority>
	__asm volatile
 80072f6:	f3ef 8211 	mrs	r2, BASEPRI
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	617a      	str	r2, [r7, #20]
 800730c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800730e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007310:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800731e:	429a      	cmp	r2, r3
 8007320:	d22b      	bcs.n	800737a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007334:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733c:	d112      	bne.n	8007364 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	2b00      	cmp	r3, #0
 8007344:	d016      	beq.n	8007374 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	3324      	adds	r3, #36	; 0x24
 800734a:	4618      	mov	r0, r3
 800734c:	f001 fa1a 	bl	8008784 <xTaskRemoveFromEventList>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00e      	beq.n	8007374 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2201      	movs	r2, #1
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	e007      	b.n	8007374 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007368:	3301      	adds	r3, #1
 800736a:	b2db      	uxtb	r3, r3
 800736c:	b25a      	sxtb	r2, r3
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007374:	2301      	movs	r3, #1
 8007376:	637b      	str	r3, [r7, #52]	; 0x34
 8007378:	e001      	b.n	800737e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800737a:	2300      	movs	r3, #0
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
 800737e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007380:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f383 8811 	msr	BASEPRI, r3
}
 8007388:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800738c:	4618      	mov	r0, r3
 800738e:	3738      	adds	r7, #56	; 0x38
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08c      	sub	sp, #48	; 0x30
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <xQueueReceive+0x30>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	623b      	str	r3, [r7, #32]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <xQueueReceive+0x3e>
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <xQueueReceive+0x42>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <xQueueReceive+0x44>
 80073d6:	2300      	movs	r3, #0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xQueueReceive+0x5e>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	61fb      	str	r3, [r7, #28]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073f2:	f001 fb87 	bl	8008b04 <xTaskGetSchedulerState>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <xQueueReceive+0x6e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <xQueueReceive+0x72>
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <xQueueReceive+0x74>
 8007406:	2300      	movs	r3, #0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <xQueueReceive+0x8e>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	61bb      	str	r3, [r7, #24]
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007422:	f002 fa87 	bl	8009934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	2b00      	cmp	r3, #0
 8007430:	d01f      	beq.n	8007472 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007436:	f000 fa9b 	bl	8007970 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	1e5a      	subs	r2, r3, #1
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00f      	beq.n	800746a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	3310      	adds	r3, #16
 800744e:	4618      	mov	r0, r3
 8007450:	f001 f998 	bl	8008784 <xTaskRemoveFromEventList>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d007      	beq.n	800746a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800745a:	4b3d      	ldr	r3, [pc, #244]	; (8007550 <xQueueReceive+0x1bc>)
 800745c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800746a:	f002 fa93 	bl	8009994 <vPortExitCritical>
				return pdPASS;
 800746e:	2301      	movs	r3, #1
 8007470:	e069      	b.n	8007546 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d103      	bne.n	8007480 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007478:	f002 fa8c 	bl	8009994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800747c:	2300      	movs	r3, #0
 800747e:	e062      	b.n	8007546 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d106      	bne.n	8007494 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007486:	f107 0310 	add.w	r3, r7, #16
 800748a:	4618      	mov	r0, r3
 800748c:	f001 f9dc 	bl	8008848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007490:	2301      	movs	r3, #1
 8007492:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007494:	f002 fa7e 	bl	8009994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007498:	f000 ff50 	bl	800833c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800749c:	f002 fa4a 	bl	8009934 <vPortEnterCritical>
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a6:	b25b      	sxtb	r3, r3
 80074a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ac:	d103      	bne.n	80074b6 <xQueueReceive+0x122>
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074bc:	b25b      	sxtb	r3, r3
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c2:	d103      	bne.n	80074cc <xQueueReceive+0x138>
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074cc:	f002 fa62 	bl	8009994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074d0:	1d3a      	adds	r2, r7, #4
 80074d2:	f107 0310 	add.w	r3, r7, #16
 80074d6:	4611      	mov	r1, r2
 80074d8:	4618      	mov	r0, r3
 80074da:	f001 f9cb 	bl	8008874 <xTaskCheckForTimeOut>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d123      	bne.n	800752c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e6:	f000 fabb 	bl	8007a60 <prvIsQueueEmpty>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d017      	beq.n	8007520 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	3324      	adds	r3, #36	; 0x24
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	4611      	mov	r1, r2
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 f8f3 	bl	80086e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007500:	f000 fa5c 	bl	80079bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007504:	f000 ff28 	bl	8008358 <xTaskResumeAll>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d189      	bne.n	8007422 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800750e:	4b10      	ldr	r3, [pc, #64]	; (8007550 <xQueueReceive+0x1bc>)
 8007510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	e780      	b.n	8007422 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007522:	f000 fa4b 	bl	80079bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007526:	f000 ff17 	bl	8008358 <xTaskResumeAll>
 800752a:	e77a      	b.n	8007422 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800752c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800752e:	f000 fa45 	bl	80079bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007532:	f000 ff11 	bl	8008358 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007538:	f000 fa92 	bl	8007a60 <prvIsQueueEmpty>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	f43f af6f 	beq.w	8007422 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007544:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007546:	4618      	mov	r0, r3
 8007548:	3730      	adds	r7, #48	; 0x30
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08e      	sub	sp, #56	; 0x38
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007566:	2300      	movs	r3, #0
 8007568:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	623b      	str	r3, [r7, #32]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	61fb      	str	r3, [r7, #28]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075a4:	f001 faae 	bl	8008b04 <xTaskGetSchedulerState>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <xQueueSemaphoreTake+0x60>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <xQueueSemaphoreTake+0x64>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <xQueueSemaphoreTake+0x66>
 80075b8:	2300      	movs	r3, #0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	61bb      	str	r3, [r7, #24]
}
 80075d0:	bf00      	nop
 80075d2:	e7fe      	b.n	80075d2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075d4:	f002 f9ae 	bl	8009934 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d024      	beq.n	800762e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	1e5a      	subs	r2, r3, #1
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d104      	bne.n	80075fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80075f4:	f001 fc2e 	bl	8008e54 <pvTaskIncrementMutexHeldCount>
 80075f8:	4602      	mov	r2, r0
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00f      	beq.n	8007626 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	3310      	adds	r3, #16
 800760a:	4618      	mov	r0, r3
 800760c:	f001 f8ba 	bl	8008784 <xTaskRemoveFromEventList>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007616:	4b54      	ldr	r3, [pc, #336]	; (8007768 <xQueueSemaphoreTake+0x214>)
 8007618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007626:	f002 f9b5 	bl	8009994 <vPortExitCritical>
				return pdPASS;
 800762a:	2301      	movs	r3, #1
 800762c:	e097      	b.n	800775e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d111      	bne.n	8007658 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	617b      	str	r3, [r7, #20]
}
 800764c:	bf00      	nop
 800764e:	e7fe      	b.n	800764e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007650:	f002 f9a0 	bl	8009994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007654:	2300      	movs	r3, #0
 8007656:	e082      	b.n	800775e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800765e:	f107 030c 	add.w	r3, r7, #12
 8007662:	4618      	mov	r0, r3
 8007664:	f001 f8f0 	bl	8008848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800766c:	f002 f992 	bl	8009994 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007670:	f000 fe64 	bl	800833c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007674:	f002 f95e 	bl	8009934 <vPortEnterCritical>
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800767e:	b25b      	sxtb	r3, r3
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007684:	d103      	bne.n	800768e <xQueueSemaphoreTake+0x13a>
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007694:	b25b      	sxtb	r3, r3
 8007696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769a:	d103      	bne.n	80076a4 <xQueueSemaphoreTake+0x150>
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076a4:	f002 f976 	bl	8009994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076a8:	463a      	mov	r2, r7
 80076aa:	f107 030c 	add.w	r3, r7, #12
 80076ae:	4611      	mov	r1, r2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 f8df 	bl	8008874 <xTaskCheckForTimeOut>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d132      	bne.n	8007722 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076be:	f000 f9cf 	bl	8007a60 <prvIsQueueEmpty>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d026      	beq.n	8007716 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d109      	bne.n	80076e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80076d0:	f002 f930 	bl	8009934 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 fa31 	bl	8008b40 <xTaskPriorityInherit>
 80076de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80076e0:	f002 f958 	bl	8009994 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e6:	3324      	adds	r3, #36	; 0x24
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	4611      	mov	r1, r2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fff9 	bl	80086e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076f4:	f000 f962 	bl	80079bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076f8:	f000 fe2e 	bl	8008358 <xTaskResumeAll>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f47f af68 	bne.w	80075d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007704:	4b18      	ldr	r3, [pc, #96]	; (8007768 <xQueueSemaphoreTake+0x214>)
 8007706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	e75e      	b.n	80075d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007718:	f000 f950 	bl	80079bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800771c:	f000 fe1c 	bl	8008358 <xTaskResumeAll>
 8007720:	e758      	b.n	80075d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007724:	f000 f94a 	bl	80079bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007728:	f000 fe16 	bl	8008358 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800772c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800772e:	f000 f997 	bl	8007a60 <prvIsQueueEmpty>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	f43f af4d 	beq.w	80075d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00d      	beq.n	800775c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007740:	f002 f8f8 	bl	8009934 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007746:	f000 f891 	bl	800786c <prvGetDisinheritPriorityAfterTimeout>
 800774a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007752:	4618      	mov	r0, r3
 8007754:	f001 faf0 	bl	8008d38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007758:	f002 f91c 	bl	8009994 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800775c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800775e:	4618      	mov	r0, r3
 8007760:	3738      	adds	r7, #56	; 0x38
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08e      	sub	sp, #56	; 0x38
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10a      	bne.n	8007798 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	623b      	str	r3, [r7, #32]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d103      	bne.n	80077a6 <xQueueReceiveFromISR+0x3a>
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <xQueueReceiveFromISR+0x3e>
 80077a6:	2301      	movs	r3, #1
 80077a8:	e000      	b.n	80077ac <xQueueReceiveFromISR+0x40>
 80077aa:	2300      	movs	r3, #0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10a      	bne.n	80077c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	61fb      	str	r3, [r7, #28]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077c6:	f002 f997 	bl	8009af8 <vPortValidateInterruptPriority>
	__asm volatile
 80077ca:	f3ef 8211 	mrs	r2, BASEPRI
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	61ba      	str	r2, [r7, #24]
 80077e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80077e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d02f      	beq.n	8007852 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007800:	f000 f8b6 	bl	8007970 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	1e5a      	subs	r2, r3, #1
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800780c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007814:	d112      	bne.n	800783c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d016      	beq.n	800784c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	3310      	adds	r3, #16
 8007822:	4618      	mov	r0, r3
 8007824:	f000 ffae 	bl	8008784 <xTaskRemoveFromEventList>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00e      	beq.n	800784c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	e007      	b.n	800784c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800783c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007840:	3301      	adds	r3, #1
 8007842:	b2db      	uxtb	r3, r3
 8007844:	b25a      	sxtb	r2, r3
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800784c:	2301      	movs	r3, #1
 800784e:	637b      	str	r3, [r7, #52]	; 0x34
 8007850:	e001      	b.n	8007856 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007852:	2300      	movs	r3, #0
 8007854:	637b      	str	r3, [r7, #52]	; 0x34
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	613b      	str	r3, [r7, #16]
	__asm volatile
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f383 8811 	msr	BASEPRI, r3
}
 8007860:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007864:	4618      	mov	r0, r3
 8007866:	3738      	adds	r7, #56	; 0x38
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d006      	beq.n	800788a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f1c3 0307 	rsb	r3, r3, #7
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	e001      	b.n	800788e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800788e:	68fb      	ldr	r3, [r7, #12]
	}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10d      	bne.n	80078d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d14d      	bne.n	800795e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 f9b0 	bl	8008c2c <xTaskPriorityDisinherit>
 80078cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	609a      	str	r2, [r3, #8]
 80078d4:	e043      	b.n	800795e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d119      	bne.n	8007910 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6858      	ldr	r0, [r3, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	461a      	mov	r2, r3
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	f007 fa86 	bl	800edf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f4:	441a      	add	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	429a      	cmp	r2, r3
 8007904:	d32b      	bcc.n	800795e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	605a      	str	r2, [r3, #4]
 800790e:	e026      	b.n	800795e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68d8      	ldr	r0, [r3, #12]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007918:	461a      	mov	r2, r3
 800791a:	68b9      	ldr	r1, [r7, #8]
 800791c:	f007 fa6c 	bl	800edf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	425b      	negs	r3, r3
 800792a:	441a      	add	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d207      	bcs.n	800794c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007944:	425b      	negs	r3, r3
 8007946:	441a      	add	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b02      	cmp	r3, #2
 8007950:	d105      	bne.n	800795e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	3b01      	subs	r3, #1
 800795c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007966:	697b      	ldr	r3, [r7, #20]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	2b00      	cmp	r3, #0
 8007980:	d018      	beq.n	80079b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	441a      	add	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	429a      	cmp	r2, r3
 800799a:	d303      	bcc.n	80079a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68d9      	ldr	r1, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ac:	461a      	mov	r2, r3
 80079ae:	6838      	ldr	r0, [r7, #0]
 80079b0:	f007 fa22 	bl	800edf8 <memcpy>
	}
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80079c4:	f001 ffb6 	bl	8009934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079d0:	e011      	b.n	80079f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d012      	beq.n	8007a00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3324      	adds	r3, #36	; 0x24
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fed0 	bl	8008784 <xTaskRemoveFromEventList>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079ea:	f000 ffa5 	bl	8008938 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	dce9      	bgt.n	80079d2 <prvUnlockQueue+0x16>
 80079fe:	e000      	b.n	8007a02 <prvUnlockQueue+0x46>
					break;
 8007a00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	22ff      	movs	r2, #255	; 0xff
 8007a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a0a:	f001 ffc3 	bl	8009994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a0e:	f001 ff91 	bl	8009934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a1a:	e011      	b.n	8007a40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d012      	beq.n	8007a4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3310      	adds	r3, #16
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 feab 	bl	8008784 <xTaskRemoveFromEventList>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a34:	f000 ff80 	bl	8008938 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	dce9      	bgt.n	8007a1c <prvUnlockQueue+0x60>
 8007a48:	e000      	b.n	8007a4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	22ff      	movs	r2, #255	; 0xff
 8007a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a54:	f001 ff9e 	bl	8009994 <vPortExitCritical>
}
 8007a58:	bf00      	nop
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a68:	f001 ff64 	bl	8009934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d102      	bne.n	8007a7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e001      	b.n	8007a7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a7e:	f001 ff89 	bl	8009994 <vPortExitCritical>

	return xReturn;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a94:	f001 ff4e 	bl	8009934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d102      	bne.n	8007aaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	e001      	b.n	8007aae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007aae:	f001 ff71 	bl	8009994 <vPortExitCritical>

	return xReturn;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60fb      	str	r3, [r7, #12]
 8007aca:	e014      	b.n	8007af6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007acc:	4a0f      	ldr	r2, [pc, #60]	; (8007b0c <vQueueAddToRegistry+0x50>)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10b      	bne.n	8007af0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ad8:	490c      	ldr	r1, [pc, #48]	; (8007b0c <vQueueAddToRegistry+0x50>)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ae2:	4a0a      	ldr	r2, [pc, #40]	; (8007b0c <vQueueAddToRegistry+0x50>)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	4413      	add	r3, r2
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007aee:	e006      	b.n	8007afe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3301      	adds	r3, #1
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b07      	cmp	r3, #7
 8007afa:	d9e7      	bls.n	8007acc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007afc:	bf00      	nop
 8007afe:	bf00      	nop
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20016ecc 	.word	0x20016ecc

08007b10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b20:	f001 ff08 	bl	8009934 <vPortEnterCritical>
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b2a:	b25b      	sxtb	r3, r3
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d103      	bne.n	8007b3a <vQueueWaitForMessageRestricted+0x2a>
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b40:	b25b      	sxtb	r3, r3
 8007b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b46:	d103      	bne.n	8007b50 <vQueueWaitForMessageRestricted+0x40>
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b50:	f001 ff20 	bl	8009994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d106      	bne.n	8007b6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	3324      	adds	r3, #36	; 0x24
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	68b9      	ldr	r1, [r7, #8]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 fde1 	bl	800872c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b6a:	6978      	ldr	r0, [r7, #20]
 8007b6c:	f7ff ff26 	bl	80079bc <prvUnlockQueue>
	}
 8007b70:	bf00      	nop
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08e      	sub	sp, #56	; 0x38
 8007b7c:	af04      	add	r7, sp, #16
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	623b      	str	r3, [r7, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <xTaskCreateStatic+0x46>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	61fb      	str	r3, [r7, #28]
}
 8007bba:	bf00      	nop
 8007bbc:	e7fe      	b.n	8007bbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007bbe:	23b4      	movs	r3, #180	; 0xb4
 8007bc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2bb4      	cmp	r3, #180	; 0xb4
 8007bc6:	d00a      	beq.n	8007bde <xTaskCreateStatic+0x66>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	61bb      	str	r3, [r7, #24]
}
 8007bda:	bf00      	nop
 8007bdc:	e7fe      	b.n	8007bdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01e      	beq.n	8007c24 <xTaskCreateStatic+0xac>
 8007be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01b      	beq.n	8007c24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9303      	str	r3, [sp, #12]
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	9302      	str	r3, [sp, #8]
 8007c06:	f107 0314 	add.w	r3, r7, #20
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f850 	bl	8007cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c1e:	f000 f8eb 	bl	8007df8 <prvAddNewTaskToReadyList>
 8007c22:	e001      	b.n	8007c28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c28:	697b      	ldr	r3, [r7, #20]
	}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3728      	adds	r7, #40	; 0x28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b08c      	sub	sp, #48	; 0x30
 8007c36:	af04      	add	r7, sp, #16
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	603b      	str	r3, [r7, #0]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 ff96 	bl	8009b78 <pvPortMalloc>
 8007c4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00e      	beq.n	8007c72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c54:	20b4      	movs	r0, #180	; 0xb4
 8007c56:	f001 ff8f 	bl	8009b78 <pvPortMalloc>
 8007c5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30
 8007c68:	e005      	b.n	8007c76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c6a:	6978      	ldr	r0, [r7, #20]
 8007c6c:	f002 f850 	bl	8009d10 <vPortFree>
 8007c70:	e001      	b.n	8007c76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d017      	beq.n	8007cac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c84:	88fa      	ldrh	r2, [r7, #6]
 8007c86:	2300      	movs	r3, #0
 8007c88:	9303      	str	r3, [sp, #12]
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	9302      	str	r3, [sp, #8]
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	9301      	str	r3, [sp, #4]
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68b9      	ldr	r1, [r7, #8]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 f80e 	bl	8007cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ca0:	69f8      	ldr	r0, [r7, #28]
 8007ca2:	f000 f8a9 	bl	8007df8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	e002      	b.n	8007cb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cac:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cb2:	69bb      	ldr	r3, [r7, #24]
	}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3720      	adds	r7, #32
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	f023 0307 	bic.w	r3, r3, #7
 8007ce2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	617b      	str	r3, [r7, #20]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d01f      	beq.n	8007d4a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	61fb      	str	r3, [r7, #28]
 8007d0e:	e012      	b.n	8007d36 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	4413      	add	r3, r2
 8007d16:	7819      	ldrb	r1, [r3, #0]
 8007d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	3334      	adds	r3, #52	; 0x34
 8007d20:	460a      	mov	r2, r1
 8007d22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	4413      	add	r3, r2
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d006      	beq.n	8007d3e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	3301      	adds	r3, #1
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	2b0f      	cmp	r3, #15
 8007d3a:	d9e9      	bls.n	8007d10 <prvInitialiseNewTask+0x54>
 8007d3c:	e000      	b.n	8007d40 <prvInitialiseNewTask+0x84>
			{
				break;
 8007d3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d48:	e003      	b.n	8007d52 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	2b06      	cmp	r3, #6
 8007d56:	d901      	bls.n	8007d5c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d58:	2306      	movs	r3, #6
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d66:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	3304      	adds	r3, #4
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fe64 	bl	8006a40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	3318      	adds	r3, #24
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fe5f 	bl	8006a40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	f1c3 0207 	rsb	r2, r3, #7
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	334c      	adds	r3, #76	; 0x4c
 8007dac:	2260      	movs	r2, #96	; 0x60
 8007dae:	2100      	movs	r1, #0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f007 f82f 	bl	800ee14 <memset>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	4a0c      	ldr	r2, [pc, #48]	; (8007dec <prvInitialiseNewTask+0x130>)
 8007dba:	651a      	str	r2, [r3, #80]	; 0x50
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	4a0c      	ldr	r2, [pc, #48]	; (8007df0 <prvInitialiseNewTask+0x134>)
 8007dc0:	655a      	str	r2, [r3, #84]	; 0x54
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	4a0b      	ldr	r2, [pc, #44]	; (8007df4 <prvInitialiseNewTask+0x138>)
 8007dc6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	68f9      	ldr	r1, [r7, #12]
 8007dcc:	69b8      	ldr	r0, [r7, #24]
 8007dce:	f001 fc87 	bl	80096e0 <pxPortInitialiseStack>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de4:	bf00      	nop
 8007de6:	3720      	adds	r7, #32
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	0800fce0 	.word	0x0800fce0
 8007df0:	0800fd00 	.word	0x0800fd00
 8007df4:	0800fcc0 	.word	0x0800fcc0

08007df8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e00:	f001 fd98 	bl	8009934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e04:	4b2a      	ldr	r3, [pc, #168]	; (8007eb0 <prvAddNewTaskToReadyList+0xb8>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	4a29      	ldr	r2, [pc, #164]	; (8007eb0 <prvAddNewTaskToReadyList+0xb8>)
 8007e0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e0e:	4b29      	ldr	r3, [pc, #164]	; (8007eb4 <prvAddNewTaskToReadyList+0xbc>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e16:	4a27      	ldr	r2, [pc, #156]	; (8007eb4 <prvAddNewTaskToReadyList+0xbc>)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e1c:	4b24      	ldr	r3, [pc, #144]	; (8007eb0 <prvAddNewTaskToReadyList+0xb8>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d110      	bne.n	8007e46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e24:	f000 fdac 	bl	8008980 <prvInitialiseTaskLists>
 8007e28:	e00d      	b.n	8007e46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e2a:	4b23      	ldr	r3, [pc, #140]	; (8007eb8 <prvAddNewTaskToReadyList+0xc0>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d109      	bne.n	8007e46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e32:	4b20      	ldr	r3, [pc, #128]	; (8007eb4 <prvAddNewTaskToReadyList+0xbc>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d802      	bhi.n	8007e46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e40:	4a1c      	ldr	r2, [pc, #112]	; (8007eb4 <prvAddNewTaskToReadyList+0xbc>)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e46:	4b1d      	ldr	r3, [pc, #116]	; (8007ebc <prvAddNewTaskToReadyList+0xc4>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	4a1b      	ldr	r2, [pc, #108]	; (8007ebc <prvAddNewTaskToReadyList+0xc4>)
 8007e4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	2201      	movs	r2, #1
 8007e56:	409a      	lsls	r2, r3
 8007e58:	4b19      	ldr	r3, [pc, #100]	; (8007ec0 <prvAddNewTaskToReadyList+0xc8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	4a18      	ldr	r2, [pc, #96]	; (8007ec0 <prvAddNewTaskToReadyList+0xc8>)
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e66:	4613      	mov	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4a15      	ldr	r2, [pc, #84]	; (8007ec4 <prvAddNewTaskToReadyList+0xcc>)
 8007e70:	441a      	add	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3304      	adds	r3, #4
 8007e76:	4619      	mov	r1, r3
 8007e78:	4610      	mov	r0, r2
 8007e7a:	f7fe fdee 	bl	8006a5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e7e:	f001 fd89 	bl	8009994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e82:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <prvAddNewTaskToReadyList+0xc0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00e      	beq.n	8007ea8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e8a:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <prvAddNewTaskToReadyList+0xbc>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d207      	bcs.n	8007ea8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e98:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <prvAddNewTaskToReadyList+0xd0>)
 8007e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20000914 	.word	0x20000914
 8007eb4:	20000814 	.word	0x20000814
 8007eb8:	20000920 	.word	0x20000920
 8007ebc:	20000930 	.word	0x20000930
 8007ec0:	2000091c 	.word	0x2000091c
 8007ec4:	20000818 	.word	0x20000818
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d017      	beq.n	8007f0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ede:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <vTaskDelay+0x60>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <vTaskDelay+0x30>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	60bb      	str	r3, [r7, #8]
}
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007efc:	f000 fa1e 	bl	800833c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f00:	2100      	movs	r1, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 ffba 	bl	8008e7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f08:	f000 fa26 	bl	8008358 <xTaskResumeAll>
 8007f0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d107      	bne.n	8007f24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007f14:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <vTaskDelay+0x64>)
 8007f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	2000093c 	.word	0x2000093c
 8007f30:	e000ed04 	.word	0xe000ed04

08007f34 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007f3c:	f001 fcfa 	bl	8009934 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <vTaskSuspend+0x18>
 8007f46:	4b3c      	ldr	r3, [pc, #240]	; (8008038 <vTaskSuspend+0x104>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	e000      	b.n	8007f4e <vTaskSuspend+0x1a>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3304      	adds	r3, #4
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fe fddd 	bl	8006b14 <uxListRemove>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d115      	bne.n	8007f8c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f64:	4935      	ldr	r1, [pc, #212]	; (800803c <vTaskSuspend+0x108>)
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <vTaskSuspend+0x58>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	43da      	mvns	r2, r3
 8007f82:	4b2f      	ldr	r3, [pc, #188]	; (8008040 <vTaskSuspend+0x10c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4013      	ands	r3, r2
 8007f88:	4a2d      	ldr	r2, [pc, #180]	; (8008040 <vTaskSuspend+0x10c>)
 8007f8a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d004      	beq.n	8007f9e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3318      	adds	r3, #24
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe fdbb 	bl	8006b14 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4827      	ldr	r0, [pc, #156]	; (8008044 <vTaskSuspend+0x110>)
 8007fa6:	f7fe fd58 	bl	8006a5a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d103      	bne.n	8007fbe <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007fbe:	f001 fce9 	bl	8009994 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007fc2:	4b21      	ldr	r3, [pc, #132]	; (8008048 <vTaskSuspend+0x114>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d005      	beq.n	8007fd6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007fca:	f001 fcb3 	bl	8009934 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007fce:	f000 fd79 	bl	8008ac4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007fd2:	f001 fcdf 	bl	8009994 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007fd6:	4b18      	ldr	r3, [pc, #96]	; (8008038 <vTaskSuspend+0x104>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d127      	bne.n	8008030 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007fe0:	4b19      	ldr	r3, [pc, #100]	; (8008048 <vTaskSuspend+0x114>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d017      	beq.n	8008018 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007fe8:	4b18      	ldr	r3, [pc, #96]	; (800804c <vTaskSuspend+0x118>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <vTaskSuspend+0xd2>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	60bb      	str	r3, [r7, #8]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8008006:	4b12      	ldr	r3, [pc, #72]	; (8008050 <vTaskSuspend+0x11c>)
 8008008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008016:	e00b      	b.n	8008030 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008018:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <vTaskSuspend+0x110>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	4b0d      	ldr	r3, [pc, #52]	; (8008054 <vTaskSuspend+0x120>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d103      	bne.n	800802c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8008024:	4b04      	ldr	r3, [pc, #16]	; (8008038 <vTaskSuspend+0x104>)
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
	}
 800802a:	e001      	b.n	8008030 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800802c:	f000 faf8 	bl	8008620 <vTaskSwitchContext>
	}
 8008030:	bf00      	nop
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	20000814 	.word	0x20000814
 800803c:	20000818 	.word	0x20000818
 8008040:	2000091c 	.word	0x2000091c
 8008044:	20000900 	.word	0x20000900
 8008048:	20000920 	.word	0x20000920
 800804c:	2000093c 	.word	0x2000093c
 8008050:	e000ed04 	.word	0xe000ed04
 8008054:	20000914 	.word	0x20000914

08008058 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008060:	2300      	movs	r3, #0
 8008062:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	60fb      	str	r3, [r7, #12]
}
 8008080:	bf00      	nop
 8008082:	e7fe      	b.n	8008082 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	4a0a      	ldr	r2, [pc, #40]	; (80080b4 <prvTaskIsTaskSuspended+0x5c>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d10a      	bne.n	80080a4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	4a09      	ldr	r2, [pc, #36]	; (80080b8 <prvTaskIsTaskSuspended+0x60>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d005      	beq.n	80080a4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80080a0:	2301      	movs	r3, #1
 80080a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080a4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80080a6:	4618      	mov	r0, r3
 80080a8:	371c      	adds	r7, #28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20000900 	.word	0x20000900
 80080b8:	200008d4 	.word	0x200008d4

080080bc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <vTaskResume+0x28>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	60bb      	str	r3, [r7, #8]
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80080e4:	4b20      	ldr	r3, [pc, #128]	; (8008168 <vTaskResume+0xac>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d037      	beq.n	800815e <vTaskResume+0xa2>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d034      	beq.n	800815e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80080f4:	f001 fc1e 	bl	8009934 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7ff ffad 	bl	8008058 <prvTaskIsTaskSuspended>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d02a      	beq.n	800815a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3304      	adds	r3, #4
 8008108:	4618      	mov	r0, r3
 800810a:	f7fe fd03 	bl	8006b14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008112:	2201      	movs	r2, #1
 8008114:	409a      	lsls	r2, r3
 8008116:	4b15      	ldr	r3, [pc, #84]	; (800816c <vTaskResume+0xb0>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4313      	orrs	r3, r2
 800811c:	4a13      	ldr	r2, [pc, #76]	; (800816c <vTaskResume+0xb0>)
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4a10      	ldr	r2, [pc, #64]	; (8008170 <vTaskResume+0xb4>)
 800812e:	441a      	add	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3304      	adds	r3, #4
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f7fe fc8f 	bl	8006a5a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008140:	4b09      	ldr	r3, [pc, #36]	; (8008168 <vTaskResume+0xac>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008146:	429a      	cmp	r2, r3
 8008148:	d307      	bcc.n	800815a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800814a:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <vTaskResume+0xb8>)
 800814c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800815a:	f001 fc1b 	bl	8009994 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800815e:	bf00      	nop
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000814 	.word	0x20000814
 800816c:	2000091c 	.word	0x2000091c
 8008170:	20000818 	.word	0x20000818
 8008174:	e000ed04 	.word	0xe000ed04

08008178 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08a      	sub	sp, #40	; 0x28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8008180:	2300      	movs	r3, #0
 8008182:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	61bb      	str	r3, [r7, #24]
}
 80081a0:	bf00      	nop
 80081a2:	e7fe      	b.n	80081a2 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081a4:	f001 fca8 	bl	8009af8 <vPortValidateInterruptPriority>
	__asm volatile
 80081a8:	f3ef 8211 	mrs	r2, BASEPRI
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	617a      	str	r2, [r7, #20]
 80081be:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80081c0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081c2:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80081c4:	6a38      	ldr	r0, [r7, #32]
 80081c6:	f7ff ff47 	bl	8008058 <prvTaskIsTaskSuspended>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d02f      	beq.n	8008230 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081d0:	4b1d      	ldr	r3, [pc, #116]	; (8008248 <xTaskResumeFromISR+0xd0>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d125      	bne.n	8008224 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081dc:	4b1b      	ldr	r3, [pc, #108]	; (800824c <xTaskResumeFromISR+0xd4>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d301      	bcc.n	80081ea <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80081e6:	2301      	movs	r3, #1
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	3304      	adds	r3, #4
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fe fc90 	bl	8006b14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	2201      	movs	r2, #1
 80081fa:	409a      	lsls	r2, r3
 80081fc:	4b14      	ldr	r3, [pc, #80]	; (8008250 <xTaskResumeFromISR+0xd8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4313      	orrs	r3, r2
 8008202:	4a13      	ldr	r2, [pc, #76]	; (8008250 <xTaskResumeFromISR+0xd8>)
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4a10      	ldr	r2, [pc, #64]	; (8008254 <xTaskResumeFromISR+0xdc>)
 8008214:	441a      	add	r2, r3
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	3304      	adds	r3, #4
 800821a:	4619      	mov	r1, r3
 800821c:	4610      	mov	r0, r2
 800821e:	f7fe fc1c 	bl	8006a5a <vListInsertEnd>
 8008222:	e005      	b.n	8008230 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	3318      	adds	r3, #24
 8008228:	4619      	mov	r1, r3
 800822a:	480b      	ldr	r0, [pc, #44]	; (8008258 <xTaskResumeFromISR+0xe0>)
 800822c:	f7fe fc15 	bl	8006a5a <vListInsertEnd>
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f383 8811 	msr	BASEPRI, r3
}
 800823a:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800823e:	4618      	mov	r0, r3
 8008240:	3728      	adds	r7, #40	; 0x28
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	2000093c 	.word	0x2000093c
 800824c:	20000814 	.word	0x20000814
 8008250:	2000091c 	.word	0x2000091c
 8008254:	20000818 	.word	0x20000818
 8008258:	200008d4 	.word	0x200008d4

0800825c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08a      	sub	sp, #40	; 0x28
 8008260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008262:	2300      	movs	r3, #0
 8008264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008266:	2300      	movs	r3, #0
 8008268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800826a:	463a      	mov	r2, r7
 800826c:	1d39      	adds	r1, r7, #4
 800826e:	f107 0308 	add.w	r3, r7, #8
 8008272:	4618      	mov	r0, r3
 8008274:	f7f8 f980 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	9202      	str	r2, [sp, #8]
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	2300      	movs	r3, #0
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	2300      	movs	r3, #0
 8008288:	460a      	mov	r2, r1
 800828a:	4924      	ldr	r1, [pc, #144]	; (800831c <vTaskStartScheduler+0xc0>)
 800828c:	4824      	ldr	r0, [pc, #144]	; (8008320 <vTaskStartScheduler+0xc4>)
 800828e:	f7ff fc73 	bl	8007b78 <xTaskCreateStatic>
 8008292:	4603      	mov	r3, r0
 8008294:	4a23      	ldr	r2, [pc, #140]	; (8008324 <vTaskStartScheduler+0xc8>)
 8008296:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008298:	4b22      	ldr	r3, [pc, #136]	; (8008324 <vTaskStartScheduler+0xc8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082a0:	2301      	movs	r3, #1
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	e001      	b.n	80082aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d102      	bne.n	80082b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80082b0:	f000 fe4a 	bl	8008f48 <xTimerCreateTimerTask>
 80082b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d11b      	bne.n	80082f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	613b      	str	r3, [r7, #16]
}
 80082ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082d0:	4b15      	ldr	r3, [pc, #84]	; (8008328 <vTaskStartScheduler+0xcc>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	334c      	adds	r3, #76	; 0x4c
 80082d6:	4a15      	ldr	r2, [pc, #84]	; (800832c <vTaskStartScheduler+0xd0>)
 80082d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082da:	4b15      	ldr	r3, [pc, #84]	; (8008330 <vTaskStartScheduler+0xd4>)
 80082dc:	f04f 32ff 	mov.w	r2, #4294967295
 80082e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082e2:	4b14      	ldr	r3, [pc, #80]	; (8008334 <vTaskStartScheduler+0xd8>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082e8:	4b13      	ldr	r3, [pc, #76]	; (8008338 <vTaskStartScheduler+0xdc>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082ee:	f001 fa7f 	bl	80097f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082f2:	e00e      	b.n	8008312 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fa:	d10a      	bne.n	8008312 <vTaskStartScheduler+0xb6>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	60fb      	str	r3, [r7, #12]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <vTaskStartScheduler+0xb4>
}
 8008312:	bf00      	nop
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	0800f88c 	.word	0x0800f88c
 8008320:	08008951 	.word	0x08008951
 8008324:	20000938 	.word	0x20000938
 8008328:	20000814 	.word	0x20000814
 800832c:	20000024 	.word	0x20000024
 8008330:	20000934 	.word	0x20000934
 8008334:	20000920 	.word	0x20000920
 8008338:	20000918 	.word	0x20000918

0800833c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008340:	4b04      	ldr	r3, [pc, #16]	; (8008354 <vTaskSuspendAll+0x18>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3301      	adds	r3, #1
 8008346:	4a03      	ldr	r2, [pc, #12]	; (8008354 <vTaskSuspendAll+0x18>)
 8008348:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800834a:	bf00      	nop
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	2000093c 	.word	0x2000093c

08008358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008362:	2300      	movs	r3, #0
 8008364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008366:	4b41      	ldr	r3, [pc, #260]	; (800846c <xTaskResumeAll+0x114>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <xTaskResumeAll+0x2c>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	603b      	str	r3, [r7, #0]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008384:	f001 fad6 	bl	8009934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008388:	4b38      	ldr	r3, [pc, #224]	; (800846c <xTaskResumeAll+0x114>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3b01      	subs	r3, #1
 800838e:	4a37      	ldr	r2, [pc, #220]	; (800846c <xTaskResumeAll+0x114>)
 8008390:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008392:	4b36      	ldr	r3, [pc, #216]	; (800846c <xTaskResumeAll+0x114>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d161      	bne.n	800845e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800839a:	4b35      	ldr	r3, [pc, #212]	; (8008470 <xTaskResumeAll+0x118>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d05d      	beq.n	800845e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083a2:	e02e      	b.n	8008402 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a4:	4b33      	ldr	r3, [pc, #204]	; (8008474 <xTaskResumeAll+0x11c>)
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3318      	adds	r3, #24
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fe fbaf 	bl	8006b14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3304      	adds	r3, #4
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe fbaa 	bl	8006b14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	2201      	movs	r2, #1
 80083c6:	409a      	lsls	r2, r3
 80083c8:	4b2b      	ldr	r3, [pc, #172]	; (8008478 <xTaskResumeAll+0x120>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	4a2a      	ldr	r2, [pc, #168]	; (8008478 <xTaskResumeAll+0x120>)
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4a27      	ldr	r2, [pc, #156]	; (800847c <xTaskResumeAll+0x124>)
 80083e0:	441a      	add	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3304      	adds	r3, #4
 80083e6:	4619      	mov	r1, r3
 80083e8:	4610      	mov	r0, r2
 80083ea:	f7fe fb36 	bl	8006a5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f2:	4b23      	ldr	r3, [pc, #140]	; (8008480 <xTaskResumeAll+0x128>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d302      	bcc.n	8008402 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80083fc:	4b21      	ldr	r3, [pc, #132]	; (8008484 <xTaskResumeAll+0x12c>)
 80083fe:	2201      	movs	r2, #1
 8008400:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008402:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <xTaskResumeAll+0x11c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1cc      	bne.n	80083a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008410:	f000 fb58 	bl	8008ac4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008414:	4b1c      	ldr	r3, [pc, #112]	; (8008488 <xTaskResumeAll+0x130>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d010      	beq.n	8008442 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008420:	f000 f846 	bl	80084b0 <xTaskIncrementTick>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800842a:	4b16      	ldr	r3, [pc, #88]	; (8008484 <xTaskResumeAll+0x12c>)
 800842c:	2201      	movs	r2, #1
 800842e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	3b01      	subs	r3, #1
 8008434:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f1      	bne.n	8008420 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800843c:	4b12      	ldr	r3, [pc, #72]	; (8008488 <xTaskResumeAll+0x130>)
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008442:	4b10      	ldr	r3, [pc, #64]	; (8008484 <xTaskResumeAll+0x12c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d009      	beq.n	800845e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800844a:	2301      	movs	r3, #1
 800844c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <xTaskResumeAll+0x134>)
 8008450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800845e:	f001 fa99 	bl	8009994 <vPortExitCritical>

	return xAlreadyYielded;
 8008462:	68bb      	ldr	r3, [r7, #8]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	2000093c 	.word	0x2000093c
 8008470:	20000914 	.word	0x20000914
 8008474:	200008d4 	.word	0x200008d4
 8008478:	2000091c 	.word	0x2000091c
 800847c:	20000818 	.word	0x20000818
 8008480:	20000814 	.word	0x20000814
 8008484:	20000928 	.word	0x20000928
 8008488:	20000924 	.word	0x20000924
 800848c:	e000ed04 	.word	0xe000ed04

08008490 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008496:	4b05      	ldr	r3, [pc, #20]	; (80084ac <xTaskGetTickCount+0x1c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800849c:	687b      	ldr	r3, [r7, #4]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	20000918 	.word	0x20000918

080084b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084b6:	2300      	movs	r3, #0
 80084b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ba:	4b4e      	ldr	r3, [pc, #312]	; (80085f4 <xTaskIncrementTick+0x144>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f040 808e 	bne.w	80085e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084c4:	4b4c      	ldr	r3, [pc, #304]	; (80085f8 <xTaskIncrementTick+0x148>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084cc:	4a4a      	ldr	r2, [pc, #296]	; (80085f8 <xTaskIncrementTick+0x148>)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d120      	bne.n	800851a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80084d8:	4b48      	ldr	r3, [pc, #288]	; (80085fc <xTaskIncrementTick+0x14c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00a      	beq.n	80084f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	603b      	str	r3, [r7, #0]
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <xTaskIncrementTick+0x46>
 80084f8:	4b40      	ldr	r3, [pc, #256]	; (80085fc <xTaskIncrementTick+0x14c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	4b40      	ldr	r3, [pc, #256]	; (8008600 <xTaskIncrementTick+0x150>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a3e      	ldr	r2, [pc, #248]	; (80085fc <xTaskIncrementTick+0x14c>)
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	4a3e      	ldr	r2, [pc, #248]	; (8008600 <xTaskIncrementTick+0x150>)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	4b3d      	ldr	r3, [pc, #244]	; (8008604 <xTaskIncrementTick+0x154>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3301      	adds	r3, #1
 8008512:	4a3c      	ldr	r2, [pc, #240]	; (8008604 <xTaskIncrementTick+0x154>)
 8008514:	6013      	str	r3, [r2, #0]
 8008516:	f000 fad5 	bl	8008ac4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800851a:	4b3b      	ldr	r3, [pc, #236]	; (8008608 <xTaskIncrementTick+0x158>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	429a      	cmp	r2, r3
 8008522:	d348      	bcc.n	80085b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008524:	4b35      	ldr	r3, [pc, #212]	; (80085fc <xTaskIncrementTick+0x14c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d104      	bne.n	8008538 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800852e:	4b36      	ldr	r3, [pc, #216]	; (8008608 <xTaskIncrementTick+0x158>)
 8008530:	f04f 32ff 	mov.w	r2, #4294967295
 8008534:	601a      	str	r2, [r3, #0]
					break;
 8008536:	e03e      	b.n	80085b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008538:	4b30      	ldr	r3, [pc, #192]	; (80085fc <xTaskIncrementTick+0x14c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	429a      	cmp	r2, r3
 800854e:	d203      	bcs.n	8008558 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008550:	4a2d      	ldr	r2, [pc, #180]	; (8008608 <xTaskIncrementTick+0x158>)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008556:	e02e      	b.n	80085b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	3304      	adds	r3, #4
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fad9 	bl	8006b14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008566:	2b00      	cmp	r3, #0
 8008568:	d004      	beq.n	8008574 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	3318      	adds	r3, #24
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fad0 	bl	8006b14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	2201      	movs	r2, #1
 800857a:	409a      	lsls	r2, r3
 800857c:	4b23      	ldr	r3, [pc, #140]	; (800860c <xTaskIncrementTick+0x15c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4313      	orrs	r3, r2
 8008582:	4a22      	ldr	r2, [pc, #136]	; (800860c <xTaskIncrementTick+0x15c>)
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <xTaskIncrementTick+0x160>)
 8008594:	441a      	add	r2, r3
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	3304      	adds	r3, #4
 800859a:	4619      	mov	r1, r3
 800859c:	4610      	mov	r0, r2
 800859e:	f7fe fa5c 	bl	8006a5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a6:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <xTaskIncrementTick+0x164>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d3b9      	bcc.n	8008524 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80085b0:	2301      	movs	r3, #1
 80085b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085b4:	e7b6      	b.n	8008524 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085b6:	4b17      	ldr	r3, [pc, #92]	; (8008614 <xTaskIncrementTick+0x164>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085bc:	4914      	ldr	r1, [pc, #80]	; (8008610 <xTaskIncrementTick+0x160>)
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d901      	bls.n	80085d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80085ce:	2301      	movs	r3, #1
 80085d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085d2:	4b11      	ldr	r3, [pc, #68]	; (8008618 <xTaskIncrementTick+0x168>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80085da:	2301      	movs	r3, #1
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	e004      	b.n	80085ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80085e0:	4b0e      	ldr	r3, [pc, #56]	; (800861c <xTaskIncrementTick+0x16c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3301      	adds	r3, #1
 80085e6:	4a0d      	ldr	r2, [pc, #52]	; (800861c <xTaskIncrementTick+0x16c>)
 80085e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80085ea:	697b      	ldr	r3, [r7, #20]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	2000093c 	.word	0x2000093c
 80085f8:	20000918 	.word	0x20000918
 80085fc:	200008cc 	.word	0x200008cc
 8008600:	200008d0 	.word	0x200008d0
 8008604:	2000092c 	.word	0x2000092c
 8008608:	20000934 	.word	0x20000934
 800860c:	2000091c 	.word	0x2000091c
 8008610:	20000818 	.word	0x20000818
 8008614:	20000814 	.word	0x20000814
 8008618:	20000928 	.word	0x20000928
 800861c:	20000924 	.word	0x20000924

08008620 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008626:	4b29      	ldr	r3, [pc, #164]	; (80086cc <vTaskSwitchContext+0xac>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800862e:	4b28      	ldr	r3, [pc, #160]	; (80086d0 <vTaskSwitchContext+0xb0>)
 8008630:	2201      	movs	r2, #1
 8008632:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008634:	e044      	b.n	80086c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008636:	4b26      	ldr	r3, [pc, #152]	; (80086d0 <vTaskSwitchContext+0xb0>)
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800863c:	4b25      	ldr	r3, [pc, #148]	; (80086d4 <vTaskSwitchContext+0xb4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	fab3 f383 	clz	r3, r3
 8008648:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800864a:	7afb      	ldrb	r3, [r7, #11]
 800864c:	f1c3 031f 	rsb	r3, r3, #31
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	4921      	ldr	r1, [pc, #132]	; (80086d8 <vTaskSwitchContext+0xb8>)
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	440b      	add	r3, r1
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	607b      	str	r3, [r7, #4]
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <vTaskSwitchContext+0x5a>
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4a14      	ldr	r2, [pc, #80]	; (80086d8 <vTaskSwitchContext+0xb8>)
 8008688:	4413      	add	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	605a      	str	r2, [r3, #4]
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	3308      	adds	r3, #8
 800869e:	429a      	cmp	r2, r3
 80086a0:	d104      	bne.n	80086ac <vTaskSwitchContext+0x8c>
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	605a      	str	r2, [r3, #4]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	4a0a      	ldr	r2, [pc, #40]	; (80086dc <vTaskSwitchContext+0xbc>)
 80086b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086b6:	4b09      	ldr	r3, [pc, #36]	; (80086dc <vTaskSwitchContext+0xbc>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	334c      	adds	r3, #76	; 0x4c
 80086bc:	4a08      	ldr	r2, [pc, #32]	; (80086e0 <vTaskSwitchContext+0xc0>)
 80086be:	6013      	str	r3, [r2, #0]
}
 80086c0:	bf00      	nop
 80086c2:	371c      	adds	r7, #28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	2000093c 	.word	0x2000093c
 80086d0:	20000928 	.word	0x20000928
 80086d4:	2000091c 	.word	0x2000091c
 80086d8:	20000818 	.word	0x20000818
 80086dc:	20000814 	.word	0x20000814
 80086e0:	20000024 	.word	0x20000024

080086e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10a      	bne.n	800870a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	60fb      	str	r3, [r7, #12]
}
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800870a:	4b07      	ldr	r3, [pc, #28]	; (8008728 <vTaskPlaceOnEventList+0x44>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3318      	adds	r3, #24
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7fe f9c5 	bl	8006aa2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008718:	2101      	movs	r1, #1
 800871a:	6838      	ldr	r0, [r7, #0]
 800871c:	f000 fbae 	bl	8008e7c <prvAddCurrentTaskToDelayedList>
}
 8008720:	bf00      	nop
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20000814 	.word	0x20000814

0800872c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10a      	bne.n	8008754 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	617b      	str	r3, [r7, #20]
}
 8008750:	bf00      	nop
 8008752:	e7fe      	b.n	8008752 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008754:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <vTaskPlaceOnEventListRestricted+0x54>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3318      	adds	r3, #24
 800875a:	4619      	mov	r1, r3
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f7fe f97c 	bl	8006a5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	68b8      	ldr	r0, [r7, #8]
 8008772:	f000 fb83 	bl	8008e7c <prvAddCurrentTaskToDelayedList>
	}
 8008776:	bf00      	nop
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000814 	.word	0x20000814

08008784 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10a      	bne.n	80087b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	60fb      	str	r3, [r7, #12]
}
 80087ac:	bf00      	nop
 80087ae:	e7fe      	b.n	80087ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	3318      	adds	r3, #24
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe f9ad 	bl	8006b14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ba:	4b1d      	ldr	r3, [pc, #116]	; (8008830 <xTaskRemoveFromEventList+0xac>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d11c      	bne.n	80087fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	3304      	adds	r3, #4
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe f9a4 	bl	8006b14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	2201      	movs	r2, #1
 80087d2:	409a      	lsls	r2, r3
 80087d4:	4b17      	ldr	r3, [pc, #92]	; (8008834 <xTaskRemoveFromEventList+0xb0>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4313      	orrs	r3, r2
 80087da:	4a16      	ldr	r2, [pc, #88]	; (8008834 <xTaskRemoveFromEventList+0xb0>)
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e2:	4613      	mov	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4a13      	ldr	r2, [pc, #76]	; (8008838 <xTaskRemoveFromEventList+0xb4>)
 80087ec:	441a      	add	r2, r3
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	3304      	adds	r3, #4
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f7fe f930 	bl	8006a5a <vListInsertEnd>
 80087fa:	e005      	b.n	8008808 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	3318      	adds	r3, #24
 8008800:	4619      	mov	r1, r3
 8008802:	480e      	ldr	r0, [pc, #56]	; (800883c <xTaskRemoveFromEventList+0xb8>)
 8008804:	f7fe f929 	bl	8006a5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880c:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <xTaskRemoveFromEventList+0xbc>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008812:	429a      	cmp	r2, r3
 8008814:	d905      	bls.n	8008822 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008816:	2301      	movs	r3, #1
 8008818:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800881a:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <xTaskRemoveFromEventList+0xc0>)
 800881c:	2201      	movs	r2, #1
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	e001      	b.n	8008826 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008826:	697b      	ldr	r3, [r7, #20]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	2000093c 	.word	0x2000093c
 8008834:	2000091c 	.word	0x2000091c
 8008838:	20000818 	.word	0x20000818
 800883c:	200008d4 	.word	0x200008d4
 8008840:	20000814 	.word	0x20000814
 8008844:	20000928 	.word	0x20000928

08008848 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008850:	4b06      	ldr	r3, [pc, #24]	; (800886c <vTaskInternalSetTimeOutState+0x24>)
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008858:	4b05      	ldr	r3, [pc, #20]	; (8008870 <vTaskInternalSetTimeOutState+0x28>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	605a      	str	r2, [r3, #4]
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	2000092c 	.word	0x2000092c
 8008870:	20000918 	.word	0x20000918

08008874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10a      	bne.n	800889a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	613b      	str	r3, [r7, #16]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10a      	bne.n	80088b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	60fb      	str	r3, [r7, #12]
}
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80088b6:	f001 f83d 	bl	8009934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088ba:	4b1d      	ldr	r3, [pc, #116]	; (8008930 <xTaskCheckForTimeOut+0xbc>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d2:	d102      	bne.n	80088da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	61fb      	str	r3, [r7, #28]
 80088d8:	e023      	b.n	8008922 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	4b15      	ldr	r3, [pc, #84]	; (8008934 <xTaskCheckForTimeOut+0xc0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d007      	beq.n	80088f6 <xTaskCheckForTimeOut+0x82>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d302      	bcc.n	80088f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088f0:	2301      	movs	r3, #1
 80088f2:	61fb      	str	r3, [r7, #28]
 80088f4:	e015      	b.n	8008922 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d20b      	bcs.n	8008918 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	1ad2      	subs	r2, r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7ff ff9b 	bl	8008848 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008912:	2300      	movs	r3, #0
 8008914:	61fb      	str	r3, [r7, #28]
 8008916:	e004      	b.n	8008922 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2200      	movs	r2, #0
 800891c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800891e:	2301      	movs	r3, #1
 8008920:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008922:	f001 f837 	bl	8009994 <vPortExitCritical>

	return xReturn;
 8008926:	69fb      	ldr	r3, [r7, #28]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3720      	adds	r7, #32
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20000918 	.word	0x20000918
 8008934:	2000092c 	.word	0x2000092c

08008938 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800893c:	4b03      	ldr	r3, [pc, #12]	; (800894c <vTaskMissedYield+0x14>)
 800893e:	2201      	movs	r2, #1
 8008940:	601a      	str	r2, [r3, #0]
}
 8008942:	bf00      	nop
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	20000928 	.word	0x20000928

08008950 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008958:	f000 f852 	bl	8008a00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800895c:	4b06      	ldr	r3, [pc, #24]	; (8008978 <prvIdleTask+0x28>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d9f9      	bls.n	8008958 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008964:	4b05      	ldr	r3, [pc, #20]	; (800897c <prvIdleTask+0x2c>)
 8008966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008974:	e7f0      	b.n	8008958 <prvIdleTask+0x8>
 8008976:	bf00      	nop
 8008978:	20000818 	.word	0x20000818
 800897c:	e000ed04 	.word	0xe000ed04

08008980 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008986:	2300      	movs	r3, #0
 8008988:	607b      	str	r3, [r7, #4]
 800898a:	e00c      	b.n	80089a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4a12      	ldr	r2, [pc, #72]	; (80089e0 <prvInitialiseTaskLists+0x60>)
 8008998:	4413      	add	r3, r2
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe f830 	bl	8006a00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3301      	adds	r3, #1
 80089a4:	607b      	str	r3, [r7, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b06      	cmp	r3, #6
 80089aa:	d9ef      	bls.n	800898c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089ac:	480d      	ldr	r0, [pc, #52]	; (80089e4 <prvInitialiseTaskLists+0x64>)
 80089ae:	f7fe f827 	bl	8006a00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089b2:	480d      	ldr	r0, [pc, #52]	; (80089e8 <prvInitialiseTaskLists+0x68>)
 80089b4:	f7fe f824 	bl	8006a00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089b8:	480c      	ldr	r0, [pc, #48]	; (80089ec <prvInitialiseTaskLists+0x6c>)
 80089ba:	f7fe f821 	bl	8006a00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089be:	480c      	ldr	r0, [pc, #48]	; (80089f0 <prvInitialiseTaskLists+0x70>)
 80089c0:	f7fe f81e 	bl	8006a00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089c4:	480b      	ldr	r0, [pc, #44]	; (80089f4 <prvInitialiseTaskLists+0x74>)
 80089c6:	f7fe f81b 	bl	8006a00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089ca:	4b0b      	ldr	r3, [pc, #44]	; (80089f8 <prvInitialiseTaskLists+0x78>)
 80089cc:	4a05      	ldr	r2, [pc, #20]	; (80089e4 <prvInitialiseTaskLists+0x64>)
 80089ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089d0:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <prvInitialiseTaskLists+0x7c>)
 80089d2:	4a05      	ldr	r2, [pc, #20]	; (80089e8 <prvInitialiseTaskLists+0x68>)
 80089d4:	601a      	str	r2, [r3, #0]
}
 80089d6:	bf00      	nop
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	20000818 	.word	0x20000818
 80089e4:	200008a4 	.word	0x200008a4
 80089e8:	200008b8 	.word	0x200008b8
 80089ec:	200008d4 	.word	0x200008d4
 80089f0:	200008e8 	.word	0x200008e8
 80089f4:	20000900 	.word	0x20000900
 80089f8:	200008cc 	.word	0x200008cc
 80089fc:	200008d0 	.word	0x200008d0

08008a00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a06:	e019      	b.n	8008a3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a08:	f000 ff94 	bl	8009934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a0c:	4b10      	ldr	r3, [pc, #64]	; (8008a50 <prvCheckTasksWaitingTermination+0x50>)
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fe f87b 	bl	8006b14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a1e:	4b0d      	ldr	r3, [pc, #52]	; (8008a54 <prvCheckTasksWaitingTermination+0x54>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	4a0b      	ldr	r2, [pc, #44]	; (8008a54 <prvCheckTasksWaitingTermination+0x54>)
 8008a26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a28:	4b0b      	ldr	r3, [pc, #44]	; (8008a58 <prvCheckTasksWaitingTermination+0x58>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	4a0a      	ldr	r2, [pc, #40]	; (8008a58 <prvCheckTasksWaitingTermination+0x58>)
 8008a30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a32:	f000 ffaf 	bl	8009994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f810 	bl	8008a5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <prvCheckTasksWaitingTermination+0x58>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e1      	bne.n	8008a08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	200008e8 	.word	0x200008e8
 8008a54:	20000914 	.word	0x20000914
 8008a58:	200008fc 	.word	0x200008fc

08008a5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	334c      	adds	r3, #76	; 0x4c
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f006 fa43 	bl	800eef4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d108      	bne.n	8008a8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f001 f947 	bl	8009d10 <vPortFree>
				vPortFree( pxTCB );
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 f944 	bl	8009d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a88:	e018      	b.n	8008abc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d103      	bne.n	8008a9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f001 f93b 	bl	8009d10 <vPortFree>
	}
 8008a9a:	e00f      	b.n	8008abc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d00a      	beq.n	8008abc <prvDeleteTCB+0x60>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60fb      	str	r3, [r7, #12]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <prvDeleteTCB+0x5e>
	}
 8008abc:	bf00      	nop
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aca:	4b0c      	ldr	r3, [pc, #48]	; (8008afc <prvResetNextTaskUnblockTime+0x38>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d104      	bne.n	8008ade <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ad4:	4b0a      	ldr	r3, [pc, #40]	; (8008b00 <prvResetNextTaskUnblockTime+0x3c>)
 8008ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8008ada:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008adc:	e008      	b.n	8008af0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ade:	4b07      	ldr	r3, [pc, #28]	; (8008afc <prvResetNextTaskUnblockTime+0x38>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	4a04      	ldr	r2, [pc, #16]	; (8008b00 <prvResetNextTaskUnblockTime+0x3c>)
 8008aee:	6013      	str	r3, [r2, #0]
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	200008cc 	.word	0x200008cc
 8008b00:	20000934 	.word	0x20000934

08008b04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <xTaskGetSchedulerState+0x34>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b12:	2301      	movs	r3, #1
 8008b14:	607b      	str	r3, [r7, #4]
 8008b16:	e008      	b.n	8008b2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b18:	4b08      	ldr	r3, [pc, #32]	; (8008b3c <xTaskGetSchedulerState+0x38>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d102      	bne.n	8008b26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b20:	2302      	movs	r3, #2
 8008b22:	607b      	str	r3, [r7, #4]
 8008b24:	e001      	b.n	8008b2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b26:	2300      	movs	r3, #0
 8008b28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b2a:	687b      	ldr	r3, [r7, #4]
	}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	20000920 	.word	0x20000920
 8008b3c:	2000093c 	.word	0x2000093c

08008b40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d05e      	beq.n	8008c14 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5a:	4b31      	ldr	r3, [pc, #196]	; (8008c20 <xTaskPriorityInherit+0xe0>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d24e      	bcs.n	8008c02 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	db06      	blt.n	8008b7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b6c:	4b2c      	ldr	r3, [pc, #176]	; (8008c20 <xTaskPriorityInherit+0xe0>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b72:	f1c3 0207 	rsb	r2, r3, #7
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	6959      	ldr	r1, [r3, #20]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b82:	4613      	mov	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4a26      	ldr	r2, [pc, #152]	; (8008c24 <xTaskPriorityInherit+0xe4>)
 8008b8c:	4413      	add	r3, r2
 8008b8e:	4299      	cmp	r1, r3
 8008b90:	d12f      	bne.n	8008bf2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	3304      	adds	r3, #4
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fd ffbc 	bl	8006b14 <uxListRemove>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10a      	bne.n	8008bb8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	43da      	mvns	r2, r3
 8008bae:	4b1e      	ldr	r3, [pc, #120]	; (8008c28 <xTaskPriorityInherit+0xe8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	4a1c      	ldr	r2, [pc, #112]	; (8008c28 <xTaskPriorityInherit+0xe8>)
 8008bb6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bb8:	4b19      	ldr	r3, [pc, #100]	; (8008c20 <xTaskPriorityInherit+0xe0>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	409a      	lsls	r2, r3
 8008bca:	4b17      	ldr	r3, [pc, #92]	; (8008c28 <xTaskPriorityInherit+0xe8>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	4a15      	ldr	r2, [pc, #84]	; (8008c28 <xTaskPriorityInherit+0xe8>)
 8008bd2:	6013      	str	r3, [r2, #0]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd8:	4613      	mov	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4a10      	ldr	r2, [pc, #64]	; (8008c24 <xTaskPriorityInherit+0xe4>)
 8008be2:	441a      	add	r2, r3
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f7fd ff35 	bl	8006a5a <vListInsertEnd>
 8008bf0:	e004      	b.n	8008bfc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bf2:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <xTaskPriorityInherit+0xe0>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	e008      	b.n	8008c14 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c06:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <xTaskPriorityInherit+0xe0>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d201      	bcs.n	8008c14 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c10:	2301      	movs	r3, #1
 8008c12:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c14:	68fb      	ldr	r3, [r7, #12]
	}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000814 	.word	0x20000814
 8008c24:	20000818 	.word	0x20000818
 8008c28:	2000091c 	.word	0x2000091c

08008c2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d06e      	beq.n	8008d20 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c42:	4b3a      	ldr	r3, [pc, #232]	; (8008d2c <xTaskPriorityDisinherit+0x100>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d00a      	beq.n	8008c62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60fb      	str	r3, [r7, #12]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10a      	bne.n	8008c80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	60bb      	str	r3, [r7, #8]
}
 8008c7c:	bf00      	nop
 8008c7e:	e7fe      	b.n	8008c7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c84:	1e5a      	subs	r2, r3, #1
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d044      	beq.n	8008d20 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d140      	bne.n	8008d20 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fd ff36 	bl	8006b14 <uxListRemove>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d115      	bne.n	8008cda <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb2:	491f      	ldr	r1, [pc, #124]	; (8008d30 <xTaskPriorityDisinherit+0x104>)
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	440b      	add	r3, r1
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <xTaskPriorityDisinherit+0xae>
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	2201      	movs	r2, #1
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	43da      	mvns	r2, r3
 8008cd0:	4b18      	ldr	r3, [pc, #96]	; (8008d34 <xTaskPriorityDisinherit+0x108>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	4a17      	ldr	r2, [pc, #92]	; (8008d34 <xTaskPriorityDisinherit+0x108>)
 8008cd8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	f1c3 0207 	rsb	r2, r3, #7
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	409a      	lsls	r2, r3
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <xTaskPriorityDisinherit+0x108>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	4a0d      	ldr	r2, [pc, #52]	; (8008d34 <xTaskPriorityDisinherit+0x108>)
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	4613      	mov	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4a08      	ldr	r2, [pc, #32]	; (8008d30 <xTaskPriorityDisinherit+0x104>)
 8008d0e:	441a      	add	r2, r3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4619      	mov	r1, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	f7fd fe9f 	bl	8006a5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d20:	697b      	ldr	r3, [r7, #20]
	}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000814 	.word	0x20000814
 8008d30:	20000818 	.word	0x20000818
 8008d34:	2000091c 	.word	0x2000091c

08008d38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d46:	2301      	movs	r3, #1
 8008d48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d077      	beq.n	8008e40 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	60fb      	str	r3, [r7, #12]
}
 8008d6a:	bf00      	nop
 8008d6c:	e7fe      	b.n	8008d6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d902      	bls.n	8008d7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	61fb      	str	r3, [r7, #28]
 8008d7c:	e002      	b.n	8008d84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d058      	beq.n	8008e40 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d153      	bne.n	8008e40 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d98:	4b2b      	ldr	r3, [pc, #172]	; (8008e48 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d10a      	bne.n	8008db8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	60bb      	str	r3, [r7, #8]
}
 8008db4:	bf00      	nop
 8008db6:	e7fe      	b.n	8008db6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	69fa      	ldr	r2, [r7, #28]
 8008dc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	db04      	blt.n	8008dd6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	f1c3 0207 	rsb	r2, r3, #7
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	6959      	ldr	r1, [r3, #20]
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4a19      	ldr	r2, [pc, #100]	; (8008e4c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008de6:	4413      	add	r3, r2
 8008de8:	4299      	cmp	r1, r3
 8008dea:	d129      	bne.n	8008e40 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	3304      	adds	r3, #4
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fd fe8f 	bl	8006b14 <uxListRemove>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10a      	bne.n	8008e12 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	2201      	movs	r2, #1
 8008e02:	fa02 f303 	lsl.w	r3, r2, r3
 8008e06:	43da      	mvns	r2, r3
 8008e08:	4b11      	ldr	r3, [pc, #68]	; (8008e50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	4a10      	ldr	r2, [pc, #64]	; (8008e50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008e10:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	2201      	movs	r2, #1
 8008e18:	409a      	lsls	r2, r3
 8008e1a:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	4a0b      	ldr	r2, [pc, #44]	; (8008e50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4a06      	ldr	r2, [pc, #24]	; (8008e4c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008e32:	441a      	add	r2, r3
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	3304      	adds	r3, #4
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	f7fd fe0d 	bl	8006a5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e40:	bf00      	nop
 8008e42:	3720      	adds	r7, #32
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	20000814 	.word	0x20000814
 8008e4c:	20000818 	.word	0x20000818
 8008e50:	2000091c 	.word	0x2000091c

08008e54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e54:	b480      	push	{r7}
 8008e56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e58:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d004      	beq.n	8008e6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e60:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e66:	3201      	adds	r2, #1
 8008e68:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008e6a:	4b03      	ldr	r3, [pc, #12]	; (8008e78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
	}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	20000814 	.word	0x20000814

08008e7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e86:	4b29      	ldr	r3, [pc, #164]	; (8008f2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e8c:	4b28      	ldr	r3, [pc, #160]	; (8008f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fd fe3e 	bl	8006b14 <uxListRemove>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10b      	bne.n	8008eb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008e9e:	4b24      	ldr	r3, [pc, #144]	; (8008f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eaa:	43da      	mvns	r2, r3
 8008eac:	4b21      	ldr	r3, [pc, #132]	; (8008f34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	4a20      	ldr	r2, [pc, #128]	; (8008f34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008eb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebc:	d10a      	bne.n	8008ed4 <prvAddCurrentTaskToDelayedList+0x58>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d007      	beq.n	8008ed4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ec4:	4b1a      	ldr	r3, [pc, #104]	; (8008f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4619      	mov	r1, r3
 8008ecc:	481a      	ldr	r0, [pc, #104]	; (8008f38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008ece:	f7fd fdc4 	bl	8006a5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ed2:	e026      	b.n	8008f22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4413      	add	r3, r2
 8008eda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008edc:	4b14      	ldr	r3, [pc, #80]	; (8008f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d209      	bcs.n	8008f00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eec:	4b13      	ldr	r3, [pc, #76]	; (8008f3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4610      	mov	r0, r2
 8008efa:	f7fd fdd2 	bl	8006aa2 <vListInsert>
}
 8008efe:	e010      	b.n	8008f22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f00:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	f7fd fdc8 	bl	8006aa2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f12:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d202      	bcs.n	8008f22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008f1c:	4a09      	ldr	r2, [pc, #36]	; (8008f44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	6013      	str	r3, [r2, #0]
}
 8008f22:	bf00      	nop
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20000918 	.word	0x20000918
 8008f30:	20000814 	.word	0x20000814
 8008f34:	2000091c 	.word	0x2000091c
 8008f38:	20000900 	.word	0x20000900
 8008f3c:	200008d0 	.word	0x200008d0
 8008f40:	200008cc 	.word	0x200008cc
 8008f44:	20000934 	.word	0x20000934

08008f48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08a      	sub	sp, #40	; 0x28
 8008f4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f52:	f000 fb85 	bl	8009660 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f56:	4b1c      	ldr	r3, [pc, #112]	; (8008fc8 <xTimerCreateTimerTask+0x80>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d021      	beq.n	8008fa2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f66:	1d3a      	adds	r2, r7, #4
 8008f68:	f107 0108 	add.w	r1, r7, #8
 8008f6c:	f107 030c 	add.w	r3, r7, #12
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f7 fb1b 	bl	80005ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	9202      	str	r2, [sp, #8]
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	2305      	movs	r3, #5
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	2300      	movs	r3, #0
 8008f86:	460a      	mov	r2, r1
 8008f88:	4910      	ldr	r1, [pc, #64]	; (8008fcc <xTimerCreateTimerTask+0x84>)
 8008f8a:	4811      	ldr	r0, [pc, #68]	; (8008fd0 <xTimerCreateTimerTask+0x88>)
 8008f8c:	f7fe fdf4 	bl	8007b78 <xTaskCreateStatic>
 8008f90:	4603      	mov	r3, r0
 8008f92:	4a10      	ldr	r2, [pc, #64]	; (8008fd4 <xTimerCreateTimerTask+0x8c>)
 8008f94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f96:	4b0f      	ldr	r3, [pc, #60]	; (8008fd4 <xTimerCreateTimerTask+0x8c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	613b      	str	r3, [r7, #16]
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008fbe:	697b      	ldr	r3, [r7, #20]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3718      	adds	r7, #24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20000970 	.word	0x20000970
 8008fcc:	0800f894 	.word	0x0800f894
 8008fd0:	08009241 	.word	0x08009241
 8008fd4:	20000974 	.word	0x20000974

08008fd8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008fe6:	2028      	movs	r0, #40	; 0x28
 8008fe8:	f000 fdc6 	bl	8009b78 <pvPortMalloc>
 8008fec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00d      	beq.n	8009010 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	68b9      	ldr	r1, [r7, #8]
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 f843 	bl	8009096 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009010:	697b      	ldr	r3, [r7, #20]
	}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800901a:	b580      	push	{r7, lr}
 800901c:	b08a      	sub	sp, #40	; 0x28
 800901e:	af02      	add	r7, sp, #8
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
 8009026:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009028:	2328      	movs	r3, #40	; 0x28
 800902a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	2b28      	cmp	r3, #40	; 0x28
 8009030:	d00a      	beq.n	8009048 <xTimerCreateStatic+0x2e>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	61bb      	str	r3, [r7, #24]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009048:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10a      	bne.n	8009066 <xTimerCreateStatic+0x4c>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	617b      	str	r3, [r7, #20]
}
 8009062:	bf00      	nop
 8009064:	e7fe      	b.n	8009064 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00d      	beq.n	800908c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	2202      	movs	r2, #2
 8009074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	9301      	str	r3, [sp, #4]
 800907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	68b9      	ldr	r1, [r7, #8]
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 f805 	bl	8009096 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800908c:	69fb      	ldr	r3, [r7, #28]
	}
 800908e:	4618      	mov	r0, r3
 8009090:	3720      	adds	r7, #32
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b086      	sub	sp, #24
 800909a:	af00      	add	r7, sp, #0
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	607a      	str	r2, [r7, #4]
 80090a2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10a      	bne.n	80090c0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	617b      	str	r3, [r7, #20]
}
 80090bc:	bf00      	nop
 80090be:	e7fe      	b.n	80090be <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d01e      	beq.n	8009104 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80090c6:	f000 facb 	bl	8009660 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	6a3a      	ldr	r2, [r7, #32]
 80090e0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	3304      	adds	r3, #4
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fd fcaa 	bl	8006a40 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d008      	beq.n	8009104 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090f8:	f043 0304 	orr.w	r3, r3, #4
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009104:	bf00      	nop
 8009106:	3718      	adds	r7, #24
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08a      	sub	sp, #40	; 0x28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800911a:	2300      	movs	r3, #0
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	623b      	str	r3, [r7, #32]
}
 8009136:	bf00      	nop
 8009138:	e7fe      	b.n	8009138 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800913a:	4b1a      	ldr	r3, [pc, #104]	; (80091a4 <xTimerGenericCommand+0x98>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d02a      	beq.n	8009198 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b05      	cmp	r3, #5
 8009152:	dc18      	bgt.n	8009186 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009154:	f7ff fcd6 	bl	8008b04 <xTaskGetSchedulerState>
 8009158:	4603      	mov	r3, r0
 800915a:	2b02      	cmp	r3, #2
 800915c:	d109      	bne.n	8009172 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800915e:	4b11      	ldr	r3, [pc, #68]	; (80091a4 <xTimerGenericCommand+0x98>)
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	f107 0114 	add.w	r1, r7, #20
 8009166:	2300      	movs	r3, #0
 8009168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800916a:	f7fd feed 	bl	8006f48 <xQueueGenericSend>
 800916e:	6278      	str	r0, [r7, #36]	; 0x24
 8009170:	e012      	b.n	8009198 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009172:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <xTimerGenericCommand+0x98>)
 8009174:	6818      	ldr	r0, [r3, #0]
 8009176:	f107 0114 	add.w	r1, r7, #20
 800917a:	2300      	movs	r3, #0
 800917c:	2200      	movs	r2, #0
 800917e:	f7fd fee3 	bl	8006f48 <xQueueGenericSend>
 8009182:	6278      	str	r0, [r7, #36]	; 0x24
 8009184:	e008      	b.n	8009198 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009186:	4b07      	ldr	r3, [pc, #28]	; (80091a4 <xTimerGenericCommand+0x98>)
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	f107 0114 	add.w	r1, r7, #20
 800918e:	2300      	movs	r3, #0
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	f7fd ffd7 	bl	8007144 <xQueueGenericSendFromISR>
 8009196:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800919a:	4618      	mov	r0, r3
 800919c:	3728      	adds	r7, #40	; 0x28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000970 	.word	0x20000970

080091a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b2:	4b22      	ldr	r3, [pc, #136]	; (800923c <prvProcessExpiredTimer+0x94>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	3304      	adds	r3, #4
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fd fca7 	bl	8006b14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d022      	beq.n	800921a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	699a      	ldr	r2, [r3, #24]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	18d1      	adds	r1, r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	6978      	ldr	r0, [r7, #20]
 80091e2:	f000 f8d1 	bl	8009388 <prvInsertTimerInActiveList>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d01f      	beq.n	800922c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091ec:	2300      	movs	r3, #0
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	2300      	movs	r3, #0
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	2100      	movs	r1, #0
 80091f6:	6978      	ldr	r0, [r7, #20]
 80091f8:	f7ff ff88 	bl	800910c <xTimerGenericCommand>
 80091fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d113      	bne.n	800922c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	60fb      	str	r3, [r7, #12]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009220:	f023 0301 	bic.w	r3, r3, #1
 8009224:	b2da      	uxtb	r2, r3
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	6978      	ldr	r0, [r7, #20]
 8009232:	4798      	blx	r3
}
 8009234:	bf00      	nop
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	20000968 	.word	0x20000968

08009240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009248:	f107 0308 	add.w	r3, r7, #8
 800924c:	4618      	mov	r0, r3
 800924e:	f000 f857 	bl	8009300 <prvGetNextExpireTime>
 8009252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4619      	mov	r1, r3
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 f803 	bl	8009264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800925e:	f000 f8d5 	bl	800940c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009262:	e7f1      	b.n	8009248 <prvTimerTask+0x8>

08009264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800926e:	f7ff f865 	bl	800833c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009272:	f107 0308 	add.w	r3, r7, #8
 8009276:	4618      	mov	r0, r3
 8009278:	f000 f866 	bl	8009348 <prvSampleTimeNow>
 800927c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d130      	bne.n	80092e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10a      	bne.n	80092a0 <prvProcessTimerOrBlockTask+0x3c>
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	429a      	cmp	r2, r3
 8009290:	d806      	bhi.n	80092a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009292:	f7ff f861 	bl	8008358 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009296:	68f9      	ldr	r1, [r7, #12]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7ff ff85 	bl	80091a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800929e:	e024      	b.n	80092ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d008      	beq.n	80092b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092a6:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <prvProcessTimerOrBlockTask+0x90>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <prvProcessTimerOrBlockTask+0x50>
 80092b0:	2301      	movs	r3, #1
 80092b2:	e000      	b.n	80092b6 <prvProcessTimerOrBlockTask+0x52>
 80092b4:	2300      	movs	r3, #0
 80092b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092b8:	4b0f      	ldr	r3, [pc, #60]	; (80092f8 <prvProcessTimerOrBlockTask+0x94>)
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	4619      	mov	r1, r3
 80092c6:	f7fe fc23 	bl	8007b10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092ca:	f7ff f845 	bl	8008358 <xTaskResumeAll>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092d4:	4b09      	ldr	r3, [pc, #36]	; (80092fc <prvProcessTimerOrBlockTask+0x98>)
 80092d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	f3bf 8f6f 	isb	sy
}
 80092e4:	e001      	b.n	80092ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092e6:	f7ff f837 	bl	8008358 <xTaskResumeAll>
}
 80092ea:	bf00      	nop
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	2000096c 	.word	0x2000096c
 80092f8:	20000970 	.word	0x20000970
 80092fc:	e000ed04 	.word	0xe000ed04

08009300 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009308:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <prvGetNextExpireTime+0x44>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <prvGetNextExpireTime+0x16>
 8009312:	2201      	movs	r2, #1
 8009314:	e000      	b.n	8009318 <prvGetNextExpireTime+0x18>
 8009316:	2200      	movs	r2, #0
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d105      	bne.n	8009330 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009324:	4b07      	ldr	r3, [pc, #28]	; (8009344 <prvGetNextExpireTime+0x44>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	e001      	b.n	8009334 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009334:	68fb      	ldr	r3, [r7, #12]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	20000968 	.word	0x20000968

08009348 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009350:	f7ff f89e 	bl	8008490 <xTaskGetTickCount>
 8009354:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009356:	4b0b      	ldr	r3, [pc, #44]	; (8009384 <prvSampleTimeNow+0x3c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	429a      	cmp	r2, r3
 800935e:	d205      	bcs.n	800936c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009360:	f000 f91a 	bl	8009598 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	e002      	b.n	8009372 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009372:	4a04      	ldr	r2, [pc, #16]	; (8009384 <prvSampleTimeNow+0x3c>)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009378:	68fb      	ldr	r3, [r7, #12]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20000978 	.word	0x20000978

08009388 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009396:	2300      	movs	r3, #0
 8009398:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d812      	bhi.n	80093d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	1ad2      	subs	r2, r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d302      	bcc.n	80093c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093bc:	2301      	movs	r3, #1
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	e01b      	b.n	80093fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093c2:	4b10      	ldr	r3, [pc, #64]	; (8009404 <prvInsertTimerInActiveList+0x7c>)
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f7fd fb68 	bl	8006aa2 <vListInsert>
 80093d2:	e012      	b.n	80093fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d206      	bcs.n	80093ea <prvInsertTimerInActiveList+0x62>
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d302      	bcc.n	80093ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093e4:	2301      	movs	r3, #1
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	e007      	b.n	80093fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093ea:	4b07      	ldr	r3, [pc, #28]	; (8009408 <prvInsertTimerInActiveList+0x80>)
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4619      	mov	r1, r3
 80093f4:	4610      	mov	r0, r2
 80093f6:	f7fd fb54 	bl	8006aa2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093fa:	697b      	ldr	r3, [r7, #20]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	2000096c 	.word	0x2000096c
 8009408:	20000968 	.word	0x20000968

0800940c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b08c      	sub	sp, #48	; 0x30
 8009410:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009412:	e0ae      	b.n	8009572 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f2c0 80aa 	blt.w	8009570 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d004      	beq.n	8009432 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942a:	3304      	adds	r3, #4
 800942c:	4618      	mov	r0, r3
 800942e:	f7fd fb71 	bl	8006b14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009432:	1d3b      	adds	r3, r7, #4
 8009434:	4618      	mov	r0, r3
 8009436:	f7ff ff87 	bl	8009348 <prvSampleTimeNow>
 800943a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b09      	cmp	r3, #9
 8009440:	f200 8097 	bhi.w	8009572 <prvProcessReceivedCommands+0x166>
 8009444:	a201      	add	r2, pc, #4	; (adr r2, 800944c <prvProcessReceivedCommands+0x40>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	08009475 	.word	0x08009475
 8009450:	08009475 	.word	0x08009475
 8009454:	08009475 	.word	0x08009475
 8009458:	080094e9 	.word	0x080094e9
 800945c:	080094fd 	.word	0x080094fd
 8009460:	08009547 	.word	0x08009547
 8009464:	08009475 	.word	0x08009475
 8009468:	08009475 	.word	0x08009475
 800946c:	080094e9 	.word	0x080094e9
 8009470:	080094fd 	.word	0x080094fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800947a:	f043 0301 	orr.w	r3, r3, #1
 800947e:	b2da      	uxtb	r2, r3
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	18d1      	adds	r1, r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6a3a      	ldr	r2, [r7, #32]
 8009492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009494:	f7ff ff78 	bl	8009388 <prvInsertTimerInActiveList>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d069      	beq.n	8009572 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d05e      	beq.n	8009572 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	441a      	add	r2, r3
 80094bc:	2300      	movs	r3, #0
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	2300      	movs	r3, #0
 80094c2:	2100      	movs	r1, #0
 80094c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094c6:	f7ff fe21 	bl	800910c <xTimerGenericCommand>
 80094ca:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d14f      	bne.n	8009572 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	61bb      	str	r3, [r7, #24]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094ee:	f023 0301 	bic.w	r3, r3, #1
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80094fa:	e03a      	b.n	8009572 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009502:	f043 0301 	orr.w	r3, r3, #1
 8009506:	b2da      	uxtb	r2, r3
 8009508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	617b      	str	r3, [r7, #20]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	699a      	ldr	r2, [r3, #24]
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	18d1      	adds	r1, r2, r3
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	6a3a      	ldr	r2, [r7, #32]
 800953e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009540:	f7ff ff22 	bl	8009388 <prvInsertTimerInActiveList>
					break;
 8009544:	e015      	b.n	8009572 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d103      	bne.n	800955c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8009554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009556:	f000 fbdb 	bl	8009d10 <vPortFree>
 800955a:	e00a      	b.n	8009572 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009562:	f023 0301 	bic.w	r3, r3, #1
 8009566:	b2da      	uxtb	r2, r3
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800956e:	e000      	b.n	8009572 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009570:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009572:	4b08      	ldr	r3, [pc, #32]	; (8009594 <prvProcessReceivedCommands+0x188>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f107 0108 	add.w	r1, r7, #8
 800957a:	2200      	movs	r2, #0
 800957c:	4618      	mov	r0, r3
 800957e:	f7fd ff09 	bl	8007394 <xQueueReceive>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	f47f af45 	bne.w	8009414 <prvProcessReceivedCommands+0x8>
	}
}
 800958a:	bf00      	nop
 800958c:	bf00      	nop
 800958e:	3728      	adds	r7, #40	; 0x28
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20000970 	.word	0x20000970

08009598 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800959e:	e048      	b.n	8009632 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095a0:	4b2d      	ldr	r3, [pc, #180]	; (8009658 <prvSwitchTimerLists+0xc0>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095aa:	4b2b      	ldr	r3, [pc, #172]	; (8009658 <prvSwitchTimerLists+0xc0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fd faab 	bl	8006b14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095cc:	f003 0304 	and.w	r3, r3, #4
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d02e      	beq.n	8009632 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	4413      	add	r3, r2
 80095dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d90e      	bls.n	8009604 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095f2:	4b19      	ldr	r3, [pc, #100]	; (8009658 <prvSwitchTimerLists+0xc0>)
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	3304      	adds	r3, #4
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f7fd fa50 	bl	8006aa2 <vListInsert>
 8009602:	e016      	b.n	8009632 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009604:	2300      	movs	r3, #0
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	2300      	movs	r3, #0
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	2100      	movs	r1, #0
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f7ff fd7c 	bl	800910c <xTimerGenericCommand>
 8009614:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10a      	bne.n	8009632 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	603b      	str	r3, [r7, #0]
}
 800962e:	bf00      	nop
 8009630:	e7fe      	b.n	8009630 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009632:	4b09      	ldr	r3, [pc, #36]	; (8009658 <prvSwitchTimerLists+0xc0>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1b1      	bne.n	80095a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <prvSwitchTimerLists+0xc0>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009642:	4b06      	ldr	r3, [pc, #24]	; (800965c <prvSwitchTimerLists+0xc4>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a04      	ldr	r2, [pc, #16]	; (8009658 <prvSwitchTimerLists+0xc0>)
 8009648:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800964a:	4a04      	ldr	r2, [pc, #16]	; (800965c <prvSwitchTimerLists+0xc4>)
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	6013      	str	r3, [r2, #0]
}
 8009650:	bf00      	nop
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	20000968 	.word	0x20000968
 800965c:	2000096c 	.word	0x2000096c

08009660 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009666:	f000 f965 	bl	8009934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800966a:	4b15      	ldr	r3, [pc, #84]	; (80096c0 <prvCheckForValidListAndQueue+0x60>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d120      	bne.n	80096b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009672:	4814      	ldr	r0, [pc, #80]	; (80096c4 <prvCheckForValidListAndQueue+0x64>)
 8009674:	f7fd f9c4 	bl	8006a00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009678:	4813      	ldr	r0, [pc, #76]	; (80096c8 <prvCheckForValidListAndQueue+0x68>)
 800967a:	f7fd f9c1 	bl	8006a00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800967e:	4b13      	ldr	r3, [pc, #76]	; (80096cc <prvCheckForValidListAndQueue+0x6c>)
 8009680:	4a10      	ldr	r2, [pc, #64]	; (80096c4 <prvCheckForValidListAndQueue+0x64>)
 8009682:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009684:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <prvCheckForValidListAndQueue+0x70>)
 8009686:	4a10      	ldr	r2, [pc, #64]	; (80096c8 <prvCheckForValidListAndQueue+0x68>)
 8009688:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800968a:	2300      	movs	r3, #0
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <prvCheckForValidListAndQueue+0x74>)
 8009690:	4a11      	ldr	r2, [pc, #68]	; (80096d8 <prvCheckForValidListAndQueue+0x78>)
 8009692:	210c      	movs	r1, #12
 8009694:	200a      	movs	r0, #10
 8009696:	f7fd facf 	bl	8006c38 <xQueueGenericCreateStatic>
 800969a:	4603      	mov	r3, r0
 800969c:	4a08      	ldr	r2, [pc, #32]	; (80096c0 <prvCheckForValidListAndQueue+0x60>)
 800969e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096a0:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <prvCheckForValidListAndQueue+0x60>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <prvCheckForValidListAndQueue+0x60>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	490b      	ldr	r1, [pc, #44]	; (80096dc <prvCheckForValidListAndQueue+0x7c>)
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fe fa04 	bl	8007abc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096b4:	f000 f96e 	bl	8009994 <vPortExitCritical>
}
 80096b8:	bf00      	nop
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000970 	.word	0x20000970
 80096c4:	20000940 	.word	0x20000940
 80096c8:	20000954 	.word	0x20000954
 80096cc:	20000968 	.word	0x20000968
 80096d0:	2000096c 	.word	0x2000096c
 80096d4:	200009f4 	.word	0x200009f4
 80096d8:	2000097c 	.word	0x2000097c
 80096dc:	0800f89c 	.word	0x0800f89c

080096e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3b04      	subs	r3, #4
 80096f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3b04      	subs	r3, #4
 80096fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f023 0201 	bic.w	r2, r3, #1
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3b04      	subs	r3, #4
 800970e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009710:	4a0c      	ldr	r2, [pc, #48]	; (8009744 <pxPortInitialiseStack+0x64>)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	3b14      	subs	r3, #20
 800971a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3b04      	subs	r3, #4
 8009726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f06f 0202 	mvn.w	r2, #2
 800972e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	3b20      	subs	r3, #32
 8009734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009736:	68fb      	ldr	r3, [r7, #12]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	08009749 	.word	0x08009749

08009748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009752:	4b12      	ldr	r3, [pc, #72]	; (800979c <prvTaskExitError+0x54>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d00a      	beq.n	8009772 <prvTaskExitError+0x2a>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	60fb      	str	r3, [r7, #12]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <prvTaskExitError+0x28>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	60bb      	str	r3, [r7, #8]
}
 8009784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009786:	bf00      	nop
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0fc      	beq.n	8009788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800978e:	bf00      	nop
 8009790:	bf00      	nop
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	20000014 	.word	0x20000014

080097a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097a0:	4b07      	ldr	r3, [pc, #28]	; (80097c0 <pxCurrentTCBConst2>)
 80097a2:	6819      	ldr	r1, [r3, #0]
 80097a4:	6808      	ldr	r0, [r1, #0]
 80097a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097aa:	f380 8809 	msr	PSP, r0
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f04f 0000 	mov.w	r0, #0
 80097b6:	f380 8811 	msr	BASEPRI, r0
 80097ba:	4770      	bx	lr
 80097bc:	f3af 8000 	nop.w

080097c0 <pxCurrentTCBConst2>:
 80097c0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop

080097c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097c8:	4808      	ldr	r0, [pc, #32]	; (80097ec <prvPortStartFirstTask+0x24>)
 80097ca:	6800      	ldr	r0, [r0, #0]
 80097cc:	6800      	ldr	r0, [r0, #0]
 80097ce:	f380 8808 	msr	MSP, r0
 80097d2:	f04f 0000 	mov.w	r0, #0
 80097d6:	f380 8814 	msr	CONTROL, r0
 80097da:	b662      	cpsie	i
 80097dc:	b661      	cpsie	f
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	df00      	svc	0
 80097e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097ea:	bf00      	nop
 80097ec:	e000ed08 	.word	0xe000ed08

080097f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097f6:	4b46      	ldr	r3, [pc, #280]	; (8009910 <xPortStartScheduler+0x120>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a46      	ldr	r2, [pc, #280]	; (8009914 <xPortStartScheduler+0x124>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d10a      	bne.n	8009816 <xPortStartScheduler+0x26>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	613b      	str	r3, [r7, #16]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009816:	4b3e      	ldr	r3, [pc, #248]	; (8009910 <xPortStartScheduler+0x120>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a3f      	ldr	r2, [pc, #252]	; (8009918 <xPortStartScheduler+0x128>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d10a      	bne.n	8009836 <xPortStartScheduler+0x46>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	60fb      	str	r3, [r7, #12]
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009836:	4b39      	ldr	r3, [pc, #228]	; (800991c <xPortStartScheduler+0x12c>)
 8009838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	22ff      	movs	r2, #255	; 0xff
 8009846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	b2db      	uxtb	r3, r3
 800984e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009858:	b2da      	uxtb	r2, r3
 800985a:	4b31      	ldr	r3, [pc, #196]	; (8009920 <xPortStartScheduler+0x130>)
 800985c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800985e:	4b31      	ldr	r3, [pc, #196]	; (8009924 <xPortStartScheduler+0x134>)
 8009860:	2207      	movs	r2, #7
 8009862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009864:	e009      	b.n	800987a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009866:	4b2f      	ldr	r3, [pc, #188]	; (8009924 <xPortStartScheduler+0x134>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3b01      	subs	r3, #1
 800986c:	4a2d      	ldr	r2, [pc, #180]	; (8009924 <xPortStartScheduler+0x134>)
 800986e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	b2db      	uxtb	r3, r3
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	b2db      	uxtb	r3, r3
 8009878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009882:	2b80      	cmp	r3, #128	; 0x80
 8009884:	d0ef      	beq.n	8009866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009886:	4b27      	ldr	r3, [pc, #156]	; (8009924 <xPortStartScheduler+0x134>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f1c3 0307 	rsb	r3, r3, #7
 800988e:	2b04      	cmp	r3, #4
 8009890:	d00a      	beq.n	80098a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	60bb      	str	r3, [r7, #8]
}
 80098a4:	bf00      	nop
 80098a6:	e7fe      	b.n	80098a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098a8:	4b1e      	ldr	r3, [pc, #120]	; (8009924 <xPortStartScheduler+0x134>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	021b      	lsls	r3, r3, #8
 80098ae:	4a1d      	ldr	r2, [pc, #116]	; (8009924 <xPortStartScheduler+0x134>)
 80098b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098b2:	4b1c      	ldr	r3, [pc, #112]	; (8009924 <xPortStartScheduler+0x134>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098ba:	4a1a      	ldr	r2, [pc, #104]	; (8009924 <xPortStartScheduler+0x134>)
 80098bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098c6:	4b18      	ldr	r3, [pc, #96]	; (8009928 <xPortStartScheduler+0x138>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a17      	ldr	r2, [pc, #92]	; (8009928 <xPortStartScheduler+0x138>)
 80098cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098d2:	4b15      	ldr	r3, [pc, #84]	; (8009928 <xPortStartScheduler+0x138>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a14      	ldr	r2, [pc, #80]	; (8009928 <xPortStartScheduler+0x138>)
 80098d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098de:	f000 f8dd 	bl	8009a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098e2:	4b12      	ldr	r3, [pc, #72]	; (800992c <xPortStartScheduler+0x13c>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098e8:	f000 f8fc 	bl	8009ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098ec:	4b10      	ldr	r3, [pc, #64]	; (8009930 <xPortStartScheduler+0x140>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a0f      	ldr	r2, [pc, #60]	; (8009930 <xPortStartScheduler+0x140>)
 80098f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098f8:	f7ff ff66 	bl	80097c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098fc:	f7fe fe90 	bl	8008620 <vTaskSwitchContext>
	prvTaskExitError();
 8009900:	f7ff ff22 	bl	8009748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	e000ed00 	.word	0xe000ed00
 8009914:	410fc271 	.word	0x410fc271
 8009918:	410fc270 	.word	0x410fc270
 800991c:	e000e400 	.word	0xe000e400
 8009920:	20000a3c 	.word	0x20000a3c
 8009924:	20000a40 	.word	0x20000a40
 8009928:	e000ed20 	.word	0xe000ed20
 800992c:	20000014 	.word	0x20000014
 8009930:	e000ef34 	.word	0xe000ef34

08009934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	607b      	str	r3, [r7, #4]
}
 800994c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800994e:	4b0f      	ldr	r3, [pc, #60]	; (800998c <vPortEnterCritical+0x58>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3301      	adds	r3, #1
 8009954:	4a0d      	ldr	r2, [pc, #52]	; (800998c <vPortEnterCritical+0x58>)
 8009956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009958:	4b0c      	ldr	r3, [pc, #48]	; (800998c <vPortEnterCritical+0x58>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d10f      	bne.n	8009980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009960:	4b0b      	ldr	r3, [pc, #44]	; (8009990 <vPortEnterCritical+0x5c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <vPortEnterCritical+0x4c>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	603b      	str	r3, [r7, #0]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <vPortEnterCritical+0x4a>
	}
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	20000014 	.word	0x20000014
 8009990:	e000ed04 	.word	0xe000ed04

08009994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800999a:	4b12      	ldr	r3, [pc, #72]	; (80099e4 <vPortExitCritical+0x50>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10a      	bne.n	80099b8 <vPortExitCritical+0x24>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	607b      	str	r3, [r7, #4]
}
 80099b4:	bf00      	nop
 80099b6:	e7fe      	b.n	80099b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099b8:	4b0a      	ldr	r3, [pc, #40]	; (80099e4 <vPortExitCritical+0x50>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3b01      	subs	r3, #1
 80099be:	4a09      	ldr	r2, [pc, #36]	; (80099e4 <vPortExitCritical+0x50>)
 80099c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099c2:	4b08      	ldr	r3, [pc, #32]	; (80099e4 <vPortExitCritical+0x50>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d105      	bne.n	80099d6 <vPortExitCritical+0x42>
 80099ca:	2300      	movs	r3, #0
 80099cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	f383 8811 	msr	BASEPRI, r3
}
 80099d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20000014 	.word	0x20000014
	...

080099f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099f0:	f3ef 8009 	mrs	r0, PSP
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	4b15      	ldr	r3, [pc, #84]	; (8009a50 <pxCurrentTCBConst>)
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	f01e 0f10 	tst.w	lr, #16
 8009a00:	bf08      	it	eq
 8009a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0a:	6010      	str	r0, [r2, #0]
 8009a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a14:	f380 8811 	msr	BASEPRI, r0
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f7fe fdfe 	bl	8008620 <vTaskSwitchContext>
 8009a24:	f04f 0000 	mov.w	r0, #0
 8009a28:	f380 8811 	msr	BASEPRI, r0
 8009a2c:	bc09      	pop	{r0, r3}
 8009a2e:	6819      	ldr	r1, [r3, #0]
 8009a30:	6808      	ldr	r0, [r1, #0]
 8009a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a36:	f01e 0f10 	tst.w	lr, #16
 8009a3a:	bf08      	it	eq
 8009a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a40:	f380 8809 	msr	PSP, r0
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	f3af 8000 	nop.w

08009a50 <pxCurrentTCBConst>:
 8009a50:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop

08009a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	607b      	str	r3, [r7, #4]
}
 8009a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a72:	f7fe fd1d 	bl	80084b0 <xTaskIncrementTick>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a7c:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <SysTick_Handler+0x40>)
 8009a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	2300      	movs	r3, #0
 8009a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	f383 8811 	msr	BASEPRI, r3
}
 8009a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	e000ed04 	.word	0xe000ed04

08009a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <vPortSetupTimerInterrupt+0x34>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <vPortSetupTimerInterrupt+0x38>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009aac:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <vPortSetupTimerInterrupt+0x3c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0a      	ldr	r2, [pc, #40]	; (8009adc <vPortSetupTimerInterrupt+0x40>)
 8009ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab6:	099b      	lsrs	r3, r3, #6
 8009ab8:	4a09      	ldr	r2, [pc, #36]	; (8009ae0 <vPortSetupTimerInterrupt+0x44>)
 8009aba:	3b01      	subs	r3, #1
 8009abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009abe:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <vPortSetupTimerInterrupt+0x34>)
 8009ac0:	2207      	movs	r2, #7
 8009ac2:	601a      	str	r2, [r3, #0]
}
 8009ac4:	bf00      	nop
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	e000e010 	.word	0xe000e010
 8009ad4:	e000e018 	.word	0xe000e018
 8009ad8:	20000008 	.word	0x20000008
 8009adc:	10624dd3 	.word	0x10624dd3
 8009ae0:	e000e014 	.word	0xe000e014

08009ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009af4 <vPortEnableVFP+0x10>
 8009ae8:	6801      	ldr	r1, [r0, #0]
 8009aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009aee:	6001      	str	r1, [r0, #0]
 8009af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009af2:	bf00      	nop
 8009af4:	e000ed88 	.word	0xe000ed88

08009af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009afe:	f3ef 8305 	mrs	r3, IPSR
 8009b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2b0f      	cmp	r3, #15
 8009b08:	d914      	bls.n	8009b34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b0a:	4a17      	ldr	r2, [pc, #92]	; (8009b68 <vPortValidateInterruptPriority+0x70>)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4413      	add	r3, r2
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b14:	4b15      	ldr	r3, [pc, #84]	; (8009b6c <vPortValidateInterruptPriority+0x74>)
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	7afa      	ldrb	r2, [r7, #11]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d20a      	bcs.n	8009b34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	607b      	str	r3, [r7, #4]
}
 8009b30:	bf00      	nop
 8009b32:	e7fe      	b.n	8009b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b34:	4b0e      	ldr	r3, [pc, #56]	; (8009b70 <vPortValidateInterruptPriority+0x78>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	; (8009b74 <vPortValidateInterruptPriority+0x7c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d90a      	bls.n	8009b5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	603b      	str	r3, [r7, #0]
}
 8009b56:	bf00      	nop
 8009b58:	e7fe      	b.n	8009b58 <vPortValidateInterruptPriority+0x60>
	}
 8009b5a:	bf00      	nop
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	e000e3f0 	.word	0xe000e3f0
 8009b6c:	20000a3c 	.word	0x20000a3c
 8009b70:	e000ed0c 	.word	0xe000ed0c
 8009b74:	20000a40 	.word	0x20000a40

08009b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08a      	sub	sp, #40	; 0x28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b84:	f7fe fbda 	bl	800833c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b88:	4b5b      	ldr	r3, [pc, #364]	; (8009cf8 <pvPortMalloc+0x180>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b90:	f000 f920 	bl	8009dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b94:	4b59      	ldr	r3, [pc, #356]	; (8009cfc <pvPortMalloc+0x184>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f040 8093 	bne.w	8009cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d01d      	beq.n	8009be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ba8:	2208      	movs	r2, #8
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d014      	beq.n	8009be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f023 0307 	bic.w	r3, r3, #7
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <pvPortMalloc+0x6c>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	617b      	str	r3, [r7, #20]
}
 8009be0:	bf00      	nop
 8009be2:	e7fe      	b.n	8009be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d06e      	beq.n	8009cc8 <pvPortMalloc+0x150>
 8009bea:	4b45      	ldr	r3, [pc, #276]	; (8009d00 <pvPortMalloc+0x188>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d869      	bhi.n	8009cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bf4:	4b43      	ldr	r3, [pc, #268]	; (8009d04 <pvPortMalloc+0x18c>)
 8009bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bf8:	4b42      	ldr	r3, [pc, #264]	; (8009d04 <pvPortMalloc+0x18c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bfe:	e004      	b.n	8009c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d903      	bls.n	8009c1c <pvPortMalloc+0xa4>
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1f1      	bne.n	8009c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c1c:	4b36      	ldr	r3, [pc, #216]	; (8009cf8 <pvPortMalloc+0x180>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d050      	beq.n	8009cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2208      	movs	r2, #8
 8009c2c:	4413      	add	r3, r2
 8009c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	1ad2      	subs	r2, r2, r3
 8009c40:	2308      	movs	r3, #8
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d91f      	bls.n	8009c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <pvPortMalloc+0xf8>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	613b      	str	r3, [r7, #16]
}
 8009c6c:	bf00      	nop
 8009c6e:	e7fe      	b.n	8009c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	1ad2      	subs	r2, r2, r3
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c82:	69b8      	ldr	r0, [r7, #24]
 8009c84:	f000 f908 	bl	8009e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c88:	4b1d      	ldr	r3, [pc, #116]	; (8009d00 <pvPortMalloc+0x188>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	4a1b      	ldr	r2, [pc, #108]	; (8009d00 <pvPortMalloc+0x188>)
 8009c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c96:	4b1a      	ldr	r3, [pc, #104]	; (8009d00 <pvPortMalloc+0x188>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	4b1b      	ldr	r3, [pc, #108]	; (8009d08 <pvPortMalloc+0x190>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d203      	bcs.n	8009caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ca2:	4b17      	ldr	r3, [pc, #92]	; (8009d00 <pvPortMalloc+0x188>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a18      	ldr	r2, [pc, #96]	; (8009d08 <pvPortMalloc+0x190>)
 8009ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	4b13      	ldr	r3, [pc, #76]	; (8009cfc <pvPortMalloc+0x184>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009cbe:	4b13      	ldr	r3, [pc, #76]	; (8009d0c <pvPortMalloc+0x194>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	4a11      	ldr	r2, [pc, #68]	; (8009d0c <pvPortMalloc+0x194>)
 8009cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cc8:	f7fe fb46 	bl	8008358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	f003 0307 	and.w	r3, r3, #7
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <pvPortMalloc+0x174>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	60fb      	str	r3, [r7, #12]
}
 8009ce8:	bf00      	nop
 8009cea:	e7fe      	b.n	8009cea <pvPortMalloc+0x172>
	return pvReturn;
 8009cec:	69fb      	ldr	r3, [r7, #28]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3728      	adds	r7, #40	; 0x28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20007f7c 	.word	0x20007f7c
 8009cfc:	20007f90 	.word	0x20007f90
 8009d00:	20007f80 	.word	0x20007f80
 8009d04:	20007f74 	.word	0x20007f74
 8009d08:	20007f84 	.word	0x20007f84
 8009d0c:	20007f88 	.word	0x20007f88

08009d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d04d      	beq.n	8009dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d22:	2308      	movs	r3, #8
 8009d24:	425b      	negs	r3, r3
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	4413      	add	r3, r2
 8009d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	4b24      	ldr	r3, [pc, #144]	; (8009dc8 <vPortFree+0xb8>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4013      	ands	r3, r2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10a      	bne.n	8009d54 <vPortFree+0x44>
	__asm volatile
 8009d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	60fb      	str	r3, [r7, #12]
}
 8009d50:	bf00      	nop
 8009d52:	e7fe      	b.n	8009d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <vPortFree+0x62>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	60bb      	str	r3, [r7, #8]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <vPortFree+0xb8>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d01e      	beq.n	8009dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d11a      	bne.n	8009dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	4b0e      	ldr	r3, [pc, #56]	; (8009dc8 <vPortFree+0xb8>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	43db      	mvns	r3, r3
 8009d92:	401a      	ands	r2, r3
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d98:	f7fe fad0 	bl	800833c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <vPortFree+0xbc>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4413      	add	r3, r2
 8009da6:	4a09      	ldr	r2, [pc, #36]	; (8009dcc <vPortFree+0xbc>)
 8009da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009daa:	6938      	ldr	r0, [r7, #16]
 8009dac:	f000 f874 	bl	8009e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009db0:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <vPortFree+0xc0>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	4a06      	ldr	r2, [pc, #24]	; (8009dd0 <vPortFree+0xc0>)
 8009db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009dba:	f7fe facd 	bl	8008358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dbe:	bf00      	nop
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20007f90 	.word	0x20007f90
 8009dcc:	20007f80 	.word	0x20007f80
 8009dd0:	20007f8c 	.word	0x20007f8c

08009dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009dda:	f247 5330 	movw	r3, #30000	; 0x7530
 8009dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009de0:	4b27      	ldr	r3, [pc, #156]	; (8009e80 <prvHeapInit+0xac>)
 8009de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00c      	beq.n	8009e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3307      	adds	r3, #7
 8009df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0307 	bic.w	r3, r3, #7
 8009dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	4a1f      	ldr	r2, [pc, #124]	; (8009e80 <prvHeapInit+0xac>)
 8009e04:	4413      	add	r3, r2
 8009e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e0c:	4a1d      	ldr	r2, [pc, #116]	; (8009e84 <prvHeapInit+0xb0>)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e12:	4b1c      	ldr	r3, [pc, #112]	; (8009e84 <prvHeapInit+0xb0>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e20:	2208      	movs	r2, #8
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	1a9b      	subs	r3, r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f023 0307 	bic.w	r3, r3, #7
 8009e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4a15      	ldr	r2, [pc, #84]	; (8009e88 <prvHeapInit+0xb4>)
 8009e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e36:	4b14      	ldr	r3, [pc, #80]	; (8009e88 <prvHeapInit+0xb4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e3e:	4b12      	ldr	r3, [pc, #72]	; (8009e88 <prvHeapInit+0xb4>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	1ad2      	subs	r2, r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e54:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <prvHeapInit+0xb4>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	4a0a      	ldr	r2, [pc, #40]	; (8009e8c <prvHeapInit+0xb8>)
 8009e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	4a09      	ldr	r2, [pc, #36]	; (8009e90 <prvHeapInit+0xbc>)
 8009e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e6c:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <prvHeapInit+0xc0>)
 8009e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e72:	601a      	str	r2, [r3, #0]
}
 8009e74:	bf00      	nop
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	20000a44 	.word	0x20000a44
 8009e84:	20007f74 	.word	0x20007f74
 8009e88:	20007f7c 	.word	0x20007f7c
 8009e8c:	20007f84 	.word	0x20007f84
 8009e90:	20007f80 	.word	0x20007f80
 8009e94:	20007f90 	.word	0x20007f90

08009e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ea0:	4b28      	ldr	r3, [pc, #160]	; (8009f44 <prvInsertBlockIntoFreeList+0xac>)
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	e002      	b.n	8009eac <prvInsertBlockIntoFreeList+0x14>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d8f7      	bhi.n	8009ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d108      	bne.n	8009eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	441a      	add	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	441a      	add	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d118      	bne.n	8009f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	4b15      	ldr	r3, [pc, #84]	; (8009f48 <prvInsertBlockIntoFreeList+0xb0>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d00d      	beq.n	8009f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	441a      	add	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	e008      	b.n	8009f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f16:	4b0c      	ldr	r3, [pc, #48]	; (8009f48 <prvInsertBlockIntoFreeList+0xb0>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	e003      	b.n	8009f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d002      	beq.n	8009f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f36:	bf00      	nop
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20007f74 	.word	0x20007f74
 8009f48:	20007f7c 	.word	0x20007f7c

08009f4c <ThreadM95Task>:




void ThreadM95Task(void const * argument)
{
 8009f4c:	b590      	push	{r4, r7, lr}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af02      	add	r7, sp, #8
 8009f52:	6078      	str	r0, [r7, #4]
	osThreadSuspend(M95TaskHandle);
 8009f54:	4b84      	ldr	r3, [pc, #528]	; (800a168 <ThreadM95Task+0x21c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fc fd23 	bl	80069a4 <osThreadSuspend>
	osSemaphoreWait(TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 8009f5e:	4b83      	ldr	r3, [pc, #524]	; (800a16c <ThreadM95Task+0x220>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f04f 31ff 	mov.w	r1, #4294967295
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fc fbbc 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(Ring_Center_TimerHandle, 90000); // запускаем таймер для перезагрузки по его окончанию
 8009f6c:	4b80      	ldr	r3, [pc, #512]	; (800a170 <ThreadM95Task+0x224>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4980      	ldr	r1, [pc, #512]	; (800a174 <ThreadM95Task+0x228>)
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fc fa5a 	bl	800642c <osTimerStart>


	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8009f78:	4b7f      	ldr	r3, [pc, #508]	; (800a178 <ThreadM95Task+0x22c>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fc faeb 	bl	800655c <osMutexWait>

	fm25v02_write(2*VERSION_REG, 1); // записываем версию прошивки для бутлоадера старший байт
 8009f86:	2101      	movs	r1, #1
 8009f88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009f8c:	f001 fd66 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*VERSION_REG+1, 1); // записываем версию прошивки для бутлоадера младший байт
 8009f90:	2101      	movs	r1, #1
 8009f92:	f242 0001 	movw	r0, #8193	; 0x2001
 8009f96:	f001 fd61 	bl	800ba5c <fm25v02_write>

	fm25v02_write(2*BOOTLOADER_VERSION_REG, 0); // записываем версию прошивки бутлоадера старший байт
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009fa0:	f001 fd5c 	bl	800ba5c <fm25v02_write>
	fm25v02_write(2*BOOTLOADER_VERSION_REG+1, 255); // записываем версию прошивки бутлоадера младший байт
 8009fa4:	21ff      	movs	r1, #255	; 0xff
 8009fa6:	f240 2001 	movw	r0, #513	; 0x201
 8009faa:	f001 fd57 	bl	800ba5c <fm25v02_write>

	osMutexRelease(Fm25v02MutexHandle);
 8009fae:	4b72      	ldr	r3, [pc, #456]	; (800a178 <ThreadM95Task+0x22c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fc fb20 	bl	80065f8 <osMutexRelease>


	for(;;)
	{

		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8009fb8:	4b6f      	ldr	r3, [pc, #444]	; (800a178 <ThreadM95Task+0x22c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fc facb 	bl	800655c <osMutexWait>

		fm25v02_read(2*IP_1_REG+1, &ip1); // читаем значение IP адреса сервера из памяти
 8009fc6:	496d      	ldr	r1, [pc, #436]	; (800a17c <ThreadM95Task+0x230>)
 8009fc8:	f242 105f 	movw	r0, #8543	; 0x215f
 8009fcc:	f001 fd0c 	bl	800b9e8 <fm25v02_read>
		fm25v02_read(2*IP_2_REG+1, &ip2);
 8009fd0:	496b      	ldr	r1, [pc, #428]	; (800a180 <ThreadM95Task+0x234>)
 8009fd2:	f242 1061 	movw	r0, #8545	; 0x2161
 8009fd6:	f001 fd07 	bl	800b9e8 <fm25v02_read>
		fm25v02_read(2*IP_3_REG+1, &ip3);
 8009fda:	496a      	ldr	r1, [pc, #424]	; (800a184 <ThreadM95Task+0x238>)
 8009fdc:	f242 1063 	movw	r0, #8547	; 0x2163
 8009fe0:	f001 fd02 	bl	800b9e8 <fm25v02_read>
		fm25v02_read(2*IP_4_REG+1, &ip4);
 8009fe4:	4968      	ldr	r1, [pc, #416]	; (800a188 <ThreadM95Task+0x23c>)
 8009fe6:	f242 1065 	movw	r0, #8549	; 0x2165
 8009fea:	f001 fcfd 	bl	800b9e8 <fm25v02_read>
		fm25v02_read(2*PORT_HIGH_REG+1, &port_high_reg); // читаем значение старшего байта порта сервера
 8009fee:	4967      	ldr	r1, [pc, #412]	; (800a18c <ThreadM95Task+0x240>)
 8009ff0:	f242 1067 	movw	r0, #8551	; 0x2167
 8009ff4:	f001 fcf8 	bl	800b9e8 <fm25v02_read>
		fm25v02_read(2*PORT_LOW_REG+1, &port_low_reg); // читаем занчение младшего байта порта сервера
 8009ff8:	4965      	ldr	r1, [pc, #404]	; (800a190 <ThreadM95Task+0x244>)
 8009ffa:	f242 1069 	movw	r0, #8553	; 0x2169
 8009ffe:	f001 fcf3 	bl	800b9e8 <fm25v02_read>

		osMutexRelease(Fm25v02MutexHandle);
 800a002:	4b5d      	ldr	r3, [pc, #372]	; (800a178 <ThreadM95Task+0x22c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4618      	mov	r0, r3
 800a008:	f7fc faf6 	bl	80065f8 <osMutexRelease>

		port = (((uint16_t)port_high_reg)<<8)|((uint16_t)port_low_reg); // вычисляем общее значение регистра порта
 800a00c:	4b5f      	ldr	r3, [pc, #380]	; (800a18c <ThreadM95Task+0x240>)
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	b2db      	uxtb	r3, r3
 800a012:	021b      	lsls	r3, r3, #8
 800a014:	b21a      	sxth	r2, r3
 800a016:	4b5e      	ldr	r3, [pc, #376]	; (800a190 <ThreadM95Task+0x244>)
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	b21b      	sxth	r3, r3
 800a01e:	4313      	orrs	r3, r2
 800a020:	b21b      	sxth	r3, r3
 800a022:	b29a      	uxth	r2, r3
 800a024:	4b5b      	ldr	r3, [pc, #364]	; (800a194 <ThreadM95Task+0x248>)
 800a026:	801a      	strh	r2, [r3, #0]

		if ( (ip1==0)&&(ip2==0)&&(ip3==0)&&(ip4==0)&&(port==0) ) // Если значения ip адреса сервера и его номера порта при инициализации нулевые, то выставляем их значения по умолчанию
 800a028:	4b54      	ldr	r3, [pc, #336]	; (800a17c <ThreadM95Task+0x230>)
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d123      	bne.n	800a07a <ThreadM95Task+0x12e>
 800a032:	4b53      	ldr	r3, [pc, #332]	; (800a180 <ThreadM95Task+0x234>)
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d11e      	bne.n	800a07a <ThreadM95Task+0x12e>
 800a03c:	4b51      	ldr	r3, [pc, #324]	; (800a184 <ThreadM95Task+0x238>)
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d119      	bne.n	800a07a <ThreadM95Task+0x12e>
 800a046:	4b50      	ldr	r3, [pc, #320]	; (800a188 <ThreadM95Task+0x23c>)
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d114      	bne.n	800a07a <ThreadM95Task+0x12e>
 800a050:	4b50      	ldr	r3, [pc, #320]	; (800a194 <ThreadM95Task+0x248>)
 800a052:	881b      	ldrh	r3, [r3, #0]
 800a054:	b29b      	uxth	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10f      	bne.n	800a07a <ThreadM95Task+0x12e>
		{
			// сервер сигнализации
			ip1 = 195;    // значение по умолчанию
 800a05a:	4b48      	ldr	r3, [pc, #288]	; (800a17c <ThreadM95Task+0x230>)
 800a05c:	22c3      	movs	r2, #195	; 0xc3
 800a05e:	701a      	strb	r2, [r3, #0]
			ip2 = 208;    // значение по умолчанию
 800a060:	4b47      	ldr	r3, [pc, #284]	; (800a180 <ThreadM95Task+0x234>)
 800a062:	22d0      	movs	r2, #208	; 0xd0
 800a064:	701a      	strb	r2, [r3, #0]
			ip3 = 163;    // значение по умолчанию
 800a066:	4b47      	ldr	r3, [pc, #284]	; (800a184 <ThreadM95Task+0x238>)
 800a068:	22a3      	movs	r2, #163	; 0xa3
 800a06a:	701a      	strb	r2, [r3, #0]
			ip4 = 67;     // значение по умолчанию
 800a06c:	4b46      	ldr	r3, [pc, #280]	; (800a188 <ThreadM95Task+0x23c>)
 800a06e:	2243      	movs	r2, #67	; 0x43
 800a070:	701a      	strb	r2, [r3, #0]
			port = 35050; // значение по умолчанию
 800a072:	4b48      	ldr	r3, [pc, #288]	; (800a194 <ThreadM95Task+0x248>)
 800a074:	f648 02ea 	movw	r2, #35050	; 0x88ea
 800a078:	801a      	strh	r2, [r3, #0]
		}

		osMutexRelease(UartMutexHandle);
		*/

		if( connect_state == 0 )
 800a07a:	4b47      	ldr	r3, [pc, #284]	; (800a198 <ThreadM95Task+0x24c>)
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	f040 8178 	bne.w	800a376 <ThreadM95Task+0x42a>
		{

		osMutexWait(UartMutexHandle, osWaitForever);
 800a086:	4b45      	ldr	r3, [pc, #276]	; (800a19c <ThreadM95Task+0x250>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f04f 31ff 	mov.w	r1, #4294967295
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fc fa64 	bl	800655c <osMutexWait>

		switch( AT_CIPSTATUS() )
 800a094:	f001 ffb4 	bl	800c000 <AT_CIPSTATUS>
 800a098:	4603      	mov	r3, r0
 800a09a:	3b01      	subs	r3, #1
 800a09c:	2b0c      	cmp	r3, #12
 800a09e:	f200 8165 	bhi.w	800a36c <ThreadM95Task+0x420>
 800a0a2:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <ThreadM95Task+0x15c>)
 800a0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a8:	0800a331 	.word	0x0800a331
 800a0ac:	0800a0dd 	.word	0x0800a0dd
 800a0b0:	0800a0fd 	.word	0x0800a0fd
 800a0b4:	0800a36d 	.word	0x0800a36d
 800a0b8:	0800a36d 	.word	0x0800a36d
 800a0bc:	0800a113 	.word	0x0800a113
 800a0c0:	0800a129 	.word	0x0800a129
 800a0c4:	0800a32b 	.word	0x0800a32b
 800a0c8:	0800a36d 	.word	0x0800a36d
 800a0cc:	0800a36d 	.word	0x0800a36d
 800a0d0:	0800a1ad 	.word	0x0800a1ad
 800a0d4:	0800a317 	.word	0x0800a317
 800a0d8:	0800a2db 	.word	0x0800a2db
		{

			case IP_INITIAL:

				LED1_OFF();
 800a0dc:	f001 fd84 	bl	800bbe8 <LED1_OFF>

				ATE0();
 800a0e0:	f001 fe64 	bl	800bdac <ATE0>

				if( AT_CSTT("internet.mts.ru","mts","mts") == AT_OK )
 800a0e4:	4a2e      	ldr	r2, [pc, #184]	; (800a1a0 <ThreadM95Task+0x254>)
 800a0e6:	492e      	ldr	r1, [pc, #184]	; (800a1a0 <ThreadM95Task+0x254>)
 800a0e8:	482e      	ldr	r0, [pc, #184]	; (800a1a4 <ThreadM95Task+0x258>)
 800a0ea:	f002 f8c5 	bl	800c278 <AT_CSTT>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f040 8130 	bne.w	800a356 <ThreadM95Task+0x40a>
				{
					LED2_ON();
 800a0f6:	f001 fd8f 	bl	800bc18 <LED2_ON>
				}

			break;
 800a0fa:	e12c      	b.n	800a356 <ThreadM95Task+0x40a>

			case IP_START:

				LED1_OFF();
 800a0fc:	f001 fd74 	bl	800bbe8 <LED1_OFF>

				if ( AT_CIICR() == AT_OK )
 800a100:	f002 f936 	bl	800c370 <AT_CIICR>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	f040 8127 	bne.w	800a35a <ThreadM95Task+0x40e>
				{
					LED3_ON();
 800a10c:	f001 fd90 	bl	800bc30 <LED3_ON>
				}

			break;
 800a110:	e123      	b.n	800a35a <ThreadM95Task+0x40e>

			case IP_GPRSACT:

				LED1_OFF();
 800a112:	f001 fd69 	bl	800bbe8 <LED1_OFF>

				if( AT_CIFSR() == AT_OK )
 800a116:	f002 f995 	bl	800c444 <AT_CIFSR>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f040 811e 	bne.w	800a35e <ThreadM95Task+0x412>
				{
					LED4_ON();
 800a122:	f001 fd91 	bl	800bc48 <LED4_ON>
				}

			break;
 800a126:	e11a      	b.n	800a35e <ThreadM95Task+0x412>

			case IP_STATUS:

				LED1_OFF();
 800a128:	f001 fd5e 	bl	800bbe8 <LED1_OFF>

				if( AT_CIPSTART("TCP", ip1, ip2, ip3, ip4, port) == AT_OK )
 800a12c:	4b13      	ldr	r3, [pc, #76]	; (800a17c <ThreadM95Task+0x230>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	b2d9      	uxtb	r1, r3
 800a132:	4b13      	ldr	r3, [pc, #76]	; (800a180 <ThreadM95Task+0x234>)
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	b2d8      	uxtb	r0, r3
 800a138:	4b12      	ldr	r3, [pc, #72]	; (800a184 <ThreadM95Task+0x238>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	b2dc      	uxtb	r4, r3
 800a13e:	4b12      	ldr	r3, [pc, #72]	; (800a188 <ThreadM95Task+0x23c>)
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	b2db      	uxtb	r3, r3
 800a144:	4a13      	ldr	r2, [pc, #76]	; (800a194 <ThreadM95Task+0x248>)
 800a146:	8812      	ldrh	r2, [r2, #0]
 800a148:	b292      	uxth	r2, r2
 800a14a:	9201      	str	r2, [sp, #4]
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	4623      	mov	r3, r4
 800a150:	4602      	mov	r2, r0
 800a152:	4815      	ldr	r0, [pc, #84]	; (800a1a8 <ThreadM95Task+0x25c>)
 800a154:	f002 f9e0 	bl	800c518 <AT_CIPSTART>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f040 8101 	bne.w	800a362 <ThreadM95Task+0x416>
				{
					LED5_ON();
 800a160:	f001 fd7e 	bl	800bc60 <LED5_ON>
				}

			break;
 800a164:	e0fd      	b.n	800a362 <ThreadM95Task+0x416>
 800a166:	bf00      	nop
 800a168:	20016c10 	.word	0x20016c10
 800a16c:	20016e4c 	.word	0x20016e4c
 800a170:	20016b3c 	.word	0x20016b3c
 800a174:	00015f90 	.word	0x00015f90
 800a178:	20016c3c 	.word	0x20016c3c
 800a17c:	20007f94 	.word	0x20007f94
 800a180:	20007f95 	.word	0x20007f95
 800a184:	20007f96 	.word	0x20007f96
 800a188:	20007f97 	.word	0x20007f97
 800a18c:	20007f98 	.word	0x20007f98
 800a190:	20007f99 	.word	0x20007f99
 800a194:	20007f9a 	.word	0x20007f9a
 800a198:	20007f9c 	.word	0x20007f9c
 800a19c:	20016b38 	.word	0x20016b38
 800a1a0:	0800f8a4 	.word	0x0800f8a4
 800a1a4:	0800f8a8 	.word	0x0800f8a8
 800a1a8:	0800f8b8 	.word	0x0800f8b8

			case CONNECT_OK:

				LED1_ON();
 800a1ac:	f001 fd28 	bl	800bc00 <LED1_ON>

				if( AT_CSQ(&level) == AT_OK )
 800a1b0:	487d      	ldr	r0, [pc, #500]	; (800a3a8 <ThreadM95Task+0x45c>)
 800a1b2:	f001 fea7 	bl	800bf04 <AT_CSQ>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d117      	bne.n	800a1ec <ThreadM95Task+0x2a0>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a1bc:	4b7b      	ldr	r3, [pc, #492]	; (800a3ac <ThreadM95Task+0x460>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f04f 31ff 	mov.w	r1, #4294967295
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fc f9c9 	bl	800655c <osMutexWait>
					fm25v02_write(2*SIGNAL_LEVEL_REG, 0x00);
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	f242 00a6 	movw	r0, #8358	; 0x20a6
 800a1d0:	f001 fc44 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*SIGNAL_LEVEL_REG+1, level);
 800a1d4:	4b74      	ldr	r3, [pc, #464]	; (800a3a8 <ThreadM95Task+0x45c>)
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	4619      	mov	r1, r3
 800a1da:	f242 00a7 	movw	r0, #8359	; 0x20a7
 800a1de:	f001 fc3d 	bl	800ba5c <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 800a1e2:	4b72      	ldr	r3, [pc, #456]	; (800a3ac <ThreadM95Task+0x460>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fc fa06 	bl	80065f8 <osMutexRelease>
				}

				if(	AT_CCID(&id2[0], &id1[0]) == AT_OK ) // читаем CCID сим-карты
 800a1ec:	4970      	ldr	r1, [pc, #448]	; (800a3b0 <ThreadM95Task+0x464>)
 800a1ee:	4871      	ldr	r0, [pc, #452]	; (800a3b4 <ThreadM95Task+0x468>)
 800a1f0:	f002 fb5e 	bl	800c8b0 <AT_CCID>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d16b      	bne.n	800a2d2 <ThreadM95Task+0x386>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a1fa:	4b6c      	ldr	r3, [pc, #432]	; (800a3ac <ThreadM95Task+0x460>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f04f 31ff 	mov.w	r1, #4294967295
 800a202:	4618      	mov	r0, r3
 800a204:	f7fc f9aa 	bl	800655c <osMutexWait>

					fm25v02_write(2*ICCID_NUMBER_REG1, 0x00); // записываем в регистры CCID сим-карты
 800a208:	2100      	movs	r1, #0
 800a20a:	f242 00b0 	movw	r0, #8368	; 0x20b0
 800a20e:	f001 fc25 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG1+1, id2[0]);
 800a212:	4b68      	ldr	r3, [pc, #416]	; (800a3b4 <ThreadM95Task+0x468>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	4619      	mov	r1, r3
 800a218:	f242 00b1 	movw	r0, #8369	; 0x20b1
 800a21c:	f001 fc1e 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2, 0x00);
 800a220:	2100      	movs	r1, #0
 800a222:	f242 00b2 	movw	r0, #8370	; 0x20b2
 800a226:	f001 fc19 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2+1, id2[1]);
 800a22a:	4b62      	ldr	r3, [pc, #392]	; (800a3b4 <ThreadM95Task+0x468>)
 800a22c:	785b      	ldrb	r3, [r3, #1]
 800a22e:	4619      	mov	r1, r3
 800a230:	f242 00b3 	movw	r0, #8371	; 0x20b3
 800a234:	f001 fc12 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3, 0x00);
 800a238:	2100      	movs	r1, #0
 800a23a:	f242 00b4 	movw	r0, #8372	; 0x20b4
 800a23e:	f001 fc0d 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3+1, id2[2]);
 800a242:	4b5c      	ldr	r3, [pc, #368]	; (800a3b4 <ThreadM95Task+0x468>)
 800a244:	789b      	ldrb	r3, [r3, #2]
 800a246:	4619      	mov	r1, r3
 800a248:	f242 00b5 	movw	r0, #8373	; 0x20b5
 800a24c:	f001 fc06 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4, 0x00);
 800a250:	2100      	movs	r1, #0
 800a252:	f242 00b6 	movw	r0, #8374	; 0x20b6
 800a256:	f001 fc01 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4+1, id2[3]);
 800a25a:	4b56      	ldr	r3, [pc, #344]	; (800a3b4 <ThreadM95Task+0x468>)
 800a25c:	78db      	ldrb	r3, [r3, #3]
 800a25e:	4619      	mov	r1, r3
 800a260:	f242 00b7 	movw	r0, #8375	; 0x20b7
 800a264:	f001 fbfa 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5, 0x00);
 800a268:	2100      	movs	r1, #0
 800a26a:	f242 00b8 	movw	r0, #8376	; 0x20b8
 800a26e:	f001 fbf5 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5+1, id2[4]);
 800a272:	4b50      	ldr	r3, [pc, #320]	; (800a3b4 <ThreadM95Task+0x468>)
 800a274:	791b      	ldrb	r3, [r3, #4]
 800a276:	4619      	mov	r1, r3
 800a278:	f242 00b9 	movw	r0, #8377	; 0x20b9
 800a27c:	f001 fbee 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6, 0x00);
 800a280:	2100      	movs	r1, #0
 800a282:	f242 00ba 	movw	r0, #8378	; 0x20ba
 800a286:	f001 fbe9 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6+1, id2[5]);
 800a28a:	4b4a      	ldr	r3, [pc, #296]	; (800a3b4 <ThreadM95Task+0x468>)
 800a28c:	795b      	ldrb	r3, [r3, #5]
 800a28e:	4619      	mov	r1, r3
 800a290:	f242 00bb 	movw	r0, #8379	; 0x20bb
 800a294:	f001 fbe2 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7, 0x00);
 800a298:	2100      	movs	r1, #0
 800a29a:	f242 00bc 	movw	r0, #8380	; 0x20bc
 800a29e:	f001 fbdd 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7+1, id2[6]);
 800a2a2:	4b44      	ldr	r3, [pc, #272]	; (800a3b4 <ThreadM95Task+0x468>)
 800a2a4:	799b      	ldrb	r3, [r3, #6]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	f242 00bd 	movw	r0, #8381	; 0x20bd
 800a2ac:	f001 fbd6 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8, 0x00);
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	f242 00be 	movw	r0, #8382	; 0x20be
 800a2b6:	f001 fbd1 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8+1, id2[7]);
 800a2ba:	4b3e      	ldr	r3, [pc, #248]	; (800a3b4 <ThreadM95Task+0x468>)
 800a2bc:	79db      	ldrb	r3, [r3, #7]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	f242 00bf 	movw	r0, #8383	; 0x20bf
 800a2c4:	f001 fbca 	bl	800ba5c <fm25v02_write>

					osMutexRelease(Fm25v02MutexHandle);
 800a2c8:	4b38      	ldr	r3, [pc, #224]	; (800a3ac <ThreadM95Task+0x460>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fc f993 	bl	80065f8 <osMutexRelease>
				}

				connect_state = 1;
 800a2d2:	4b39      	ldr	r3, [pc, #228]	; (800a3b8 <ThreadM95Task+0x46c>)
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	701a      	strb	r2, [r3, #0]

			break;
 800a2d8:	e048      	b.n	800a36c <ThreadM95Task+0x420>

			case TCP_CLOSED:

				LED1_OFF();
 800a2da:	f001 fc85 	bl	800bbe8 <LED1_OFF>

				if( AT_CIPSTART("TCP", ip1, ip2, ip3, ip4, port) == AT_OK )
 800a2de:	4b37      	ldr	r3, [pc, #220]	; (800a3bc <ThreadM95Task+0x470>)
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	b2d9      	uxtb	r1, r3
 800a2e4:	4b36      	ldr	r3, [pc, #216]	; (800a3c0 <ThreadM95Task+0x474>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	b2d8      	uxtb	r0, r3
 800a2ea:	4b36      	ldr	r3, [pc, #216]	; (800a3c4 <ThreadM95Task+0x478>)
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	b2dc      	uxtb	r4, r3
 800a2f0:	4b35      	ldr	r3, [pc, #212]	; (800a3c8 <ThreadM95Task+0x47c>)
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	4a35      	ldr	r2, [pc, #212]	; (800a3cc <ThreadM95Task+0x480>)
 800a2f8:	8812      	ldrh	r2, [r2, #0]
 800a2fa:	b292      	uxth	r2, r2
 800a2fc:	9201      	str	r2, [sp, #4]
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	4623      	mov	r3, r4
 800a302:	4602      	mov	r2, r0
 800a304:	4832      	ldr	r0, [pc, #200]	; (800a3d0 <ThreadM95Task+0x484>)
 800a306:	f002 f907 	bl	800c518 <AT_CIPSTART>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d12a      	bne.n	800a366 <ThreadM95Task+0x41a>
				{
					LED5_ON();
 800a310:	f001 fca6 	bl	800bc60 <LED5_ON>
				}

			break;
 800a314:	e027      	b.n	800a366 <ThreadM95Task+0x41a>

			case PDP_DEACT:

				LED1_OFF();
 800a316:	f001 fc67 	bl	800bbe8 <LED1_OFF>

				if( AT_CIPSHUT() == AT_OK )
 800a31a:	f002 fa5f 	bl	800c7dc <AT_CIPSHUT>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d122      	bne.n	800a36a <ThreadM95Task+0x41e>
				{
					LED6_ON();
 800a324:	f001 fca8 	bl	800bc78 <LED6_ON>
				}

			break;
 800a328:	e01f      	b.n	800a36a <ThreadM95Task+0x41e>

			case TCP_CONNECTING:

				LED1_OFF();
 800a32a:	f001 fc5d 	bl	800bbe8 <LED1_OFF>

			break;
 800a32e:	e01d      	b.n	800a36c <ThreadM95Task+0x420>

			case AT_ERROR:

				if(AT()==AT_ERROR) // два раза проверяем, есть ли ответ на команду АТ, если нет, включаем питание
 800a330:	f001 fd92 	bl	800be58 <AT>
 800a334:	4603      	mov	r3, r0
 800a336:	2b01      	cmp	r3, #1
 800a338:	d10a      	bne.n	800a350 <ThreadM95Task+0x404>
				{
					if(AT()==AT_ERROR)
 800a33a:	f001 fd8d 	bl	800be58 <AT>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b01      	cmp	r3, #1
 800a342:	d105      	bne.n	800a350 <ThreadM95Task+0x404>
					{
						m95_power_on();
 800a344:	f001 fcd8 	bl	800bcf8 <m95_power_on>
						HAL_Delay(3000);
 800a348:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a34c:	f7f7 fb34 	bl	80019b8 <HAL_Delay>
					}
				}

				if( ATE0() == AT_OK )
 800a350:	f001 fd2c 	bl	800bdac <ATE0>
				{

				}

			break;
 800a354:	e00a      	b.n	800a36c <ThreadM95Task+0x420>
			break;
 800a356:	bf00      	nop
 800a358:	e008      	b.n	800a36c <ThreadM95Task+0x420>
			break;
 800a35a:	bf00      	nop
 800a35c:	e006      	b.n	800a36c <ThreadM95Task+0x420>
			break;
 800a35e:	bf00      	nop
 800a360:	e004      	b.n	800a36c <ThreadM95Task+0x420>
			break;
 800a362:	bf00      	nop
 800a364:	e002      	b.n	800a36c <ThreadM95Task+0x420>
			break;
 800a366:	bf00      	nop
 800a368:	e000      	b.n	800a36c <ThreadM95Task+0x420>
			break;
 800a36a:	bf00      	nop

		}

		osMutexRelease(UartMutexHandle);
 800a36c:	4b19      	ldr	r3, [pc, #100]	; (800a3d4 <ThreadM95Task+0x488>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4618      	mov	r0, r3
 800a372:	f7fc f941 	bl	80065f8 <osMutexRelease>

		}

		if( connect_state == 1 )
 800a376:	4b10      	ldr	r3, [pc, #64]	; (800a3b8 <ThreadM95Task+0x46c>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d10e      	bne.n	800a39e <ThreadM95Task+0x452>
		{
			connect_timer++;
 800a380:	4b15      	ldr	r3, [pc, #84]	; (800a3d8 <ThreadM95Task+0x48c>)
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	b2db      	uxtb	r3, r3
 800a386:	3301      	adds	r3, #1
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	4b13      	ldr	r3, [pc, #76]	; (800a3d8 <ThreadM95Task+0x48c>)
 800a38c:	701a      	strb	r2, [r3, #0]
			if( connect_timer >= 10)
 800a38e:	4b12      	ldr	r3, [pc, #72]	; (800a3d8 <ThreadM95Task+0x48c>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b09      	cmp	r3, #9
 800a396:	d902      	bls.n	800a39e <ThreadM95Task+0x452>
			{
				connect_state = 0;
 800a398:	4b07      	ldr	r3, [pc, #28]	; (800a3b8 <ThreadM95Task+0x46c>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	701a      	strb	r2, [r3, #0]
			}
		}


		osDelay(1000);
 800a39e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a3a2:	f7fb fffa 	bl	800639a <osDelay>
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a3a6:	e607      	b.n	8009fb8 <ThreadM95Task+0x6c>
 800a3a8:	20016f10 	.word	0x20016f10
 800a3ac:	20016c3c 	.word	0x20016c3c
 800a3b0:	20016f20 	.word	0x20016f20
 800a3b4:	20016f14 	.word	0x20016f14
 800a3b8:	20007f9c 	.word	0x20007f9c
 800a3bc:	20007f94 	.word	0x20007f94
 800a3c0:	20007f95 	.word	0x20007f95
 800a3c4:	20007f96 	.word	0x20007f96
 800a3c8:	20007f97 	.word	0x20007f97
 800a3cc:	20007f9a 	.word	0x20007f9a
 800a3d0:	0800f8b8 	.word	0x0800f8b8
 800a3d4:	20016b38 	.word	0x20016b38
 800a3d8:	20007f9d 	.word	0x20007f9d

0800a3dc <__NVIC_SystemReset>:
{
 800a3dc:	b480      	push	{r7}
 800a3de:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a3e0:	f3bf 8f4f 	dsb	sy
}
 800a3e4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a3e6:	4b06      	ldr	r3, [pc, #24]	; (800a400 <__NVIC_SystemReset+0x24>)
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a3ee:	4904      	ldr	r1, [pc, #16]	; (800a400 <__NVIC_SystemReset+0x24>)
 800a3f0:	4b04      	ldr	r3, [pc, #16]	; (800a404 <__NVIC_SystemReset+0x28>)
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a3f6:	f3bf 8f4f 	dsb	sy
}
 800a3fa:	bf00      	nop
    __NOP();
 800a3fc:	bf00      	nop
 800a3fe:	e7fd      	b.n	800a3fc <__NVIC_SystemReset+0x20>
 800a400:	e000ed00 	.word	0xe000ed00
 800a404:	05fa0004 	.word	0x05fa0004

0800a408 <ThreadMainTask>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
}


void ThreadMainTask(void const * argument)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
	uint8_t temp_read_l;

	uint8_t temp_reg_h1;
	uint8_t temp_reg_l1;

	osThreadSuspend(MainTaskHandle); // ждем пока не будут вычитаны регистры и не получен статус фаз А1,А2,В1,В2,С1,С2
 800a410:	4bbf      	ldr	r3, [pc, #764]	; (800a710 <ThreadMainTask+0x308>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4618      	mov	r0, r3
 800a416:	f7fc fac5 	bl	80069a4 <osThreadSuspend>
	//bootloader_registers.ready_download_reg = 0x0001;
	//osMutexRelease(Fm25v02MutexHandle);

	//----test--------------------------------

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a41a:	4bbe      	ldr	r3, [pc, #760]	; (800a714 <ThreadMainTask+0x30c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f04f 31ff 	mov.w	r1, #4294967295
 800a422:	4618      	mov	r0, r3
 800a424:	f7fc f89a 	bl	800655c <osMutexWait>

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h1);
 800a428:	f107 030c 	add.w	r3, r7, #12
 800a42c:	4619      	mov	r1, r3
 800a42e:	f44f 7010 	mov.w	r0, #576	; 0x240
 800a432:	f001 fad9 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l1);
 800a436:	f107 030b 	add.w	r3, r7, #11
 800a43a:	4619      	mov	r1, r3
 800a43c:	f240 2041 	movw	r0, #577	; 0x241
 800a440:	f001 fad2 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a444:	7b3b      	ldrb	r3, [r7, #12]
 800a446:	021b      	lsls	r3, r3, #8
 800a448:	b21a      	sxth	r2, r3
 800a44a:	7afb      	ldrb	r3, [r7, #11]
 800a44c:	b21b      	sxth	r3, r3
 800a44e:	4313      	orrs	r3, r2
 800a450:	b21b      	sxth	r3, r3
 800a452:	b29a      	uxth	r2, r3
 800a454:	4bb0      	ldr	r3, [pc, #704]	; (800a718 <ThreadMainTask+0x310>)
 800a456:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h1);
 800a458:	f107 030c 	add.w	r3, r7, #12
 800a45c:	4619      	mov	r1, r3
 800a45e:	f240 2042 	movw	r0, #578	; 0x242
 800a462:	f001 fac1 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l1);
 800a466:	f107 030b 	add.w	r3, r7, #11
 800a46a:	4619      	mov	r1, r3
 800a46c:	f240 2043 	movw	r0, #579	; 0x243
 800a470:	f001 faba 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a474:	7b3b      	ldrb	r3, [r7, #12]
 800a476:	021b      	lsls	r3, r3, #8
 800a478:	b21a      	sxth	r2, r3
 800a47a:	7afb      	ldrb	r3, [r7, #11]
 800a47c:	b21b      	sxth	r3, r3
 800a47e:	4313      	orrs	r3, r2
 800a480:	b21b      	sxth	r3, r3
 800a482:	b29a      	uxth	r2, r3
 800a484:	4ba4      	ldr	r3, [pc, #656]	; (800a718 <ThreadMainTask+0x310>)
 800a486:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h1);
 800a488:	f107 030c 	add.w	r3, r7, #12
 800a48c:	4619      	mov	r1, r3
 800a48e:	f44f 7011 	mov.w	r0, #580	; 0x244
 800a492:	f001 faa9 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l1);
 800a496:	f107 030b 	add.w	r3, r7, #11
 800a49a:	4619      	mov	r1, r3
 800a49c:	f240 2045 	movw	r0, #581	; 0x245
 800a4a0:	f001 faa2 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a4a4:	7b3b      	ldrb	r3, [r7, #12]
 800a4a6:	021b      	lsls	r3, r3, #8
 800a4a8:	b21a      	sxth	r2, r3
 800a4aa:	7afb      	ldrb	r3, [r7, #11]
 800a4ac:	b21b      	sxth	r3, r3
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	b21b      	sxth	r3, r3
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	4b98      	ldr	r3, [pc, #608]	; (800a718 <ThreadMainTask+0x310>)
 800a4b6:	869a      	strh	r2, [r3, #52]	; 0x34

	osMutexRelease(Fm25v02MutexHandle);
 800a4b8:	4b96      	ldr	r3, [pc, #600]	; (800a714 <ThreadMainTask+0x30c>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fc f89b 	bl	80065f8 <osMutexRelease>

	//----------------------------------------

	if(bootloader_registers.clear_page_on_reg != 0x0001)
 800a4c2:	4b95      	ldr	r3, [pc, #596]	; (800a718 <ThreadMainTask+0x310>)
 800a4c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d018      	beq.n	800a4fc <ThreadMainTask+0xf4>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр очистки страниц, чтобы при запуске не произошла очистка
 800a4ca:	4b92      	ldr	r3, [pc, #584]	; (800a714 <ThreadMainTask+0x30c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f04f 31ff 	mov.w	r1, #4294967295
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fc f842 	bl	800655c <osMutexWait>
		fm25v02_write(2*CLEAR_PAGE_ON_REG, 0x00);
 800a4d8:	2100      	movs	r1, #0
 800a4da:	f44f 7010 	mov.w	r0, #576	; 0x240
 800a4de:	f001 fabd 	bl	800ba5c <fm25v02_write>
		fm25v02_write(2*CLEAR_PAGE_ON_REG+1, 0x00);
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	f240 2041 	movw	r0, #577	; 0x241
 800a4e8:	f001 fab8 	bl	800ba5c <fm25v02_write>
		bootloader_registers.clear_page_on_reg = 0x0000;
 800a4ec:	4b8a      	ldr	r3, [pc, #552]	; (800a718 <ThreadMainTask+0x310>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	861a      	strh	r2, [r3, #48]	; 0x30
		osMutexRelease(Fm25v02MutexHandle);
 800a4f2:	4b88      	ldr	r3, [pc, #544]	; (800a714 <ThreadMainTask+0x30c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fc f87e 	bl	80065f8 <osMutexRelease>
	}
	if(bootloader_registers.write_array_reg != 0x0001)
 800a4fc:	4b86      	ldr	r3, [pc, #536]	; (800a718 <ThreadMainTask+0x310>)
 800a4fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a500:	2b01      	cmp	r3, #1
 800a502:	d018      	beq.n	800a536 <ThreadMainTask+0x12e>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр записи в память контроллера, чтобы при запуске не произошла запись
 800a504:	4b83      	ldr	r3, [pc, #524]	; (800a714 <ThreadMainTask+0x30c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f04f 31ff 	mov.w	r1, #4294967295
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fc f825 	bl	800655c <osMutexWait>
		fm25v02_write(2*WRITE_ARRAY_REG, 0x00);
 800a512:	2100      	movs	r1, #0
 800a514:	f240 2042 	movw	r0, #578	; 0x242
 800a518:	f001 faa0 	bl	800ba5c <fm25v02_write>
		fm25v02_write(2*WRITE_ARRAY_REG+1, 0x00);
 800a51c:	2100      	movs	r1, #0
 800a51e:	f240 2043 	movw	r0, #579	; 0x243
 800a522:	f001 fa9b 	bl	800ba5c <fm25v02_write>
		bootloader_registers.write_array_reg = 0x0000;
 800a526:	4b7c      	ldr	r3, [pc, #496]	; (800a718 <ThreadMainTask+0x310>)
 800a528:	2200      	movs	r2, #0
 800a52a:	865a      	strh	r2, [r3, #50]	; 0x32
		osMutexRelease(Fm25v02MutexHandle);
 800a52c:	4b79      	ldr	r3, [pc, #484]	; (800a714 <ThreadMainTask+0x30c>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4618      	mov	r0, r3
 800a532:	f7fc f861 	bl	80065f8 <osMutexRelease>
	}
	if(bootloader_registers.read_array_reg != 0x0001)
 800a536:	4b78      	ldr	r3, [pc, #480]	; (800a718 <ThreadMainTask+0x310>)
 800a538:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d018      	beq.n	800a570 <ThreadMainTask+0x168>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр чтения страниц, чтобы при запуске не произошло чтение
 800a53e:	4b75      	ldr	r3, [pc, #468]	; (800a714 <ThreadMainTask+0x30c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f04f 31ff 	mov.w	r1, #4294967295
 800a546:	4618      	mov	r0, r3
 800a548:	f7fc f808 	bl	800655c <osMutexWait>
		fm25v02_write(2*READ_ARRAY_REG, 0x00);
 800a54c:	2100      	movs	r1, #0
 800a54e:	f44f 7011 	mov.w	r0, #580	; 0x244
 800a552:	f001 fa83 	bl	800ba5c <fm25v02_write>
		fm25v02_write(2*READ_ARRAY_REG+1, 0x00);
 800a556:	2100      	movs	r1, #0
 800a558:	f240 2045 	movw	r0, #581	; 0x245
 800a55c:	f001 fa7e 	bl	800ba5c <fm25v02_write>
		bootloader_registers.read_array_reg = 0x0000;
 800a560:	4b6d      	ldr	r3, [pc, #436]	; (800a718 <ThreadMainTask+0x310>)
 800a562:	2200      	movs	r2, #0
 800a564:	869a      	strh	r2, [r3, #52]	; 0x34
		osMutexRelease(Fm25v02MutexHandle);
 800a566:	4b6b      	ldr	r3, [pc, #428]	; (800a714 <ThreadMainTask+0x30c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fc f844 	bl	80065f8 <osMutexRelease>

	for(;;)
	{
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);

		if(bootloader_registers.working_mode_reg == 1) // если включен режим обновления программы
 800a570:	4b69      	ldr	r3, [pc, #420]	; (800a718 <ThreadMainTask+0x310>)
 800a572:	8b9b      	ldrh	r3, [r3, #28]
 800a574:	2b01      	cmp	r3, #1
 800a576:	f040 8325 	bne.w	800abc4 <ThreadMainTask+0x7bc>
		{

			//if(bootloader_registers.ready_download_reg == 0x0000)
			if(bootloader_registers.ready_download_reg != 0x0001)
 800a57a:	4b67      	ldr	r3, [pc, #412]	; (800a718 <ThreadMainTask+0x310>)
 800a57c:	8bdb      	ldrh	r3, [r3, #30]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d018      	beq.n	800a5b4 <ThreadMainTask+0x1ac>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a582:	4b64      	ldr	r3, [pc, #400]	; (800a714 <ThreadMainTask+0x30c>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f04f 31ff 	mov.w	r1, #4294967295
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fb ffe6 	bl	800655c <osMutexWait>
				fm25v02_write(2*READY_DOWNLOAD_REG, 0x00); // устанавливаем регистр готовности к загрузке прошивки
 800a590:	2100      	movs	r1, #0
 800a592:	f44f 7008 	mov.w	r0, #544	; 0x220
 800a596:	f001 fa61 	bl	800ba5c <fm25v02_write>
				fm25v02_write(2*READY_DOWNLOAD_REG+1, 0x01);
 800a59a:	2101      	movs	r1, #1
 800a59c:	f240 2021 	movw	r0, #545	; 0x221
 800a5a0:	f001 fa5c 	bl	800ba5c <fm25v02_write>
				bootloader_registers.ready_download_reg = 0x0001;
 800a5a4:	4b5c      	ldr	r3, [pc, #368]	; (800a718 <ThreadMainTask+0x310>)
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	83da      	strh	r2, [r3, #30]
				osMutexRelease(Fm25v02MutexHandle);
 800a5aa:	4b5a      	ldr	r3, [pc, #360]	; (800a714 <ThreadMainTask+0x30c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fc f822 	bl	80065f8 <osMutexRelease>
			}

			switch(bootloader_registers.write_array_reg) // запись массива байт в память контроллера
 800a5b4:	4b58      	ldr	r3, [pc, #352]	; (800a718 <ThreadMainTask+0x310>)
 800a5b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f000 8164 	beq.w	800a886 <ThreadMainTask+0x47e>
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	f040 8164 	bne.w	800a88c <ThreadMainTask+0x484>
					//LED4_TOGGLE();
					//LED5_TOGGLE();

					//address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для записи данных в память контроллера

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a5c4:	4b53      	ldr	r3, [pc, #332]	; (800a714 <ThreadMainTask+0x30c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f04f 31ff 	mov.w	r1, #4294967295
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fb ffc5 	bl	800655c <osMutexWait>

					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &temp_reg_h1);
 800a5d2:	f107 030c 	add.w	r3, r7, #12
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800a5dc:	f001 fa04 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &temp_reg_l1);
 800a5e0:	f107 030b 	add.w	r3, r7, #11
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	f240 202d 	movw	r0, #557	; 0x22d
 800a5ea:	f001 f9fd 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.address_to_write_2_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a5ee:	7b3b      	ldrb	r3, [r7, #12]
 800a5f0:	021b      	lsls	r3, r3, #8
 800a5f2:	b21a      	sxth	r2, r3
 800a5f4:	7afb      	ldrb	r3, [r7, #11]
 800a5f6:	b21b      	sxth	r3, r3
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	b21b      	sxth	r3, r3
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	4b46      	ldr	r3, [pc, #280]	; (800a718 <ThreadMainTask+0x310>)
 800a600:	855a      	strh	r2, [r3, #42]	; 0x2a

					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &temp_reg_h1);
 800a602:	f107 030c 	add.w	r3, r7, #12
 800a606:	4619      	mov	r1, r3
 800a608:	f240 202e 	movw	r0, #558	; 0x22e
 800a60c:	f001 f9ec 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &temp_reg_l1);
 800a610:	f107 030b 	add.w	r3, r7, #11
 800a614:	4619      	mov	r1, r3
 800a616:	f240 202f 	movw	r0, #559	; 0x22f
 800a61a:	f001 f9e5 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.address_to_write_3_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a61e:	7b3b      	ldrb	r3, [r7, #12]
 800a620:	021b      	lsls	r3, r3, #8
 800a622:	b21a      	sxth	r2, r3
 800a624:	7afb      	ldrb	r3, [r7, #11]
 800a626:	b21b      	sxth	r3, r3
 800a628:	4313      	orrs	r3, r2
 800a62a:	b21b      	sxth	r3, r3
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	4b3a      	ldr	r3, [pc, #232]	; (800a718 <ThreadMainTask+0x310>)
 800a630:	859a      	strh	r2, [r3, #44]	; 0x2c

					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &temp_reg_h1);
 800a632:	f107 030c 	add.w	r3, r7, #12
 800a636:	4619      	mov	r1, r3
 800a638:	f240 2046 	movw	r0, #582	; 0x246
 800a63c:	f001 f9d4 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &temp_reg_l1);
 800a640:	f107 030b 	add.w	r3, r7, #11
 800a644:	4619      	mov	r1, r3
 800a646:	f240 2047 	movw	r0, #583	; 0x247
 800a64a:	f001 f9cd 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.address_to_write_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a64e:	7b3b      	ldrb	r3, [r7, #12]
 800a650:	021b      	lsls	r3, r3, #8
 800a652:	b21a      	sxth	r2, r3
 800a654:	7afb      	ldrb	r3, [r7, #11]
 800a656:	b21b      	sxth	r3, r3
 800a658:	4313      	orrs	r3, r2
 800a65a:	b21b      	sxth	r3, r3
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	4b2e      	ldr	r3, [pc, #184]	; (800a718 <ThreadMainTask+0x310>)
 800a660:	86da      	strh	r2, [r3, #54]	; 0x36

					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &temp_reg_h1);
 800a662:	f107 030c 	add.w	r3, r7, #12
 800a666:	4619      	mov	r1, r3
 800a668:	f44f 7012 	mov.w	r0, #584	; 0x248
 800a66c:	f001 f9bc 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &temp_reg_l1);
 800a670:	f107 030b 	add.w	r3, r7, #11
 800a674:	4619      	mov	r1, r3
 800a676:	f240 2049 	movw	r0, #585	; 0x249
 800a67a:	f001 f9b5 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.address_to_write_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a67e:	7b3b      	ldrb	r3, [r7, #12]
 800a680:	021b      	lsls	r3, r3, #8
 800a682:	b21a      	sxth	r2, r3
 800a684:	7afb      	ldrb	r3, [r7, #11]
 800a686:	b21b      	sxth	r3, r3
 800a688:	4313      	orrs	r3, r2
 800a68a:	b21b      	sxth	r3, r3
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	4b22      	ldr	r3, [pc, #136]	; (800a718 <ThreadMainTask+0x310>)
 800a690:	871a      	strh	r2, [r3, #56]	; 0x38

					fm25v02_read(2*PACKET_CRC_HIGH_REG, &temp_reg_h1);
 800a692:	f107 030c 	add.w	r3, r7, #12
 800a696:	4619      	mov	r1, r3
 800a698:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800a69c:	f001 f9a4 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &temp_reg_l1);
 800a6a0:	f107 030b 	add.w	r3, r7, #11
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	f240 204d 	movw	r0, #589	; 0x24d
 800a6aa:	f001 f99d 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.packet_crc_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a6ae:	7b3b      	ldrb	r3, [r7, #12]
 800a6b0:	021b      	lsls	r3, r3, #8
 800a6b2:	b21a      	sxth	r2, r3
 800a6b4:	7afb      	ldrb	r3, [r7, #11]
 800a6b6:	b21b      	sxth	r3, r3
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	b21b      	sxth	r3, r3
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	4b16      	ldr	r3, [pc, #88]	; (800a718 <ThreadMainTask+0x310>)
 800a6c0:	879a      	strh	r2, [r3, #60]	; 0x3c

					fm25v02_read(2*PACKET_CRC_LOW_REG, &temp_reg_h1);
 800a6c2:	f107 030c 	add.w	r3, r7, #12
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	f240 204e 	movw	r0, #590	; 0x24e
 800a6cc:	f001 f98c 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*PACKET_CRC_LOW_REG+1, &temp_reg_l1);
 800a6d0:	f107 030b 	add.w	r3, r7, #11
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	f240 204f 	movw	r0, #591	; 0x24f
 800a6da:	f001 f985 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.packet_crc_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a6de:	7b3b      	ldrb	r3, [r7, #12]
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	b21a      	sxth	r2, r3
 800a6e4:	7afb      	ldrb	r3, [r7, #11]
 800a6e6:	b21b      	sxth	r3, r3
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	b21b      	sxth	r3, r3
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	4b0a      	ldr	r3, [pc, #40]	; (800a718 <ThreadMainTask+0x310>)
 800a6f0:	87da      	strh	r2, [r3, #62]	; 0x3e

					osMutexRelease(Fm25v02MutexHandle);
 800a6f2:	4b08      	ldr	r3, [pc, #32]	; (800a714 <ThreadMainTask+0x30c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fb ff7e 	bl	80065f8 <osMutexRelease>

					address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для записи данных в память контроллера
 800a6fc:	4b06      	ldr	r3, [pc, #24]	; (800a718 <ThreadMainTask+0x310>)
 800a6fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a700:	061a      	lsls	r2, r3, #24
 800a702:	4b05      	ldr	r3, [pc, #20]	; (800a718 <ThreadMainTask+0x310>)
 800a704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a706:	041b      	lsls	r3, r3, #16
 800a708:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a70c:	e006      	b.n	800a71c <ThreadMainTask+0x314>
 800a70e:	bf00      	nop
 800a710:	20016c08 	.word	0x20016c08
 800a714:	20016c3c 	.word	0x20016c3c
 800a718:	20018990 	.word	0x20018990
 800a71c:	431a      	orrs	r2, r3
 800a71e:	4b9f      	ldr	r3, [pc, #636]	; (800a99c <ThreadMainTask+0x594>)
 800a720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a722:	021b      	lsls	r3, r3, #8
 800a724:	b29b      	uxth	r3, r3
 800a726:	431a      	orrs	r2, r3
 800a728:	4b9c      	ldr	r3, [pc, #624]	; (800a99c <ThreadMainTask+0x594>)
 800a72a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	4313      	orrs	r3, r2
 800a730:	4a9b      	ldr	r2, [pc, #620]	; (800a9a0 <ThreadMainTask+0x598>)
 800a732:	6013      	str	r3, [r2, #0]

					packet_crc = (((bootloader_registers.packet_crc_low_reg)<<8)&0xFF00) | ((bootloader_registers.packet_crc_high_reg)&0x00FF); // получаем значение контрольной суммы из регистров контрольной суммы пакета
 800a734:	4b99      	ldr	r3, [pc, #612]	; (800a99c <ThreadMainTask+0x594>)
 800a736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a738:	021b      	lsls	r3, r3, #8
 800a73a:	b21a      	sxth	r2, r3
 800a73c:	4b97      	ldr	r3, [pc, #604]	; (800a99c <ThreadMainTask+0x594>)
 800a73e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a740:	b21b      	sxth	r3, r3
 800a742:	b2db      	uxtb	r3, r3
 800a744:	b21b      	sxth	r3, r3
 800a746:	4313      	orrs	r3, r2
 800a748:	b21b      	sxth	r3, r3
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	4b95      	ldr	r3, [pc, #596]	; (800a9a4 <ThreadMainTask+0x59c>)
 800a74e:	801a      	strh	r2, [r3, #0]

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a750:	2300      	movs	r3, #0
 800a752:	82fb      	strh	r3, [r7, #22]
 800a754:	e020      	b.n	800a798 <ThreadMainTask+0x390>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a756:	4b94      	ldr	r3, [pc, #592]	; (800a9a8 <ThreadMainTask+0x5a0>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f04f 31ff 	mov.w	r1, #4294967295
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fb fefc 	bl	800655c <osMutexWait>
						//fm25v02_read(2*(PACKET_DATA_0_REG+i), &temp_read_h);
						fm25v02_read(2*(PACKET_DATA_0_REG+i)+1, &temp_read_l);
 800a764:	8afb      	ldrh	r3, [r7, #22]
 800a766:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	005b      	lsls	r3, r3, #1
 800a76e:	b29b      	uxth	r3, r3
 800a770:	3301      	adds	r3, #1
 800a772:	b29b      	uxth	r3, r3
 800a774:	f107 020d 	add.w	r2, r7, #13
 800a778:	4611      	mov	r1, r2
 800a77a:	4618      	mov	r0, r3
 800a77c:	f001 f934 	bl	800b9e8 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800a780:	4b89      	ldr	r3, [pc, #548]	; (800a9a8 <ThreadMainTask+0x5a0>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4618      	mov	r0, r3
 800a786:	f7fb ff37 	bl	80065f8 <osMutexRelease>
						buffer_packet_data[i] = temp_read_l;
 800a78a:	8afb      	ldrh	r3, [r7, #22]
 800a78c:	7b79      	ldrb	r1, [r7, #13]
 800a78e:	4a87      	ldr	r2, [pc, #540]	; (800a9ac <ThreadMainTask+0x5a4>)
 800a790:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a792:	8afb      	ldrh	r3, [r7, #22]
 800a794:	3301      	adds	r3, #1
 800a796:	82fb      	strh	r3, [r7, #22]
 800a798:	4b80      	ldr	r3, [pc, #512]	; (800a99c <ThreadMainTask+0x594>)
 800a79a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a79c:	8afa      	ldrh	r2, [r7, #22]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d3d9      	bcc.n	800a756 <ThreadMainTask+0x34e>
					}

					calculating_packet_crc = CRC16( (unsigned char*)(&buffer_packet_data[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы данных из регистров
 800a7a2:	4b7e      	ldr	r3, [pc, #504]	; (800a99c <ThreadMainTask+0x594>)
 800a7a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4880      	ldr	r0, [pc, #512]	; (800a9ac <ThreadMainTask+0x5a4>)
 800a7aa:	f004 fac7 	bl	800ed3c <CRC16>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	4a7f      	ldr	r2, [pc, #508]	; (800a9b0 <ThreadMainTask+0x5a8>)
 800a7b2:	6013      	str	r3, [r2, #0]

					if( packet_crc == calculating_packet_crc) // если контрольная сумма из регистров контрольной суммы пакета совпадает с расчетной контрольной суммой данных из регистров с данными
 800a7b4:	4b7b      	ldr	r3, [pc, #492]	; (800a9a4 <ThreadMainTask+0x59c>)
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4b7d      	ldr	r3, [pc, #500]	; (800a9b0 <ThreadMainTask+0x5a8>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d163      	bne.n	800a88a <ThreadMainTask+0x482>
					{
						//osThreadSuspendAll();

						taskENTER_CRITICAL();
 800a7c2:	f7ff f8b7 	bl	8009934 <vPortEnterCritical>

						HAL_FLASH_Unlock(); // разблокируем запись памяти контроллера
 800a7c6:	f7f7 fee3 	bl	8002590 <HAL_FLASH_Unlock>
						//for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i=i+8)
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	82bb      	strh	r3, [r7, #20]
 800a7ce:	e013      	b.n	800a7f8 <ThreadMainTask+0x3f0>
						{
							//if( *( (uint32_t*)(address_to_read_write+i) ) == 0xFF) // тестовое услови для проверки значения байта 0xFF перед тем как начать запись
							//{
								while( HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address_to_read_write+i, buffer_packet_data[i]) != HAL_OK ) // ничего не делаем пока не выполнится запись в память контроллера
 800a7d0:	bf00      	nop
 800a7d2:	8aba      	ldrh	r2, [r7, #20]
 800a7d4:	4b72      	ldr	r3, [pc, #456]	; (800a9a0 <ThreadMainTask+0x598>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	18d1      	adds	r1, r2, r3
 800a7da:	8abb      	ldrh	r3, [r7, #20]
 800a7dc:	4a73      	ldr	r2, [pc, #460]	; (800a9ac <ThreadMainTask+0x5a4>)
 800a7de:	5cd3      	ldrb	r3, [r2, r3]
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	f04f 0300 	mov.w	r3, #0
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	f7f7 fe7e 	bl	80024e8 <HAL_FLASH_Program>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1ef      	bne.n	800a7d2 <ThreadMainTask+0x3ca>
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a7f2:	8abb      	ldrh	r3, [r7, #20]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	82bb      	strh	r3, [r7, #20]
 800a7f8:	4b68      	ldr	r3, [pc, #416]	; (800a99c <ThreadMainTask+0x594>)
 800a7fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a7fc:	8aba      	ldrh	r2, [r7, #20]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d3e6      	bcc.n	800a7d0 <ThreadMainTask+0x3c8>

							//}
							//}

						}
						HAL_FLASH_Lock(); // блокируем запись памяти контроллера
 800a802:	f7f7 fee7 	bl	80025d4 <HAL_FLASH_Lock>

						taskEXIT_CRITICAL();
 800a806:	f7ff f8c5 	bl	8009994 <vPortExitCritical>

						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a80a:	2300      	movs	r3, #0
 800a80c:	827b      	strh	r3, [r7, #18]
 800a80e:	e00b      	b.n	800a828 <ThreadMainTask+0x420>
						{
							buffer_packet_data_flash[i] = *((uint32_t*)(address_to_read_write+i));
 800a810:	8a7a      	ldrh	r2, [r7, #18]
 800a812:	4b63      	ldr	r3, [pc, #396]	; (800a9a0 <ThreadMainTask+0x598>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4413      	add	r3, r2
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	8a7b      	ldrh	r3, [r7, #18]
 800a81c:	b2d1      	uxtb	r1, r2
 800a81e:	4a65      	ldr	r2, [pc, #404]	; (800a9b4 <ThreadMainTask+0x5ac>)
 800a820:	54d1      	strb	r1, [r2, r3]
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a822:	8a7b      	ldrh	r3, [r7, #18]
 800a824:	3301      	adds	r3, #1
 800a826:	827b      	strh	r3, [r7, #18]
 800a828:	4b5c      	ldr	r3, [pc, #368]	; (800a99c <ThreadMainTask+0x594>)
 800a82a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a82c:	8a7a      	ldrh	r2, [r7, #18]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d3ee      	bcc.n	800a810 <ThreadMainTask+0x408>
						}

						calculating_packet_flash_crc = CRC16( (unsigned char*)(&buffer_packet_data_flash[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы записанных данных в память микроконтроллера
 800a832:	4b5a      	ldr	r3, [pc, #360]	; (800a99c <ThreadMainTask+0x594>)
 800a834:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a836:	4619      	mov	r1, r3
 800a838:	485e      	ldr	r0, [pc, #376]	; (800a9b4 <ThreadMainTask+0x5ac>)
 800a83a:	f004 fa7f 	bl	800ed3c <CRC16>
 800a83e:	4603      	mov	r3, r0
 800a840:	4a5d      	ldr	r2, [pc, #372]	; (800a9b8 <ThreadMainTask+0x5b0>)
 800a842:	6013      	str	r3, [r2, #0]

						if( packet_crc == calculating_packet_flash_crc)
 800a844:	4b57      	ldr	r3, [pc, #348]	; (800a9a4 <ThreadMainTask+0x59c>)
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	461a      	mov	r2, r3
 800a84a:	4b5b      	ldr	r3, [pc, #364]	; (800a9b8 <ThreadMainTask+0x5b0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d11b      	bne.n	800a88a <ThreadMainTask+0x482>
						{

						//osThreadResumeAll();

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a852:	4b55      	ldr	r3, [pc, #340]	; (800a9a8 <ThreadMainTask+0x5a0>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f04f 31ff 	mov.w	r1, #4294967295
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fb fe7e 	bl	800655c <osMutexWait>

						fm25v02_write(2*WRITE_ARRAY_REG, 0x00); // обнуляем регистр и переменную записи массива
 800a860:	2100      	movs	r1, #0
 800a862:	f240 2042 	movw	r0, #578	; 0x242
 800a866:	f001 f8f9 	bl	800ba5c <fm25v02_write>
						fm25v02_write(2*WRITE_ARRAY_REG+1, 0x00);
 800a86a:	2100      	movs	r1, #0
 800a86c:	f240 2043 	movw	r0, #579	; 0x243
 800a870:	f001 f8f4 	bl	800ba5c <fm25v02_write>
						bootloader_registers.write_array_reg = 0x0000;
 800a874:	4b49      	ldr	r3, [pc, #292]	; (800a99c <ThreadMainTask+0x594>)
 800a876:	2200      	movs	r2, #0
 800a878:	865a      	strh	r2, [r3, #50]	; 0x32

						osMutexRelease(Fm25v02MutexHandle);
 800a87a:	4b4b      	ldr	r3, [pc, #300]	; (800a9a8 <ThreadMainTask+0x5a0>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fb feba 	bl	80065f8 <osMutexRelease>

						}

					}

				break;
 800a884:	e001      	b.n	800a88a <ThreadMainTask+0x482>

					//LED3_OFF();
					//LED4_OFF();
					//LED5_OFF();

				break;
 800a886:	bf00      	nop
 800a888:	e000      	b.n	800a88c <ThreadMainTask+0x484>
				break;
 800a88a:	bf00      	nop
			}

			switch(bootloader_registers.read_array_reg) // чтение массива из памяти контроллера
 800a88c:	4b43      	ldr	r3, [pc, #268]	; (800a99c <ThreadMainTask+0x594>)
 800a88e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a890:	2b01      	cmp	r3, #1
 800a892:	f040 8129 	bne.w	800aae8 <ThreadMainTask+0x6e0>
			{
				case(1):

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a896:	4b44      	ldr	r3, [pc, #272]	; (800a9a8 <ThreadMainTask+0x5a0>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f04f 31ff 	mov.w	r1, #4294967295
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fb fe5c 	bl	800655c <osMutexWait>

					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &temp_reg_h1);
 800a8a4:	f107 030c 	add.w	r3, r7, #12
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800a8ae:	f001 f89b 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &temp_reg_l1);
 800a8b2:	f107 030b 	add.w	r3, r7, #11
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	f240 202d 	movw	r0, #557	; 0x22d
 800a8bc:	f001 f894 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.address_to_write_2_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a8c0:	7b3b      	ldrb	r3, [r7, #12]
 800a8c2:	021b      	lsls	r3, r3, #8
 800a8c4:	b21a      	sxth	r2, r3
 800a8c6:	7afb      	ldrb	r3, [r7, #11]
 800a8c8:	b21b      	sxth	r3, r3
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	b21b      	sxth	r3, r3
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	4b32      	ldr	r3, [pc, #200]	; (800a99c <ThreadMainTask+0x594>)
 800a8d2:	855a      	strh	r2, [r3, #42]	; 0x2a

					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &temp_reg_h1);
 800a8d4:	f107 030c 	add.w	r3, r7, #12
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f240 202e 	movw	r0, #558	; 0x22e
 800a8de:	f001 f883 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &temp_reg_l1);
 800a8e2:	f107 030b 	add.w	r3, r7, #11
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	f240 202f 	movw	r0, #559	; 0x22f
 800a8ec:	f001 f87c 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.address_to_write_3_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a8f0:	7b3b      	ldrb	r3, [r7, #12]
 800a8f2:	021b      	lsls	r3, r3, #8
 800a8f4:	b21a      	sxth	r2, r3
 800a8f6:	7afb      	ldrb	r3, [r7, #11]
 800a8f8:	b21b      	sxth	r3, r3
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	b21b      	sxth	r3, r3
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	4b26      	ldr	r3, [pc, #152]	; (800a99c <ThreadMainTask+0x594>)
 800a902:	859a      	strh	r2, [r3, #44]	; 0x2c

					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &temp_reg_h1);
 800a904:	f107 030c 	add.w	r3, r7, #12
 800a908:	4619      	mov	r1, r3
 800a90a:	f240 2046 	movw	r0, #582	; 0x246
 800a90e:	f001 f86b 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &temp_reg_l1);
 800a912:	f107 030b 	add.w	r3, r7, #11
 800a916:	4619      	mov	r1, r3
 800a918:	f240 2047 	movw	r0, #583	; 0x247
 800a91c:	f001 f864 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.address_to_write_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a920:	7b3b      	ldrb	r3, [r7, #12]
 800a922:	021b      	lsls	r3, r3, #8
 800a924:	b21a      	sxth	r2, r3
 800a926:	7afb      	ldrb	r3, [r7, #11]
 800a928:	b21b      	sxth	r3, r3
 800a92a:	4313      	orrs	r3, r2
 800a92c:	b21b      	sxth	r3, r3
 800a92e:	b29a      	uxth	r2, r3
 800a930:	4b1a      	ldr	r3, [pc, #104]	; (800a99c <ThreadMainTask+0x594>)
 800a932:	86da      	strh	r2, [r3, #54]	; 0x36

					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &temp_reg_h1);
 800a934:	f107 030c 	add.w	r3, r7, #12
 800a938:	4619      	mov	r1, r3
 800a93a:	f44f 7012 	mov.w	r0, #584	; 0x248
 800a93e:	f001 f853 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &temp_reg_l1);
 800a942:	f107 030b 	add.w	r3, r7, #11
 800a946:	4619      	mov	r1, r3
 800a948:	f240 2049 	movw	r0, #585	; 0x249
 800a94c:	f001 f84c 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.address_to_write_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a950:	7b3b      	ldrb	r3, [r7, #12]
 800a952:	021b      	lsls	r3, r3, #8
 800a954:	b21a      	sxth	r2, r3
 800a956:	7afb      	ldrb	r3, [r7, #11]
 800a958:	b21b      	sxth	r3, r3
 800a95a:	4313      	orrs	r3, r2
 800a95c:	b21b      	sxth	r3, r3
 800a95e:	b29a      	uxth	r2, r3
 800a960:	4b0e      	ldr	r3, [pc, #56]	; (800a99c <ThreadMainTask+0x594>)
 800a962:	871a      	strh	r2, [r3, #56]	; 0x38

					osMutexRelease(Fm25v02MutexHandle);
 800a964:	4b10      	ldr	r3, [pc, #64]	; (800a9a8 <ThreadMainTask+0x5a0>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4618      	mov	r0, r3
 800a96a:	f7fb fe45 	bl	80065f8 <osMutexRelease>

					address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для чтения данных из памяти контроллера
 800a96e:	4b0b      	ldr	r3, [pc, #44]	; (800a99c <ThreadMainTask+0x594>)
 800a970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a972:	061a      	lsls	r2, r3, #24
 800a974:	4b09      	ldr	r3, [pc, #36]	; (800a99c <ThreadMainTask+0x594>)
 800a976:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a978:	041b      	lsls	r3, r3, #16
 800a97a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a97e:	431a      	orrs	r2, r3
 800a980:	4b06      	ldr	r3, [pc, #24]	; (800a99c <ThreadMainTask+0x594>)
 800a982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a984:	021b      	lsls	r3, r3, #8
 800a986:	b29b      	uxth	r3, r3
 800a988:	431a      	orrs	r2, r3
 800a98a:	4b04      	ldr	r3, [pc, #16]	; (800a99c <ThreadMainTask+0x594>)
 800a98c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	4313      	orrs	r3, r2
 800a992:	4a03      	ldr	r2, [pc, #12]	; (800a9a0 <ThreadMainTask+0x598>)
 800a994:	6013      	str	r3, [r2, #0]

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a996:	2300      	movs	r3, #0
 800a998:	823b      	strh	r3, [r7, #16]
 800a99a:	e039      	b.n	800aa10 <ThreadMainTask+0x608>
 800a99c:	20018990 	.word	0x20018990
 800a9a0:	20016fc4 	.word	0x20016fc4
 800a9a4:	2001874c 	.word	0x2001874c
 800a9a8:	20016c3c 	.word	0x20016c3c
 800a9ac:	20016fd8 	.word	0x20016fd8
 800a9b0:	20018768 	.word	0x20018768
 800a9b4:	20017b90 	.word	0x20017b90
 800a9b8:	20018770 	.word	0x20018770
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a9bc:	4bad      	ldr	r3, [pc, #692]	; (800ac74 <ThreadMainTask+0x86c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f04f 31ff 	mov.w	r1, #4294967295
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fb fdc9 	bl	800655c <osMutexWait>

						fm25v02_write(2*(PACKET_DATA_0_REG+i), 0x00);
 800a9ca:	8a3b      	ldrh	r3, [r7, #16]
 800a9cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f001 f83f 	bl	800ba5c <fm25v02_write>
						fm25v02_write(2*(PACKET_DATA_0_REG+i)+1, *( (uint32_t*)(address_to_read_write+i) ) );
 800a9de:	8a3b      	ldrh	r3, [r7, #16]
 800a9e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	005b      	lsls	r3, r3, #1
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	b298      	uxth	r0, r3
 800a9ee:	8a3a      	ldrh	r2, [r7, #16]
 800a9f0:	4ba1      	ldr	r3, [pc, #644]	; (800ac78 <ThreadMainTask+0x870>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f001 f82e 	bl	800ba5c <fm25v02_write>

						osMutexRelease(Fm25v02MutexHandle);
 800aa00:	4b9c      	ldr	r3, [pc, #624]	; (800ac74 <ThreadMainTask+0x86c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fb fdf7 	bl	80065f8 <osMutexRelease>
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800aa0a:	8a3b      	ldrh	r3, [r7, #16]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	823b      	strh	r3, [r7, #16]
 800aa10:	4b9a      	ldr	r3, [pc, #616]	; (800ac7c <ThreadMainTask+0x874>)
 800aa12:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aa14:	8a3a      	ldrh	r2, [r7, #16]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d3d0      	bcc.n	800a9bc <ThreadMainTask+0x5b4>
					}

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	81fb      	strh	r3, [r7, #14]
 800aa1e:	e020      	b.n	800aa62 <ThreadMainTask+0x65a>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800aa20:	4b94      	ldr	r3, [pc, #592]	; (800ac74 <ThreadMainTask+0x86c>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f04f 31ff 	mov.w	r1, #4294967295
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7fb fd97 	bl	800655c <osMutexWait>
						//fm25v02_read(2*(PACKET_DATA_0_REG+i), &temp_read_h);
						fm25v02_read(2*(PACKET_DATA_0_REG+i)+1, &temp_read_l);
 800aa2e:	89fb      	ldrh	r3, [r7, #14]
 800aa30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	005b      	lsls	r3, r3, #1
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	f107 020d 	add.w	r2, r7, #13
 800aa42:	4611      	mov	r1, r2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 ffcf 	bl	800b9e8 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800aa4a:	4b8a      	ldr	r3, [pc, #552]	; (800ac74 <ThreadMainTask+0x86c>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fb fdd2 	bl	80065f8 <osMutexRelease>
						buffer_packet_data[i] = temp_read_l;
 800aa54:	89fb      	ldrh	r3, [r7, #14]
 800aa56:	7b79      	ldrb	r1, [r7, #13]
 800aa58:	4a89      	ldr	r2, [pc, #548]	; (800ac80 <ThreadMainTask+0x878>)
 800aa5a:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800aa5c:	89fb      	ldrh	r3, [r7, #14]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	81fb      	strh	r3, [r7, #14]
 800aa62:	4b86      	ldr	r3, [pc, #536]	; (800ac7c <ThreadMainTask+0x874>)
 800aa64:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aa66:	89fa      	ldrh	r2, [r7, #14]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d3d9      	bcc.n	800aa20 <ThreadMainTask+0x618>
					}

					calculating_packet_crc = CRC16( (unsigned char*)(&buffer_packet_data[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы данных из регистров
 800aa6c:	4b83      	ldr	r3, [pc, #524]	; (800ac7c <ThreadMainTask+0x874>)
 800aa6e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aa70:	4619      	mov	r1, r3
 800aa72:	4883      	ldr	r0, [pc, #524]	; (800ac80 <ThreadMainTask+0x878>)
 800aa74:	f004 f962 	bl	800ed3c <CRC16>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	4a82      	ldr	r2, [pc, #520]	; (800ac84 <ThreadMainTask+0x87c>)
 800aa7c:	6013      	str	r3, [r2, #0]

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800aa7e:	4b7d      	ldr	r3, [pc, #500]	; (800ac74 <ThreadMainTask+0x86c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f04f 31ff 	mov.w	r1, #4294967295
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fb fd68 	bl	800655c <osMutexWait>

					fm25v02_write(2*PACKET_CRC_HIGH_REG, 0x00);
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800aa92:	f000 ffe3 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*PACKET_CRC_HIGH_REG+1, (uint8_t)calculating_packet_crc ); //записываем в регистр старший байт контрольной суммы пакета
 800aa96:	4b7b      	ldr	r3, [pc, #492]	; (800ac84 <ThreadMainTask+0x87c>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	f240 204d 	movw	r0, #589	; 0x24d
 800aaa2:	f000 ffdb 	bl	800ba5c <fm25v02_write>

					fm25v02_write(2*PACKET_CRC_LOW_REG, 0x00);
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	f240 204e 	movw	r0, #590	; 0x24e
 800aaac:	f000 ffd6 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*PACKET_CRC_LOW_REG+1, (uint8_t)(calculating_packet_crc>>8) ); //записываем в регистр младший байт контрольной суммы пакета
 800aab0:	4b74      	ldr	r3, [pc, #464]	; (800ac84 <ThreadMainTask+0x87c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	0a1b      	lsrs	r3, r3, #8
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	4619      	mov	r1, r3
 800aaba:	f240 204f 	movw	r0, #591	; 0x24f
 800aabe:	f000 ffcd 	bl	800ba5c <fm25v02_write>

					fm25v02_write(2*READ_ARRAY_REG, 0x00); // обнуляем регистр и переменную чтения массива
 800aac2:	2100      	movs	r1, #0
 800aac4:	f44f 7011 	mov.w	r0, #580	; 0x244
 800aac8:	f000 ffc8 	bl	800ba5c <fm25v02_write>
					fm25v02_write(2*READ_ARRAY_REG+1, 0x00);
 800aacc:	2100      	movs	r1, #0
 800aace:	f240 2045 	movw	r0, #581	; 0x245
 800aad2:	f000 ffc3 	bl	800ba5c <fm25v02_write>
					bootloader_registers.read_array_reg = 0x0000;
 800aad6:	4b69      	ldr	r3, [pc, #420]	; (800ac7c <ThreadMainTask+0x874>)
 800aad8:	2200      	movs	r2, #0
 800aada:	869a      	strh	r2, [r3, #52]	; 0x34

					osMutexRelease(Fm25v02MutexHandle);
 800aadc:	4b65      	ldr	r3, [pc, #404]	; (800ac74 <ThreadMainTask+0x86c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fb fd89 	bl	80065f8 <osMutexRelease>

				break;
 800aae6:	bf00      	nop
			}

			switch(bootloader_registers.clear_page_on_reg) // очистка указанной страницы памяти контроллера
 800aae8:	4b64      	ldr	r3, [pc, #400]	; (800ac7c <ThreadMainTask+0x874>)
 800aaea:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	f040 809e 	bne.w	800ac2e <ThreadMainTask+0x826>
			{
				case(1):

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800aaf2:	4b60      	ldr	r3, [pc, #384]	; (800ac74 <ThreadMainTask+0x86c>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f04f 31ff 	mov.w	r1, #4294967295
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fb fd2e 	bl	800655c <osMutexWait>

					fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &temp_reg_h1);
 800ab00:	f107 030c 	add.w	r3, r7, #12
 800ab04:	4619      	mov	r1, r3
 800ab06:	f240 203e 	movw	r0, #574	; 0x23e
 800ab0a:	f000 ff6d 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &temp_reg_l1);
 800ab0e:	f107 030b 	add.w	r3, r7, #11
 800ab12:	4619      	mov	r1, r3
 800ab14:	f240 203f 	movw	r0, #575	; 0x23f
 800ab18:	f000 ff66 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.clear_page_number_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800ab1c:	7b3b      	ldrb	r3, [r7, #12]
 800ab1e:	021b      	lsls	r3, r3, #8
 800ab20:	b21a      	sxth	r2, r3
 800ab22:	7afb      	ldrb	r3, [r7, #11]
 800ab24:	b21b      	sxth	r3, r3
 800ab26:	4313      	orrs	r3, r2
 800ab28:	b21b      	sxth	r3, r3
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	4b53      	ldr	r3, [pc, #332]	; (800ac7c <ThreadMainTask+0x874>)
 800ab2e:	85da      	strh	r2, [r3, #46]	; 0x2e

					osMutexRelease(Fm25v02MutexHandle);
 800ab30:	4b50      	ldr	r3, [pc, #320]	; (800ac74 <ThreadMainTask+0x86c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fb fd5f 	bl	80065f8 <osMutexRelease>

					erase_init.TypeErase = FLASH_TYPEERASE_SECTORS; // заполняем структуру с параметрами очистки памяти
 800ab3a:	4b53      	ldr	r3, [pc, #332]	; (800ac88 <ThreadMainTask+0x880>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
					erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ab40:	4b51      	ldr	r3, [pc, #324]	; (800ac88 <ThreadMainTask+0x880>)
 800ab42:	2202      	movs	r2, #2
 800ab44:	611a      	str	r2, [r3, #16]
					erase_init.Sector = bootloader_registers.clear_page_number_reg;
 800ab46:	4b4d      	ldr	r3, [pc, #308]	; (800ac7c <ThreadMainTask+0x874>)
 800ab48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	4b4e      	ldr	r3, [pc, #312]	; (800ac88 <ThreadMainTask+0x880>)
 800ab4e:	609a      	str	r2, [r3, #8]
					erase_init.NbSectors = 1;
 800ab50:	4b4d      	ldr	r3, [pc, #308]	; (800ac88 <ThreadMainTask+0x880>)
 800ab52:	2201      	movs	r2, #1
 800ab54:	60da      	str	r2, [r3, #12]
					erase_init.Banks = 1;
 800ab56:	4b4c      	ldr	r3, [pc, #304]	; (800ac88 <ThreadMainTask+0x880>)
 800ab58:	2201      	movs	r2, #1
 800ab5a:	605a      	str	r2, [r3, #4]

					//osThreadSuspendAll();
					taskENTER_CRITICAL();
 800ab5c:	f7fe feea 	bl	8009934 <vPortEnterCritical>

					HAL_FLASH_Unlock(); // разблокируем запись памяти контроллера
 800ab60:	f7f7 fd16 	bl	8002590 <HAL_FLASH_Unlock>

					while( HAL_FLASHEx_Erase(&erase_init, &sector_error) != HAL_OK ) // выполняем очистку указанной страницы памяти
 800ab64:	bf00      	nop
 800ab66:	4949      	ldr	r1, [pc, #292]	; (800ac8c <ThreadMainTask+0x884>)
 800ab68:	4847      	ldr	r0, [pc, #284]	; (800ac88 <ThreadMainTask+0x880>)
 800ab6a:	f7f7 fe73 	bl	8002854 <HAL_FLASHEx_Erase>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1f8      	bne.n	800ab66 <ThreadMainTask+0x75e>
					{

					}

					HAL_FLASH_Lock(); // блокируем запись памяти контроллера
 800ab74:	f7f7 fd2e 	bl	80025d4 <HAL_FLASH_Lock>

					taskEXIT_CRITICAL();
 800ab78:	f7fe ff0c 	bl	8009994 <vPortExitCritical>
					//osThreadResumeAll();

					if(sector_error != 0xFFFFFFFF) // если произошла ошибка очистки сектора памяти
 800ab7c:	4b43      	ldr	r3, [pc, #268]	; (800ac8c <ThreadMainTask+0x884>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab84:	d152      	bne.n	800ac2c <ThreadMainTask+0x824>
					{
						// здесь должен быть обработчик ошибки очистки сектора памяти
					}

					else if( sector_error == 0xFFFFFFFF ) // если не произошло ошибок памяти, то обнуляем регистр и переменную для стирания
 800ab86:	4b41      	ldr	r3, [pc, #260]	; (800ac8c <ThreadMainTask+0x884>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8e:	d14d      	bne.n	800ac2c <ThreadMainTask+0x824>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ab90:	4b38      	ldr	r3, [pc, #224]	; (800ac74 <ThreadMainTask+0x86c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f04f 31ff 	mov.w	r1, #4294967295
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fb fcdf 	bl	800655c <osMutexWait>

						fm25v02_write(2*CLEAR_PAGE_ON_REG, 0x00); // обнуляем регистр и переменную очистки страницы
 800ab9e:	2100      	movs	r1, #0
 800aba0:	f44f 7010 	mov.w	r0, #576	; 0x240
 800aba4:	f000 ff5a 	bl	800ba5c <fm25v02_write>
						fm25v02_write(2*CLEAR_PAGE_ON_REG+1, 0x00);
 800aba8:	2100      	movs	r1, #0
 800abaa:	f240 2041 	movw	r0, #577	; 0x241
 800abae:	f000 ff55 	bl	800ba5c <fm25v02_write>
						bootloader_registers.clear_page_on_reg = 0x0000;
 800abb2:	4b32      	ldr	r3, [pc, #200]	; (800ac7c <ThreadMainTask+0x874>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	861a      	strh	r2, [r3, #48]	; 0x30

						osMutexRelease(Fm25v02MutexHandle);
 800abb8:	4b2e      	ldr	r3, [pc, #184]	; (800ac74 <ThreadMainTask+0x86c>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fb fd1b 	bl	80065f8 <osMutexRelease>
					}

				break;
 800abc2:	e033      	b.n	800ac2c <ThreadMainTask+0x824>
			}

		}

		else if(bootloader_registers.working_mode_reg == 0) // если включен режим работы
 800abc4:	4b2d      	ldr	r3, [pc, #180]	; (800ac7c <ThreadMainTask+0x874>)
 800abc6:	8b9b      	ldrh	r3, [r3, #28]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d130      	bne.n	800ac2e <ThreadMainTask+0x826>
		{

			if(bootloader_registers.ready_download_reg != 0x0000)
 800abcc:	4b2b      	ldr	r3, [pc, #172]	; (800ac7c <ThreadMainTask+0x874>)
 800abce:	8bdb      	ldrh	r3, [r3, #30]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d018      	beq.n	800ac06 <ThreadMainTask+0x7fe>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800abd4:	4b27      	ldr	r3, [pc, #156]	; (800ac74 <ThreadMainTask+0x86c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f04f 31ff 	mov.w	r1, #4294967295
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fb fcbd 	bl	800655c <osMutexWait>
				fm25v02_write(2*READY_DOWNLOAD_REG, 0x00); // сбрасываем регистр готовности к загрузке прошивки
 800abe2:	2100      	movs	r1, #0
 800abe4:	f44f 7008 	mov.w	r0, #544	; 0x220
 800abe8:	f000 ff38 	bl	800ba5c <fm25v02_write>
				fm25v02_write(2*READY_DOWNLOAD_REG+1, 0x00);
 800abec:	2100      	movs	r1, #0
 800abee:	f240 2021 	movw	r0, #545	; 0x221
 800abf2:	f000 ff33 	bl	800ba5c <fm25v02_write>
				bootloader_registers.ready_download_reg = 0x0000;
 800abf6:	4b21      	ldr	r3, [pc, #132]	; (800ac7c <ThreadMainTask+0x874>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	83da      	strh	r2, [r3, #30]
				osMutexRelease(Fm25v02MutexHandle);
 800abfc:	4b1d      	ldr	r3, [pc, #116]	; (800ac74 <ThreadMainTask+0x86c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fb fcf9 	bl	80065f8 <osMutexRelease>
			}

			if(bootloader_registers.jump_attempt_reg < bootloader_registers.max_jump_attempt_reg)
 800ac06:	4b1d      	ldr	r3, [pc, #116]	; (800ac7c <ThreadMainTask+0x874>)
 800ac08:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800ac0a:	4b1c      	ldr	r3, [pc, #112]	; (800ac7c <ThreadMainTask+0x874>)
 800ac0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d20d      	bcs.n	800ac2e <ThreadMainTask+0x826>
			{
				osDelay(5000); // добавил задержку для теста, чтобы устройство успело отправить значение регистра номер 289, после записи
 800ac12:	f241 3088 	movw	r0, #5000	; 0x1388
 800ac16:	f7fb fbc0 	bl	800639a <osDelay>
				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800ac1a:	4b16      	ldr	r3, [pc, #88]	; (800ac74 <ThreadMainTask+0x86c>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f04f 31ff 	mov.w	r1, #4294967295
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fb fc9a 	bl	800655c <osMutexWait>
				NVIC_SystemReset();
 800ac28:	f7ff fbd8 	bl	800a3dc <__NVIC_SystemReset>
				break;
 800ac2c:	bf00      	nop

			}
		}

		switch(control_registers.reset_control_reg) // удаленная перезагрузка контроллера
 800ac2e:	4b18      	ldr	r3, [pc, #96]	; (800ac90 <ThreadMainTask+0x888>)
 800ac30:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d12e      	bne.n	800ac94 <ThreadMainTask+0x88c>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ac36:	4b0f      	ldr	r3, [pc, #60]	; (800ac74 <ThreadMainTask+0x86c>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f04f 31ff 	mov.w	r1, #4294967295
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fb fc8c 	bl	800655c <osMutexWait>
				fm25v02_write(2*RESET_CONTROL_REG, 0);
 800ac44:	2100      	movs	r1, #0
 800ac46:	f242 105a 	movw	r0, #8538	; 0x215a
 800ac4a:	f000 ff07 	bl	800ba5c <fm25v02_write>
				fm25v02_write(2*RESET_CONTROL_REG+1, 0);
 800ac4e:	2100      	movs	r1, #0
 800ac50:	f242 105b 	movw	r0, #8539	; 0x215b
 800ac54:	f000 ff02 	bl	800ba5c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800ac58:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <ThreadMainTask+0x86c>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fb fccb 	bl	80065f8 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800ac62:	4b04      	ldr	r3, [pc, #16]	; (800ac74 <ThreadMainTask+0x86c>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f04f 31ff 	mov.w	r1, #4294967295
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fb fc76 	bl	800655c <osMutexWait>
				NVIC_SystemReset();
 800ac70:	f7ff fbb4 	bl	800a3dc <__NVIC_SystemReset>
 800ac74:	20016c3c 	.word	0x20016c3c
 800ac78:	20016fc4 	.word	0x20016fc4
 800ac7c:	20018990 	.word	0x20018990
 800ac80:	20016fd8 	.word	0x20016fd8
 800ac84:	20018768 	.word	0x20018768
 800ac88:	20018750 	.word	0x20018750
 800ac8c:	20016fcc 	.word	0x20016fcc
 800ac90:	20018abc 	.word	0x20018abc



		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);

		if( modem_reset_state == 1)
 800ac94:	4b0f      	ldr	r3, [pc, #60]	; (800acd4 <ThreadMainTask+0x8cc>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d116      	bne.n	800accc <ThreadMainTask+0x8c4>
		{

			osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800ac9e:	4b0e      	ldr	r3, [pc, #56]	; (800acd8 <ThreadMainTask+0x8d0>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f04f 31ff 	mov.w	r1, #4294967295
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fb fc58 	bl	800655c <osMutexWait>
			osThreadSuspend(M95TaskHandle);
 800acac:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <ThreadMainTask+0x8d4>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fb fe77 	bl	80069a4 <osThreadSuspend>
			modem_reset_state = 0;
 800acb6:	4b07      	ldr	r3, [pc, #28]	; (800acd4 <ThreadMainTask+0x8cc>)
 800acb8:	2200      	movs	r2, #0
 800acba:	701a      	strb	r2, [r3, #0]

			m95_power_off();
 800acbc:	f001 f83c 	bl	800bd38 <m95_power_off>
			HAL_Delay(5000);
 800acc0:	f241 3088 	movw	r0, #5000	; 0x1388
 800acc4:	f7f6 fe78 	bl	80019b8 <HAL_Delay>
			NVIC_SystemReset();
 800acc8:	f7ff fb88 	bl	800a3dc <__NVIC_SystemReset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
		*/

		osDelay(10);
 800accc:	200a      	movs	r0, #10
 800acce:	f7fb fb64 	bl	800639a <osDelay>
		if(bootloader_registers.working_mode_reg == 1) // если включен режим обновления программы
 800acd2:	e44d      	b.n	800a570 <ThreadMainTask+0x168>
 800acd4:	2000080d 	.word	0x2000080d
 800acd8:	20016c3c 	.word	0x20016c3c
 800acdc:	20016c10 	.word	0x20016c10

0800ace0 <ThreadModbusPacketTask>:
extern volatile uint8_t modem_transmit_delay_state;



void ThreadModbusPacketTask(void const * argument)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
	uint8_t temp_reg_h;
	uint8_t temp_reg_l;

	osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 800ace8:	4ba2      	ldr	r3, [pc, #648]	; (800af74 <ThreadModbusPacketTask+0x294>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f04f 31ff 	mov.w	r1, #4294967295
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fb fcf7 	bl	80066e4 <osSemaphoreWait>



	for(;;)
	{
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 800acf6:	4b9f      	ldr	r3, [pc, #636]	; (800af74 <ThreadModbusPacketTask+0x294>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f04f 31ff 	mov.w	r1, #4294967295
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fb fcf0 	bl	80066e4 <osSemaphoreWait>

		switch(modbus_buffer[modbus_packet_number1][1]) // проверяем тип поступившей команды MODBUS и формируем соответствующий ответ
 800ad04:	4b9c      	ldr	r3, [pc, #624]	; (800af78 <ThreadModbusPacketTask+0x298>)
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	4a9c      	ldr	r2, [pc, #624]	; (800af7c <ThreadModbusPacketTask+0x29c>)
 800ad0c:	f241 7370 	movw	r3, #6000	; 0x1770
 800ad10:	fb03 f301 	mul.w	r3, r3, r1
 800ad14:	4413      	add	r3, r2
 800ad16:	3301      	adds	r3, #1
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	d003      	beq.n	800ad26 <ThreadModbusPacketTask+0x46>
 800ad1e:	2b10      	cmp	r3, #16
 800ad20:	f000 80cd 	beq.w	800aebe <ThreadModbusPacketTask+0x1de>
 800ad24:	e2cd      	b.n	800b2c2 <ThreadModbusPacketTask+0x5e2>
		{
			case(0x03): // чтение регистра

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для чтения
 800ad26:	4b94      	ldr	r3, [pc, #592]	; (800af78 <ThreadModbusPacketTask+0x298>)
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	4a93      	ldr	r2, [pc, #588]	; (800af7c <ThreadModbusPacketTask+0x29c>)
 800ad2e:	f241 7370 	movw	r3, #6000	; 0x1770
 800ad32:	fb03 f301 	mul.w	r3, r3, r1
 800ad36:	4413      	add	r3, r2
 800ad38:	3302      	adds	r3, #2
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	021b      	lsls	r3, r3, #8
 800ad3e:	b21a      	sxth	r2, r3
 800ad40:	4b8d      	ldr	r3, [pc, #564]	; (800af78 <ThreadModbusPacketTask+0x298>)
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	4618      	mov	r0, r3
 800ad46:	498d      	ldr	r1, [pc, #564]	; (800af7c <ThreadModbusPacketTask+0x29c>)
 800ad48:	f241 7370 	movw	r3, #6000	; 0x1770
 800ad4c:	fb03 f300 	mul.w	r3, r3, r0
 800ad50:	440b      	add	r3, r1
 800ad52:	3303      	adds	r3, #3
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	b21b      	sxth	r3, r3
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	b21b      	sxth	r3, r3
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	4b88      	ldr	r3, [pc, #544]	; (800af80 <ThreadModbusPacketTask+0x2a0>)
 800ad60:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 800ad62:	4b85      	ldr	r3, [pc, #532]	; (800af78 <ThreadModbusPacketTask+0x298>)
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	4619      	mov	r1, r3
 800ad68:	4a84      	ldr	r2, [pc, #528]	; (800af7c <ThreadModbusPacketTask+0x29c>)
 800ad6a:	f241 7370 	movw	r3, #6000	; 0x1770
 800ad6e:	fb03 f301 	mul.w	r3, r3, r1
 800ad72:	4413      	add	r3, r2
 800ad74:	3304      	adds	r3, #4
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	021b      	lsls	r3, r3, #8
 800ad7a:	b21a      	sxth	r2, r3
 800ad7c:	4b7e      	ldr	r3, [pc, #504]	; (800af78 <ThreadModbusPacketTask+0x298>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	4618      	mov	r0, r3
 800ad82:	497e      	ldr	r1, [pc, #504]	; (800af7c <ThreadModbusPacketTask+0x29c>)
 800ad84:	f241 7370 	movw	r3, #6000	; 0x1770
 800ad88:	fb03 f300 	mul.w	r3, r3, r0
 800ad8c:	440b      	add	r3, r1
 800ad8e:	3305      	adds	r3, #5
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	b21b      	sxth	r3, r3
 800ad94:	4313      	orrs	r3, r2
 800ad96:	b21b      	sxth	r3, r3
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	4b7a      	ldr	r3, [pc, #488]	; (800af84 <ThreadModbusPacketTask+0x2a4>)
 800ad9c:	801a      	strh	r2, [r3, #0]

				// обработка пакета чтения 16-битного регистра modbus

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ad9e:	4b7a      	ldr	r3, [pc, #488]	; (800af88 <ThreadModbusPacketTask+0x2a8>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f04f 31ff 	mov.w	r1, #4294967295
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fb fbd8 	bl	800655c <osMutexWait>
				fm25v02_fast_read( 2*modbus_address , &buf_out[0] , 2*modbus_size); // читаем из памяти необходимое количество регистров
 800adac:	4b74      	ldr	r3, [pc, #464]	; (800af80 <ThreadModbusPacketTask+0x2a0>)
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	005b      	lsls	r3, r3, #1
 800adb2:	b298      	uxth	r0, r3
 800adb4:	4b73      	ldr	r3, [pc, #460]	; (800af84 <ThreadModbusPacketTask+0x2a4>)
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	b29b      	uxth	r3, r3
 800adbc:	461a      	mov	r2, r3
 800adbe:	4973      	ldr	r1, [pc, #460]	; (800af8c <ThreadModbusPacketTask+0x2ac>)
 800adc0:	f000 febc 	bl	800bb3c <fm25v02_fast_read>
				osMutexRelease(Fm25v02MutexHandle);
 800adc4:	4b70      	ldr	r3, [pc, #448]	; (800af88 <ThreadModbusPacketTask+0x2a8>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fb fc15 	bl	80065f8 <osMutexRelease>

				buf_out1[0] = 0x01;
 800adce:	4b70      	ldr	r3, [pc, #448]	; (800af90 <ThreadModbusPacketTask+0x2b0>)
 800add0:	2201      	movs	r2, #1
 800add2:	701a      	strb	r2, [r3, #0]
				buf_out1[1] = 0x03;
 800add4:	4b6e      	ldr	r3, [pc, #440]	; (800af90 <ThreadModbusPacketTask+0x2b0>)
 800add6:	2203      	movs	r2, #3
 800add8:	705a      	strb	r2, [r3, #1]
				buf_out1[2] = 2*modbus_size;
 800adda:	4b6a      	ldr	r3, [pc, #424]	; (800af84 <ThreadModbusPacketTask+0x2a4>)
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	4b6a      	ldr	r3, [pc, #424]	; (800af90 <ThreadModbusPacketTask+0x2b0>)
 800ade6:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<modbus_size; i++)
 800ade8:	2300      	movs	r3, #0
 800adea:	73fb      	strb	r3, [r7, #15]
 800adec:	e015      	b.n	800ae1a <ThreadModbusPacketTask+0x13a>
				{
					buf_out1[2*i+3] = buf_out[2*i];
 800adee:	7bfb      	ldrb	r3, [r7, #15]
 800adf0:	005a      	lsls	r2, r3, #1
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	3303      	adds	r3, #3
 800adf8:	4964      	ldr	r1, [pc, #400]	; (800af8c <ThreadModbusPacketTask+0x2ac>)
 800adfa:	5c89      	ldrb	r1, [r1, r2]
 800adfc:	4a64      	ldr	r2, [pc, #400]	; (800af90 <ThreadModbusPacketTask+0x2b0>)
 800adfe:	54d1      	strb	r1, [r2, r3]
					buf_out1[2*i+4] = buf_out[2*i+1];
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	005b      	lsls	r3, r3, #1
 800ae04:	1c5a      	adds	r2, r3, #1
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	3302      	adds	r3, #2
 800ae0a:	005b      	lsls	r3, r3, #1
 800ae0c:	495f      	ldr	r1, [pc, #380]	; (800af8c <ThreadModbusPacketTask+0x2ac>)
 800ae0e:	5c89      	ldrb	r1, [r1, r2]
 800ae10:	4a5f      	ldr	r2, [pc, #380]	; (800af90 <ThreadModbusPacketTask+0x2b0>)
 800ae12:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0; i<modbus_size; i++)
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	3301      	adds	r3, #1
 800ae18:	73fb      	strb	r3, [r7, #15]
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	4b59      	ldr	r3, [pc, #356]	; (800af84 <ThreadModbusPacketTask+0x2a4>)
 800ae20:	881b      	ldrh	r3, [r3, #0]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d3e3      	bcc.n	800adee <ThreadModbusPacketTask+0x10e>
				}
				crc_temp = CRC16(&buf_out1[0], 3+2*modbus_size);
 800ae26:	4b57      	ldr	r3, [pc, #348]	; (800af84 <ThreadModbusPacketTask+0x2a4>)
 800ae28:	881b      	ldrh	r3, [r3, #0]
 800ae2a:	005b      	lsls	r3, r3, #1
 800ae2c:	3303      	adds	r3, #3
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4857      	ldr	r0, [pc, #348]	; (800af90 <ThreadModbusPacketTask+0x2b0>)
 800ae32:	f003 ff83 	bl	800ed3c <CRC16>
 800ae36:	4603      	mov	r3, r0
 800ae38:	4a56      	ldr	r2, [pc, #344]	; (800af94 <ThreadModbusPacketTask+0x2b4>)
 800ae3a:	6013      	str	r3, [r2, #0]
				buf_out1[2*modbus_size+3] = (uint8_t)(crc_temp&0x00FF);
 800ae3c:	4b55      	ldr	r3, [pc, #340]	; (800af94 <ThreadModbusPacketTask+0x2b4>)
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	4b50      	ldr	r3, [pc, #320]	; (800af84 <ThreadModbusPacketTask+0x2a4>)
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	3303      	adds	r3, #3
 800ae48:	b2d1      	uxtb	r1, r2
 800ae4a:	4a51      	ldr	r2, [pc, #324]	; (800af90 <ThreadModbusPacketTask+0x2b0>)
 800ae4c:	54d1      	strb	r1, [r2, r3]
				buf_out1[2*modbus_size+4] = (uint8_t)((crc_temp>>8)&0x00FF);
 800ae4e:	4b51      	ldr	r3, [pc, #324]	; (800af94 <ThreadModbusPacketTask+0x2b4>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	0a1a      	lsrs	r2, r3, #8
 800ae54:	4b4b      	ldr	r3, [pc, #300]	; (800af84 <ThreadModbusPacketTask+0x2a4>)
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	3302      	adds	r3, #2
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	b2d1      	uxtb	r1, r2
 800ae5e:	4a4c      	ldr	r2, [pc, #304]	; (800af90 <ThreadModbusPacketTask+0x2b0>)
 800ae60:	54d1      	strb	r1, [r2, r3]

				osMutexWait(UartMutexHandle, osWaitForever);
 800ae62:	4b4d      	ldr	r3, [pc, #308]	; (800af98 <ThreadModbusPacketTask+0x2b8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f04f 31ff 	mov.w	r1, #4294967295
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fb fb76 	bl	800655c <osMutexWait>
				//if( AT_QISEND(&buf_out1[0], 2*modbus_size+5) != AT_OK )
				if( AT_CIPSEND(&buf_out1[0], 2*modbus_size+5) != AT_OK )
 800ae70:	4b44      	ldr	r3, [pc, #272]	; (800af84 <ThreadModbusPacketTask+0x2a4>)
 800ae72:	881b      	ldrh	r3, [r3, #0]
 800ae74:	005b      	lsls	r3, r3, #1
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	3305      	adds	r3, #5
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	4844      	ldr	r0, [pc, #272]	; (800af90 <ThreadModbusPacketTask+0x2b0>)
 800ae80:	f001 fc18 	bl	800c6b4 <AT_CIPSEND>
				{

				}
				osMutexRelease(UartMutexHandle);
 800ae84:	4b44      	ldr	r3, [pc, #272]	; (800af98 <ThreadModbusPacketTask+0x2b8>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fb fbb5 	bl	80065f8 <osMutexRelease>

				modem_transmit_delay_state = 0;
 800ae8e:	4b43      	ldr	r3, [pc, #268]	; (800af9c <ThreadModbusPacketTask+0x2bc>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	701a      	strb	r2, [r3, #0]
				modem_transmit_delay = 0;
 800ae94:	4b42      	ldr	r3, [pc, #264]	; (800afa0 <ThreadModbusPacketTask+0x2c0>)
 800ae96:	2200      	movs	r2, #0
 800ae98:	801a      	strh	r2, [r3, #0]
				osThreadResume(M95TaskHandle);
 800ae9a:	4b42      	ldr	r3, [pc, #264]	; (800afa4 <ThreadModbusPacketTask+0x2c4>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fb fd8c 	bl	80069bc <osThreadResume>

				if( modbus_address == VERSION_REG ) // если запрашивается адрес версии прошивки обновляем таймер перезагрузки
 800aea4:	4b36      	ldr	r3, [pc, #216]	; (800af80 <ThreadModbusPacketTask+0x2a0>)
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeac:	f040 8208 	bne.w	800b2c0 <ThreadModbusPacketTask+0x5e0>
				{
					osTimerStart(Ring_Center_TimerHandle, 90000); // поправил время для таймера перезагрузки
 800aeb0:	4b3d      	ldr	r3, [pc, #244]	; (800afa8 <ThreadModbusPacketTask+0x2c8>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	493d      	ldr	r1, [pc, #244]	; (800afac <ThreadModbusPacketTask+0x2cc>)
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fb fab8 	bl	800642c <osTimerStart>
				}


			break;
 800aebc:	e200      	b.n	800b2c0 <ThreadModbusPacketTask+0x5e0>

			case(0x10): // запись нескольких регистров

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для записи
 800aebe:	4b2e      	ldr	r3, [pc, #184]	; (800af78 <ThreadModbusPacketTask+0x298>)
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	4619      	mov	r1, r3
 800aec4:	4a2d      	ldr	r2, [pc, #180]	; (800af7c <ThreadModbusPacketTask+0x29c>)
 800aec6:	f241 7370 	movw	r3, #6000	; 0x1770
 800aeca:	fb03 f301 	mul.w	r3, r3, r1
 800aece:	4413      	add	r3, r2
 800aed0:	3302      	adds	r3, #2
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	021b      	lsls	r3, r3, #8
 800aed6:	b21a      	sxth	r2, r3
 800aed8:	4b27      	ldr	r3, [pc, #156]	; (800af78 <ThreadModbusPacketTask+0x298>)
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	4618      	mov	r0, r3
 800aede:	4927      	ldr	r1, [pc, #156]	; (800af7c <ThreadModbusPacketTask+0x29c>)
 800aee0:	f241 7370 	movw	r3, #6000	; 0x1770
 800aee4:	fb03 f300 	mul.w	r3, r3, r0
 800aee8:	440b      	add	r3, r1
 800aeea:	3303      	adds	r3, #3
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	b21b      	sxth	r3, r3
 800aef0:	4313      	orrs	r3, r2
 800aef2:	b21b      	sxth	r3, r3
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	4b22      	ldr	r3, [pc, #136]	; (800af80 <ThreadModbusPacketTask+0x2a0>)
 800aef8:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 800aefa:	4b1f      	ldr	r3, [pc, #124]	; (800af78 <ThreadModbusPacketTask+0x298>)
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	4619      	mov	r1, r3
 800af00:	4a1e      	ldr	r2, [pc, #120]	; (800af7c <ThreadModbusPacketTask+0x29c>)
 800af02:	f241 7370 	movw	r3, #6000	; 0x1770
 800af06:	fb03 f301 	mul.w	r3, r3, r1
 800af0a:	4413      	add	r3, r2
 800af0c:	3304      	adds	r3, #4
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	021b      	lsls	r3, r3, #8
 800af12:	b21a      	sxth	r2, r3
 800af14:	4b18      	ldr	r3, [pc, #96]	; (800af78 <ThreadModbusPacketTask+0x298>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	4618      	mov	r0, r3
 800af1a:	4918      	ldr	r1, [pc, #96]	; (800af7c <ThreadModbusPacketTask+0x29c>)
 800af1c:	f241 7370 	movw	r3, #6000	; 0x1770
 800af20:	fb03 f300 	mul.w	r3, r3, r0
 800af24:	440b      	add	r3, r1
 800af26:	3305      	adds	r3, #5
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	b21b      	sxth	r3, r3
 800af2c:	4313      	orrs	r3, r2
 800af2e:	b21b      	sxth	r3, r3
 800af30:	b29a      	uxth	r2, r3
 800af32:	4b14      	ldr	r3, [pc, #80]	; (800af84 <ThreadModbusPacketTask+0x2a4>)
 800af34:	801a      	strh	r2, [r3, #0]

				if( !( (modbus_address>=0x1000) && (modbus_address<=0x108F) ) && !( (modbus_address<0x1000) && (modbus_address+modbus_size>0x1000) ) ) // модбас адресс не должен находиться в области статусных регистров, а также запись не должна затрагивать статусные регистры
 800af36:	4b12      	ldr	r3, [pc, #72]	; (800af80 <ThreadModbusPacketTask+0x2a0>)
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af3e:	d306      	bcc.n	800af4e <ThreadModbusPacketTask+0x26e>
 800af40:	4b0f      	ldr	r3, [pc, #60]	; (800af80 <ThreadModbusPacketTask+0x2a0>)
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	f241 028f 	movw	r2, #4239	; 0x108f
 800af48:	4293      	cmp	r3, r2
 800af4a:	f240 8196 	bls.w	800b27a <ThreadModbusPacketTask+0x59a>
 800af4e:	4b0c      	ldr	r3, [pc, #48]	; (800af80 <ThreadModbusPacketTask+0x2a0>)
 800af50:	881b      	ldrh	r3, [r3, #0]
 800af52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af56:	d209      	bcs.n	800af6c <ThreadModbusPacketTask+0x28c>
 800af58:	4b09      	ldr	r3, [pc, #36]	; (800af80 <ThreadModbusPacketTask+0x2a0>)
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	461a      	mov	r2, r3
 800af5e:	4b09      	ldr	r3, [pc, #36]	; (800af84 <ThreadModbusPacketTask+0x2a4>)
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	4413      	add	r3, r2
 800af64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af68:	f300 8187 	bgt.w	800b27a <ThreadModbusPacketTask+0x59a>
				{

					// обработка пакета записи 16-битного регистра modbus

					//for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
					for(uint16_t a=0; a<modbus_size; a++)
 800af6c:	2300      	movs	r3, #0
 800af6e:	81bb      	strh	r3, [r7, #12]
 800af70:	e05f      	b.n	800b032 <ThreadModbusPacketTask+0x352>
 800af72:	bf00      	nop
 800af74:	20016c14 	.word	0x20016c14
 800af78:	20007f9f 	.word	0x20007f9f
 800af7c:	200080c8 	.word	0x200080c8
 800af80:	20018978 	.word	0x20018978
 800af84:	2001897a 	.word	0x2001897a
 800af88:	20016c3c 	.word	0x20016c3c
 800af8c:	20018878 	.word	0x20018878
 800af90:	20018778 	.word	0x20018778
 800af94:	2001898c 	.word	0x2001898c
 800af98:	20016b38 	.word	0x20016b38
 800af9c:	20007fa2 	.word	0x20007fa2
 800afa0:	20007fa0 	.word	0x20007fa0
 800afa4:	20016c10 	.word	0x20016c10
 800afa8:	20016b3c 	.word	0x20016b3c
 800afac:	00015f90 	.word	0x00015f90
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800afb0:	4bb5      	ldr	r3, [pc, #724]	; (800b288 <ThreadModbusPacketTask+0x5a8>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f04f 31ff 	mov.w	r1, #4294967295
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fb facf 	bl	800655c <osMutexWait>
						fm25v02_fast_write( (2*modbus_address+2*a), &modbus_buffer[modbus_packet_number1][7+a*2], 1 );
 800afbe:	4bb3      	ldr	r3, [pc, #716]	; (800b28c <ThreadModbusPacketTask+0x5ac>)
 800afc0:	881a      	ldrh	r2, [r3, #0]
 800afc2:	89bb      	ldrh	r3, [r7, #12]
 800afc4:	4413      	add	r3, r2
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	005b      	lsls	r3, r3, #1
 800afca:	b298      	uxth	r0, r3
 800afcc:	4bb0      	ldr	r3, [pc, #704]	; (800b290 <ThreadModbusPacketTask+0x5b0>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	4619      	mov	r1, r3
 800afd2:	89bb      	ldrh	r3, [r7, #12]
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	3307      	adds	r3, #7
 800afd8:	f241 7270 	movw	r2, #6000	; 0x1770
 800afdc:	fb02 f201 	mul.w	r2, r2, r1
 800afe0:	4413      	add	r3, r2
 800afe2:	4aac      	ldr	r2, [pc, #688]	; (800b294 <ThreadModbusPacketTask+0x5b4>)
 800afe4:	4413      	add	r3, r2
 800afe6:	2201      	movs	r2, #1
 800afe8:	4619      	mov	r1, r3
 800afea:	f000 fd83 	bl	800baf4 <fm25v02_fast_write>
						fm25v02_fast_write( (2*modbus_address+2*a+1), &modbus_buffer[modbus_packet_number1][8+a*2], 1 );
 800afee:	4ba7      	ldr	r3, [pc, #668]	; (800b28c <ThreadModbusPacketTask+0x5ac>)
 800aff0:	881a      	ldrh	r2, [r3, #0]
 800aff2:	89bb      	ldrh	r3, [r7, #12]
 800aff4:	4413      	add	r3, r2
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	005b      	lsls	r3, r3, #1
 800affa:	b29b      	uxth	r3, r3
 800affc:	3301      	adds	r3, #1
 800affe:	b298      	uxth	r0, r3
 800b000:	4ba3      	ldr	r3, [pc, #652]	; (800b290 <ThreadModbusPacketTask+0x5b0>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	4619      	mov	r1, r3
 800b006:	89bb      	ldrh	r3, [r7, #12]
 800b008:	3304      	adds	r3, #4
 800b00a:	005b      	lsls	r3, r3, #1
 800b00c:	f241 7270 	movw	r2, #6000	; 0x1770
 800b010:	fb02 f201 	mul.w	r2, r2, r1
 800b014:	4413      	add	r3, r2
 800b016:	4a9f      	ldr	r2, [pc, #636]	; (800b294 <ThreadModbusPacketTask+0x5b4>)
 800b018:	4413      	add	r3, r2
 800b01a:	2201      	movs	r2, #1
 800b01c:	4619      	mov	r1, r3
 800b01e:	f000 fd69 	bl	800baf4 <fm25v02_fast_write>
						osMutexRelease(Fm25v02MutexHandle);
 800b022:	4b99      	ldr	r3, [pc, #612]	; (800b288 <ThreadModbusPacketTask+0x5a8>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4618      	mov	r0, r3
 800b028:	f7fb fae6 	bl	80065f8 <osMutexRelease>
					for(uint16_t a=0; a<modbus_size; a++)
 800b02c:	89bb      	ldrh	r3, [r7, #12]
 800b02e:	3301      	adds	r3, #1
 800b030:	81bb      	strh	r3, [r7, #12]
 800b032:	4b99      	ldr	r3, [pc, #612]	; (800b298 <ThreadModbusPacketTask+0x5b8>)
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	89ba      	ldrh	r2, [r7, #12]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d3b9      	bcc.n	800afb0 <ThreadModbusPacketTask+0x2d0>
					}

					buf_out1[0] = 0x01;
 800b03c:	4b97      	ldr	r3, [pc, #604]	; (800b29c <ThreadModbusPacketTask+0x5bc>)
 800b03e:	2201      	movs	r2, #1
 800b040:	701a      	strb	r2, [r3, #0]
					buf_out1[1] = 0x10;
 800b042:	4b96      	ldr	r3, [pc, #600]	; (800b29c <ThreadModbusPacketTask+0x5bc>)
 800b044:	2210      	movs	r2, #16
 800b046:	705a      	strb	r2, [r3, #1]
					buf_out1[2] = modbus_buffer[modbus_packet_number1][2];
 800b048:	4b91      	ldr	r3, [pc, #580]	; (800b290 <ThreadModbusPacketTask+0x5b0>)
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	4619      	mov	r1, r3
 800b04e:	4a91      	ldr	r2, [pc, #580]	; (800b294 <ThreadModbusPacketTask+0x5b4>)
 800b050:	f241 7370 	movw	r3, #6000	; 0x1770
 800b054:	fb03 f301 	mul.w	r3, r3, r1
 800b058:	4413      	add	r3, r2
 800b05a:	3302      	adds	r3, #2
 800b05c:	781a      	ldrb	r2, [r3, #0]
 800b05e:	4b8f      	ldr	r3, [pc, #572]	; (800b29c <ThreadModbusPacketTask+0x5bc>)
 800b060:	709a      	strb	r2, [r3, #2]
					buf_out1[3] = modbus_buffer[modbus_packet_number1][3];
 800b062:	4b8b      	ldr	r3, [pc, #556]	; (800b290 <ThreadModbusPacketTask+0x5b0>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	4619      	mov	r1, r3
 800b068:	4a8a      	ldr	r2, [pc, #552]	; (800b294 <ThreadModbusPacketTask+0x5b4>)
 800b06a:	f241 7370 	movw	r3, #6000	; 0x1770
 800b06e:	fb03 f301 	mul.w	r3, r3, r1
 800b072:	4413      	add	r3, r2
 800b074:	3303      	adds	r3, #3
 800b076:	781a      	ldrb	r2, [r3, #0]
 800b078:	4b88      	ldr	r3, [pc, #544]	; (800b29c <ThreadModbusPacketTask+0x5bc>)
 800b07a:	70da      	strb	r2, [r3, #3]
					buf_out1[4] = modbus_buffer[modbus_packet_number1][4];
 800b07c:	4b84      	ldr	r3, [pc, #528]	; (800b290 <ThreadModbusPacketTask+0x5b0>)
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	4619      	mov	r1, r3
 800b082:	4a84      	ldr	r2, [pc, #528]	; (800b294 <ThreadModbusPacketTask+0x5b4>)
 800b084:	f241 7370 	movw	r3, #6000	; 0x1770
 800b088:	fb03 f301 	mul.w	r3, r3, r1
 800b08c:	4413      	add	r3, r2
 800b08e:	3304      	adds	r3, #4
 800b090:	781a      	ldrb	r2, [r3, #0]
 800b092:	4b82      	ldr	r3, [pc, #520]	; (800b29c <ThreadModbusPacketTask+0x5bc>)
 800b094:	711a      	strb	r2, [r3, #4]
					buf_out1[5] = modbus_buffer[modbus_packet_number1][5];
 800b096:	4b7e      	ldr	r3, [pc, #504]	; (800b290 <ThreadModbusPacketTask+0x5b0>)
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	4619      	mov	r1, r3
 800b09c:	4a7d      	ldr	r2, [pc, #500]	; (800b294 <ThreadModbusPacketTask+0x5b4>)
 800b09e:	f241 7370 	movw	r3, #6000	; 0x1770
 800b0a2:	fb03 f301 	mul.w	r3, r3, r1
 800b0a6:	4413      	add	r3, r2
 800b0a8:	3305      	adds	r3, #5
 800b0aa:	781a      	ldrb	r2, [r3, #0]
 800b0ac:	4b7b      	ldr	r3, [pc, #492]	; (800b29c <ThreadModbusPacketTask+0x5bc>)
 800b0ae:	715a      	strb	r2, [r3, #5]

					crc_temp = CRC16(&buf_out1[0], 6);
 800b0b0:	2106      	movs	r1, #6
 800b0b2:	487a      	ldr	r0, [pc, #488]	; (800b29c <ThreadModbusPacketTask+0x5bc>)
 800b0b4:	f003 fe42 	bl	800ed3c <CRC16>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	4a79      	ldr	r2, [pc, #484]	; (800b2a0 <ThreadModbusPacketTask+0x5c0>)
 800b0bc:	6013      	str	r3, [r2, #0]

					buf_out1[6] = (uint8_t)(crc_temp&0x00FF);
 800b0be:	4b78      	ldr	r3, [pc, #480]	; (800b2a0 <ThreadModbusPacketTask+0x5c0>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	4b75      	ldr	r3, [pc, #468]	; (800b29c <ThreadModbusPacketTask+0x5bc>)
 800b0c6:	719a      	strb	r2, [r3, #6]
					buf_out1[7] = (uint8_t)((crc_temp>>8)&0x00FF);
 800b0c8:	4b75      	ldr	r3, [pc, #468]	; (800b2a0 <ThreadModbusPacketTask+0x5c0>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	0a1b      	lsrs	r3, r3, #8
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	4b72      	ldr	r3, [pc, #456]	; (800b29c <ThreadModbusPacketTask+0x5bc>)
 800b0d2:	71da      	strb	r2, [r3, #7]


					osMutexWait(Fm25v02MutexHandle, osWaitForever); // читаем значения регистров
 800b0d4:	4b6c      	ldr	r3, [pc, #432]	; (800b288 <ThreadModbusPacketTask+0x5a8>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f04f 31ff 	mov.w	r1, #4294967295
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fb fa3d 	bl	800655c <osMutexWait>

					fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h);
 800b0e2:	f107 030b 	add.w	r3, r7, #11
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	f44f 7010 	mov.w	r0, #576	; 0x240
 800b0ec:	f000 fc7c 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l);
 800b0f0:	f107 030a 	add.w	r3, r7, #10
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f240 2041 	movw	r0, #577	; 0x241
 800b0fa:	f000 fc75 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b0fe:	7afb      	ldrb	r3, [r7, #11]
 800b100:	021b      	lsls	r3, r3, #8
 800b102:	b21a      	sxth	r2, r3
 800b104:	7abb      	ldrb	r3, [r7, #10]
 800b106:	b21b      	sxth	r3, r3
 800b108:	4313      	orrs	r3, r2
 800b10a:	b21b      	sxth	r3, r3
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	4b65      	ldr	r3, [pc, #404]	; (800b2a4 <ThreadModbusPacketTask+0x5c4>)
 800b110:	861a      	strh	r2, [r3, #48]	; 0x30

					fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h);
 800b112:	f107 030b 	add.w	r3, r7, #11
 800b116:	4619      	mov	r1, r3
 800b118:	f240 2042 	movw	r0, #578	; 0x242
 800b11c:	f000 fc64 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l);
 800b120:	f107 030a 	add.w	r3, r7, #10
 800b124:	4619      	mov	r1, r3
 800b126:	f240 2043 	movw	r0, #579	; 0x243
 800b12a:	f000 fc5d 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b12e:	7afb      	ldrb	r3, [r7, #11]
 800b130:	021b      	lsls	r3, r3, #8
 800b132:	b21a      	sxth	r2, r3
 800b134:	7abb      	ldrb	r3, [r7, #10]
 800b136:	b21b      	sxth	r3, r3
 800b138:	4313      	orrs	r3, r2
 800b13a:	b21b      	sxth	r3, r3
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	4b59      	ldr	r3, [pc, #356]	; (800b2a4 <ThreadModbusPacketTask+0x5c4>)
 800b140:	865a      	strh	r2, [r3, #50]	; 0x32

					fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h);
 800b142:	f107 030b 	add.w	r3, r7, #11
 800b146:	4619      	mov	r1, r3
 800b148:	f44f 7011 	mov.w	r0, #580	; 0x244
 800b14c:	f000 fc4c 	bl	800b9e8 <fm25v02_read>
					fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l);
 800b150:	f107 030a 	add.w	r3, r7, #10
 800b154:	4619      	mov	r1, r3
 800b156:	f240 2045 	movw	r0, #581	; 0x245
 800b15a:	f000 fc45 	bl	800b9e8 <fm25v02_read>
					bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b15e:	7afb      	ldrb	r3, [r7, #11]
 800b160:	021b      	lsls	r3, r3, #8
 800b162:	b21a      	sxth	r2, r3
 800b164:	7abb      	ldrb	r3, [r7, #10]
 800b166:	b21b      	sxth	r3, r3
 800b168:	4313      	orrs	r3, r2
 800b16a:	b21b      	sxth	r3, r3
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	4b4d      	ldr	r3, [pc, #308]	; (800b2a4 <ThreadModbusPacketTask+0x5c4>)
 800b170:	869a      	strh	r2, [r3, #52]	; 0x34

					osMutexRelease(Fm25v02MutexHandle);
 800b172:	4b45      	ldr	r3, [pc, #276]	; (800b288 <ThreadModbusPacketTask+0x5a8>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4618      	mov	r0, r3
 800b178:	f7fb fa3e 	bl	80065f8 <osMutexRelease>

					while( (bootloader_registers.clear_page_on_reg == 0x0001) || (bootloader_registers.write_array_reg == 0x0001) || (bootloader_registers.read_array_reg == 0x0001) ) // вычитываем регистры пока не будет выполнено стирание страниц, запись или чтение данных из памяти контроллера
 800b17c:	e056      	b.n	800b22c <ThreadModbusPacketTask+0x54c>
					{

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b17e:	4b42      	ldr	r3, [pc, #264]	; (800b288 <ThreadModbusPacketTask+0x5a8>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f04f 31ff 	mov.w	r1, #4294967295
 800b186:	4618      	mov	r0, r3
 800b188:	f7fb f9e8 	bl	800655c <osMutexWait>

						fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h);
 800b18c:	f107 030b 	add.w	r3, r7, #11
 800b190:	4619      	mov	r1, r3
 800b192:	f44f 7010 	mov.w	r0, #576	; 0x240
 800b196:	f000 fc27 	bl	800b9e8 <fm25v02_read>
						fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l);
 800b19a:	f107 030a 	add.w	r3, r7, #10
 800b19e:	4619      	mov	r1, r3
 800b1a0:	f240 2041 	movw	r0, #577	; 0x241
 800b1a4:	f000 fc20 	bl	800b9e8 <fm25v02_read>
						bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b1a8:	7afb      	ldrb	r3, [r7, #11]
 800b1aa:	021b      	lsls	r3, r3, #8
 800b1ac:	b21a      	sxth	r2, r3
 800b1ae:	7abb      	ldrb	r3, [r7, #10]
 800b1b0:	b21b      	sxth	r3, r3
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	b21b      	sxth	r3, r3
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	4b3a      	ldr	r3, [pc, #232]	; (800b2a4 <ThreadModbusPacketTask+0x5c4>)
 800b1ba:	861a      	strh	r2, [r3, #48]	; 0x30

						fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h);
 800b1bc:	f107 030b 	add.w	r3, r7, #11
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	f240 2042 	movw	r0, #578	; 0x242
 800b1c6:	f000 fc0f 	bl	800b9e8 <fm25v02_read>
						fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l);
 800b1ca:	f107 030a 	add.w	r3, r7, #10
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	f240 2043 	movw	r0, #579	; 0x243
 800b1d4:	f000 fc08 	bl	800b9e8 <fm25v02_read>
						bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b1d8:	7afb      	ldrb	r3, [r7, #11]
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	b21a      	sxth	r2, r3
 800b1de:	7abb      	ldrb	r3, [r7, #10]
 800b1e0:	b21b      	sxth	r3, r3
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	b21b      	sxth	r3, r3
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	4b2e      	ldr	r3, [pc, #184]	; (800b2a4 <ThreadModbusPacketTask+0x5c4>)
 800b1ea:	865a      	strh	r2, [r3, #50]	; 0x32

						fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h);
 800b1ec:	f107 030b 	add.w	r3, r7, #11
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	f44f 7011 	mov.w	r0, #580	; 0x244
 800b1f6:	f000 fbf7 	bl	800b9e8 <fm25v02_read>
						fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l);
 800b1fa:	f107 030a 	add.w	r3, r7, #10
 800b1fe:	4619      	mov	r1, r3
 800b200:	f240 2045 	movw	r0, #581	; 0x245
 800b204:	f000 fbf0 	bl	800b9e8 <fm25v02_read>
						bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b208:	7afb      	ldrb	r3, [r7, #11]
 800b20a:	021b      	lsls	r3, r3, #8
 800b20c:	b21a      	sxth	r2, r3
 800b20e:	7abb      	ldrb	r3, [r7, #10]
 800b210:	b21b      	sxth	r3, r3
 800b212:	4313      	orrs	r3, r2
 800b214:	b21b      	sxth	r3, r3
 800b216:	b29a      	uxth	r2, r3
 800b218:	4b22      	ldr	r3, [pc, #136]	; (800b2a4 <ThreadModbusPacketTask+0x5c4>)
 800b21a:	869a      	strh	r2, [r3, #52]	; 0x34

						osMutexRelease(Fm25v02MutexHandle);
 800b21c:	4b1a      	ldr	r3, [pc, #104]	; (800b288 <ThreadModbusPacketTask+0x5a8>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4618      	mov	r0, r3
 800b222:	f7fb f9e9 	bl	80065f8 <osMutexRelease>

						osDelay(1);
 800b226:	2001      	movs	r0, #1
 800b228:	f7fb f8b7 	bl	800639a <osDelay>
					while( (bootloader_registers.clear_page_on_reg == 0x0001) || (bootloader_registers.write_array_reg == 0x0001) || (bootloader_registers.read_array_reg == 0x0001) ) // вычитываем регистры пока не будет выполнено стирание страниц, запись или чтение данных из памяти контроллера
 800b22c:	4b1d      	ldr	r3, [pc, #116]	; (800b2a4 <ThreadModbusPacketTask+0x5c4>)
 800b22e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b230:	2b01      	cmp	r3, #1
 800b232:	d0a4      	beq.n	800b17e <ThreadModbusPacketTask+0x49e>
 800b234:	4b1b      	ldr	r3, [pc, #108]	; (800b2a4 <ThreadModbusPacketTask+0x5c4>)
 800b236:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d0a0      	beq.n	800b17e <ThreadModbusPacketTask+0x49e>
 800b23c:	4b19      	ldr	r3, [pc, #100]	; (800b2a4 <ThreadModbusPacketTask+0x5c4>)
 800b23e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b240:	2b01      	cmp	r3, #1
 800b242:	d09c      	beq.n	800b17e <ThreadModbusPacketTask+0x49e>

					}


					osMutexWait(UartMutexHandle, osWaitForever);
 800b244:	4b18      	ldr	r3, [pc, #96]	; (800b2a8 <ThreadModbusPacketTask+0x5c8>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f04f 31ff 	mov.w	r1, #4294967295
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fb f985 	bl	800655c <osMutexWait>
					//if( AT_QISEND(&buf_out1[0], 8) != AT_OK )
					if( AT_CIPSEND(&buf_out1[0], 8) != AT_OK )
 800b252:	2108      	movs	r1, #8
 800b254:	4811      	ldr	r0, [pc, #68]	; (800b29c <ThreadModbusPacketTask+0x5bc>)
 800b256:	f001 fa2d 	bl	800c6b4 <AT_CIPSEND>
					{

					}
					osMutexRelease(UartMutexHandle);
 800b25a:	4b13      	ldr	r3, [pc, #76]	; (800b2a8 <ThreadModbusPacketTask+0x5c8>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fb f9ca 	bl	80065f8 <osMutexRelease>

					modem_transmit_delay_state = 0;
 800b264:	4b11      	ldr	r3, [pc, #68]	; (800b2ac <ThreadModbusPacketTask+0x5cc>)
 800b266:	2200      	movs	r2, #0
 800b268:	701a      	strb	r2, [r3, #0]
					modem_transmit_delay = 0;
 800b26a:	4b11      	ldr	r3, [pc, #68]	; (800b2b0 <ThreadModbusPacketTask+0x5d0>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	801a      	strh	r2, [r3, #0]
					osThreadResume(M95TaskHandle);
 800b270:	4b10      	ldr	r3, [pc, #64]	; (800b2b4 <ThreadModbusPacketTask+0x5d4>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4618      	mov	r0, r3
 800b276:	f7fb fba1 	bl	80069bc <osThreadResume>

				}

				osTimerStart(Ring_Center_TimerHandle, 90000); // поправил время для таймера перезагрузки
 800b27a:	4b0f      	ldr	r3, [pc, #60]	; (800b2b8 <ThreadModbusPacketTask+0x5d8>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	490f      	ldr	r1, [pc, #60]	; (800b2bc <ThreadModbusPacketTask+0x5dc>)
 800b280:	4618      	mov	r0, r3
 800b282:	f7fb f8d3 	bl	800642c <osTimerStart>


			break;
 800b286:	e01c      	b.n	800b2c2 <ThreadModbusPacketTask+0x5e2>
 800b288:	20016c3c 	.word	0x20016c3c
 800b28c:	20018978 	.word	0x20018978
 800b290:	20007f9f 	.word	0x20007f9f
 800b294:	200080c8 	.word	0x200080c8
 800b298:	2001897a 	.word	0x2001897a
 800b29c:	20018778 	.word	0x20018778
 800b2a0:	2001898c 	.word	0x2001898c
 800b2a4:	20018990 	.word	0x20018990
 800b2a8:	20016b38 	.word	0x20016b38
 800b2ac:	20007fa2 	.word	0x20007fa2
 800b2b0:	20007fa0 	.word	0x20007fa0
 800b2b4:	20016c10 	.word	0x20016c10
 800b2b8:	20016b3c 	.word	0x20016b3c
 800b2bc:	00015f90 	.word	0x00015f90
			break;
 800b2c0:	bf00      	nop
		}


		osDelay(1);
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	f7fb f869 	bl	800639a <osDelay>
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 800b2c8:	e515      	b.n	800acf6 <ThreadModbusPacketTask+0x16>
 800b2ca:	bf00      	nop

0800b2cc <ThreadModbusTask>:
volatile uint16_t modem_transmit_delay = 0;
volatile uint8_t modem_transmit_delay_state = 0;


void ThreadModbusTask(void const * argument)
{
 800b2cc:	b590      	push	{r4, r7, lr}
 800b2ce:	b089      	sub	sp, #36	; 0x24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6178      	str	r0, [r7, #20]
	uint16_t i=0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	83fb      	strh	r3, [r7, #30]
	uint16_t i_max;


	for(;;)
	{
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 800b2d8:	4ba1      	ldr	r3, [pc, #644]	; (800b560 <ThreadModbusTask+0x294>)
 800b2da:	6819      	ldr	r1, [r3, #0]
 800b2dc:	4ca1      	ldr	r4, [pc, #644]	; (800b564 <ThreadModbusTask+0x298>)
 800b2de:	463b      	mov	r3, r7
 800b2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fb fae9 	bl	80068bc <osMessageGet>
 800b2ea:	463b      	mov	r3, r7
 800b2ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if(ModbusEvent.status == osEventMessage) // если сообщение пришло
 800b2f4:	4b9b      	ldr	r3, [pc, #620]	; (800b564 <ThreadModbusTask+0x298>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b10      	cmp	r3, #16
 800b2fa:	f040 8311 	bne.w	800b920 <ThreadModbusTask+0x654>
		{

			switch(ModbusEvent.value.v) // проверяем полученное значение из очереди
 800b2fe:	4b99      	ldr	r3, [pc, #612]	; (800b564 <ThreadModbusTask+0x298>)
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	3b01      	subs	r3, #1
 800b304:	2b0f      	cmp	r3, #15
 800b306:	f200 8230 	bhi.w	800b76a <ThreadModbusTask+0x49e>
 800b30a:	a201      	add	r2, pc, #4	; (adr r2, 800b310 <ThreadModbusTask+0x44>)
 800b30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b310:	0800b351 	.word	0x0800b351
 800b314:	0800b76b 	.word	0x0800b76b
 800b318:	0800b447 	.word	0x0800b447
 800b31c:	0800b76b 	.word	0x0800b76b
 800b320:	0800b76b 	.word	0x0800b76b
 800b324:	0800b551 	.word	0x0800b551
 800b328:	0800b76b 	.word	0x0800b76b
 800b32c:	0800b76b 	.word	0x0800b76b
 800b330:	0800b76b 	.word	0x0800b76b
 800b334:	0800b76b 	.word	0x0800b76b
 800b338:	0800b76b 	.word	0x0800b76b
 800b33c:	0800b76b 	.word	0x0800b76b
 800b340:	0800b76b 	.word	0x0800b76b
 800b344:	0800b76b 	.word	0x0800b76b
 800b348:	0800b76b 	.word	0x0800b76b
 800b34c:	0800b665 	.word	0x0800b665
			{
				case(0x01):
					if(i==0)
 800b350:	8bfb      	ldrh	r3, [r7, #30]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d113      	bne.n	800b37e <ThreadModbusTask+0xb2>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b356:	4b83      	ldr	r3, [pc, #524]	; (800b564 <ThreadModbusTask+0x298>)
 800b358:	685a      	ldr	r2, [r3, #4]
 800b35a:	4b83      	ldr	r3, [pc, #524]	; (800b568 <ThreadModbusTask+0x29c>)
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	461c      	mov	r4, r3
 800b360:	8bfb      	ldrh	r3, [r7, #30]
 800b362:	b2d0      	uxtb	r0, r2
 800b364:	4981      	ldr	r1, [pc, #516]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b366:	f241 7270 	movw	r2, #6000	; 0x1770
 800b36a:	fb02 f204 	mul.w	r2, r2, r4
 800b36e:	440a      	add	r2, r1
 800b370:	4413      	add	r3, r2
 800b372:	4602      	mov	r2, r0
 800b374:	701a      	strb	r2, [r3, #0]
						i++;
 800b376:	8bfb      	ldrh	r3, [r7, #30]
 800b378:	3301      	adds	r3, #1
 800b37a:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b37c:	e26c      	b.n	800b858 <ThreadModbusTask+0x58c>
					else if(i==1)
 800b37e:	8bfb      	ldrh	r3, [r7, #30]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d104      	bne.n	800b38e <ThreadModbusTask+0xc2>
						i = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b388:	2300      	movs	r3, #0
 800b38a:	83bb      	strh	r3, [r7, #28]
				break;
 800b38c:	e264      	b.n	800b858 <ThreadModbusTask+0x58c>
					else if(i>1)
 800b38e:	8bfb      	ldrh	r3, [r7, #30]
 800b390:	2b01      	cmp	r3, #1
 800b392:	f240 8261 	bls.w	800b858 <ThreadModbusTask+0x58c>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b396:	8bfb      	ldrh	r3, [r7, #30]
 800b398:	2b06      	cmp	r3, #6
 800b39a:	d140      	bne.n	800b41e <ThreadModbusTask+0x152>
 800b39c:	4b72      	ldr	r3, [pc, #456]	; (800b568 <ThreadModbusTask+0x29c>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	4a72      	ldr	r2, [pc, #456]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b3a4:	f241 7370 	movw	r3, #6000	; 0x1770
 800b3a8:	fb03 f301 	mul.w	r3, r3, r1
 800b3ac:	4413      	add	r3, r2
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	2b10      	cmp	r3, #16
 800b3b4:	d133      	bne.n	800b41e <ThreadModbusTask+0x152>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b3b6:	4b6b      	ldr	r3, [pc, #428]	; (800b564 <ThreadModbusTask+0x298>)
 800b3b8:	685a      	ldr	r2, [r3, #4]
 800b3ba:	4b6b      	ldr	r3, [pc, #428]	; (800b568 <ThreadModbusTask+0x29c>)
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	461c      	mov	r4, r3
 800b3c0:	8bfb      	ldrh	r3, [r7, #30]
 800b3c2:	b2d0      	uxtb	r0, r2
 800b3c4:	4969      	ldr	r1, [pc, #420]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b3c6:	f241 7270 	movw	r2, #6000	; 0x1770
 800b3ca:	fb02 f204 	mul.w	r2, r2, r4
 800b3ce:	440a      	add	r2, r1
 800b3d0:	4413      	add	r3, r2
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	701a      	strb	r2, [r3, #0]
							i_max = 9 + 2*( (((uint16_t)modbus_buffer[modbus_packet_number][4])<<8) | ((uint16_t)modbus_buffer[modbus_packet_number][5]) );
 800b3d6:	4b64      	ldr	r3, [pc, #400]	; (800b568 <ThreadModbusTask+0x29c>)
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4a63      	ldr	r2, [pc, #396]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b3de:	f241 7370 	movw	r3, #6000	; 0x1770
 800b3e2:	fb03 f301 	mul.w	r3, r3, r1
 800b3e6:	4413      	add	r3, r2
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	021b      	lsls	r3, r3, #8
 800b3ee:	4a5e      	ldr	r2, [pc, #376]	; (800b568 <ThreadModbusTask+0x29c>)
 800b3f0:	7812      	ldrb	r2, [r2, #0]
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	495d      	ldr	r1, [pc, #372]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b3f6:	f241 7270 	movw	r2, #6000	; 0x1770
 800b3fa:	fb02 f200 	mul.w	r2, r2, r0
 800b3fe:	440a      	add	r2, r1
 800b400:	3205      	adds	r2, #5
 800b402:	7812      	ldrb	r2, [r2, #0]
 800b404:	4313      	orrs	r3, r2
 800b406:	b29b      	uxth	r3, r3
 800b408:	005b      	lsls	r3, r3, #1
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	3309      	adds	r3, #9
 800b40e:	83bb      	strh	r3, [r7, #28]
							i_m = i_max;
 800b410:	4a57      	ldr	r2, [pc, #348]	; (800b570 <ThreadModbusTask+0x2a4>)
 800b412:	8bbb      	ldrh	r3, [r7, #28]
 800b414:	8013      	strh	r3, [r2, #0]
							i++;
 800b416:	8bfb      	ldrh	r3, [r7, #30]
 800b418:	3301      	adds	r3, #1
 800b41a:	83fb      	strh	r3, [r7, #30]
				break;
 800b41c:	e21c      	b.n	800b858 <ThreadModbusTask+0x58c>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b41e:	4b51      	ldr	r3, [pc, #324]	; (800b564 <ThreadModbusTask+0x298>)
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	4b51      	ldr	r3, [pc, #324]	; (800b568 <ThreadModbusTask+0x29c>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	461c      	mov	r4, r3
 800b428:	8bfb      	ldrh	r3, [r7, #30]
 800b42a:	b2d0      	uxtb	r0, r2
 800b42c:	494f      	ldr	r1, [pc, #316]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b42e:	f241 7270 	movw	r2, #6000	; 0x1770
 800b432:	fb02 f204 	mul.w	r2, r2, r4
 800b436:	440a      	add	r2, r1
 800b438:	4413      	add	r3, r2
 800b43a:	4602      	mov	r2, r0
 800b43c:	701a      	strb	r2, [r3, #0]
							i++;
 800b43e:	8bfb      	ldrh	r3, [r7, #30]
 800b440:	3301      	adds	r3, #1
 800b442:	83fb      	strh	r3, [r7, #30]
				break;
 800b444:	e208      	b.n	800b858 <ThreadModbusTask+0x58c>

				case(0x03):
					if(i==0)
 800b446:	8bfb      	ldrh	r3, [r7, #30]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d104      	bne.n	800b456 <ThreadModbusTask+0x18a>
					{
						i = 0;
 800b44c:	2300      	movs	r3, #0
 800b44e:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b450:	2300      	movs	r3, #0
 800b452:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b454:	e202      	b.n	800b85c <ThreadModbusTask+0x590>
					else if(i==1)
 800b456:	8bfb      	ldrh	r3, [r7, #30]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d11d      	bne.n	800b498 <ThreadModbusTask+0x1cc>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b45c:	4b41      	ldr	r3, [pc, #260]	; (800b564 <ThreadModbusTask+0x298>)
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	4b41      	ldr	r3, [pc, #260]	; (800b568 <ThreadModbusTask+0x29c>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	461c      	mov	r4, r3
 800b466:	8bfb      	ldrh	r3, [r7, #30]
 800b468:	b2d0      	uxtb	r0, r2
 800b46a:	4940      	ldr	r1, [pc, #256]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b46c:	f241 7270 	movw	r2, #6000	; 0x1770
 800b470:	fb02 f204 	mul.w	r2, r2, r4
 800b474:	440a      	add	r2, r1
 800b476:	4413      	add	r3, r2
 800b478:	4602      	mov	r2, r0
 800b47a:	701a      	strb	r2, [r3, #0]
						i++;
 800b47c:	8bfb      	ldrh	r3, [r7, #30]
 800b47e:	3301      	adds	r3, #1
 800b480:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 800b482:	2308      	movs	r3, #8
 800b484:	83bb      	strh	r3, [r7, #28]
						modem_transmit_delay_state = 1;
 800b486:	4b3b      	ldr	r3, [pc, #236]	; (800b574 <ThreadModbusTask+0x2a8>)
 800b488:	2201      	movs	r2, #1
 800b48a:	701a      	strb	r2, [r3, #0]
						osThreadSuspend(M95TaskHandle);
 800b48c:	4b3a      	ldr	r3, [pc, #232]	; (800b578 <ThreadModbusTask+0x2ac>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4618      	mov	r0, r3
 800b492:	f7fb fa87 	bl	80069a4 <osThreadSuspend>
				break;
 800b496:	e1e1      	b.n	800b85c <ThreadModbusTask+0x590>
					else if(i>1)
 800b498:	8bfb      	ldrh	r3, [r7, #30]
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	f240 81de 	bls.w	800b85c <ThreadModbusTask+0x590>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b4a0:	8bfb      	ldrh	r3, [r7, #30]
 800b4a2:	2b06      	cmp	r3, #6
 800b4a4:	d140      	bne.n	800b528 <ThreadModbusTask+0x25c>
 800b4a6:	4b30      	ldr	r3, [pc, #192]	; (800b568 <ThreadModbusTask+0x29c>)
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	4a2f      	ldr	r2, [pc, #188]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b4ae:	f241 7370 	movw	r3, #6000	; 0x1770
 800b4b2:	fb03 f301 	mul.w	r3, r3, r1
 800b4b6:	4413      	add	r3, r2
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	2b10      	cmp	r3, #16
 800b4be:	d133      	bne.n	800b528 <ThreadModbusTask+0x25c>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b4c0:	4b28      	ldr	r3, [pc, #160]	; (800b564 <ThreadModbusTask+0x298>)
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	4b28      	ldr	r3, [pc, #160]	; (800b568 <ThreadModbusTask+0x29c>)
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	461c      	mov	r4, r3
 800b4ca:	8bfb      	ldrh	r3, [r7, #30]
 800b4cc:	b2d0      	uxtb	r0, r2
 800b4ce:	4927      	ldr	r1, [pc, #156]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b4d0:	f241 7270 	movw	r2, #6000	; 0x1770
 800b4d4:	fb02 f204 	mul.w	r2, r2, r4
 800b4d8:	440a      	add	r2, r1
 800b4da:	4413      	add	r3, r2
 800b4dc:	4602      	mov	r2, r0
 800b4de:	701a      	strb	r2, [r3, #0]
							i_max = 9 + 2*( (((uint16_t)modbus_buffer[modbus_packet_number][4])<<8) | ((uint16_t)modbus_buffer[modbus_packet_number][5]) );
 800b4e0:	4b21      	ldr	r3, [pc, #132]	; (800b568 <ThreadModbusTask+0x29c>)
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4a21      	ldr	r2, [pc, #132]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b4e8:	f241 7370 	movw	r3, #6000	; 0x1770
 800b4ec:	fb03 f301 	mul.w	r3, r3, r1
 800b4f0:	4413      	add	r3, r2
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	021b      	lsls	r3, r3, #8
 800b4f8:	4a1b      	ldr	r2, [pc, #108]	; (800b568 <ThreadModbusTask+0x29c>)
 800b4fa:	7812      	ldrb	r2, [r2, #0]
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	491b      	ldr	r1, [pc, #108]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b500:	f241 7270 	movw	r2, #6000	; 0x1770
 800b504:	fb02 f200 	mul.w	r2, r2, r0
 800b508:	440a      	add	r2, r1
 800b50a:	3205      	adds	r2, #5
 800b50c:	7812      	ldrb	r2, [r2, #0]
 800b50e:	4313      	orrs	r3, r2
 800b510:	b29b      	uxth	r3, r3
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	b29b      	uxth	r3, r3
 800b516:	3309      	adds	r3, #9
 800b518:	83bb      	strh	r3, [r7, #28]
							i_m = i_max;
 800b51a:	4a15      	ldr	r2, [pc, #84]	; (800b570 <ThreadModbusTask+0x2a4>)
 800b51c:	8bbb      	ldrh	r3, [r7, #28]
 800b51e:	8013      	strh	r3, [r2, #0]
							i++;
 800b520:	8bfb      	ldrh	r3, [r7, #30]
 800b522:	3301      	adds	r3, #1
 800b524:	83fb      	strh	r3, [r7, #30]
				break;
 800b526:	e199      	b.n	800b85c <ThreadModbusTask+0x590>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b528:	4b0e      	ldr	r3, [pc, #56]	; (800b564 <ThreadModbusTask+0x298>)
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	4b0e      	ldr	r3, [pc, #56]	; (800b568 <ThreadModbusTask+0x29c>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	461c      	mov	r4, r3
 800b532:	8bfb      	ldrh	r3, [r7, #30]
 800b534:	b2d0      	uxtb	r0, r2
 800b536:	490d      	ldr	r1, [pc, #52]	; (800b56c <ThreadModbusTask+0x2a0>)
 800b538:	f241 7270 	movw	r2, #6000	; 0x1770
 800b53c:	fb02 f204 	mul.w	r2, r2, r4
 800b540:	440a      	add	r2, r1
 800b542:	4413      	add	r3, r2
 800b544:	4602      	mov	r2, r0
 800b546:	701a      	strb	r2, [r3, #0]
							i++;
 800b548:	8bfb      	ldrh	r3, [r7, #30]
 800b54a:	3301      	adds	r3, #1
 800b54c:	83fb      	strh	r3, [r7, #30]
				break;
 800b54e:	e185      	b.n	800b85c <ThreadModbusTask+0x590>

				case(0x06):
					if(i==0)
 800b550:	8bfb      	ldrh	r3, [r7, #30]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d112      	bne.n	800b57c <ThreadModbusTask+0x2b0>
					{
						i = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	83bb      	strh	r3, [r7, #28]
 800b55e:	e025      	b.n	800b5ac <ThreadModbusTask+0x2e0>
 800b560:	200080c4 	.word	0x200080c4
 800b564:	2001897c 	.word	0x2001897c
 800b568:	20007f9e 	.word	0x20007f9e
 800b56c:	200080c8 	.word	0x200080c8
 800b570:	20018988 	.word	0x20018988
 800b574:	20007fa2 	.word	0x20007fa2
 800b578:	20016c10 	.word	0x20016c10
					}
					else if(i==1)
 800b57c:	8bfb      	ldrh	r3, [r7, #30]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d114      	bne.n	800b5ac <ThreadModbusTask+0x2e0>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b582:	4ba5      	ldr	r3, [pc, #660]	; (800b818 <ThreadModbusTask+0x54c>)
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	4ba5      	ldr	r3, [pc, #660]	; (800b81c <ThreadModbusTask+0x550>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	461c      	mov	r4, r3
 800b58c:	8bfb      	ldrh	r3, [r7, #30]
 800b58e:	b2d0      	uxtb	r0, r2
 800b590:	49a3      	ldr	r1, [pc, #652]	; (800b820 <ThreadModbusTask+0x554>)
 800b592:	f241 7270 	movw	r2, #6000	; 0x1770
 800b596:	fb02 f204 	mul.w	r2, r2, r4
 800b59a:	440a      	add	r2, r1
 800b59c:	4413      	add	r3, r2
 800b59e:	4602      	mov	r2, r0
 800b5a0:	701a      	strb	r2, [r3, #0]
						i++;
 800b5a2:	8bfb      	ldrh	r3, [r7, #30]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 800b5a8:	2308      	movs	r3, #8
 800b5aa:	83bb      	strh	r3, [r7, #28]
					}
					if(i>1)
 800b5ac:	8bfb      	ldrh	r3, [r7, #30]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	f240 8156 	bls.w	800b860 <ThreadModbusTask+0x594>
					{
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b5b4:	8bfb      	ldrh	r3, [r7, #30]
 800b5b6:	2b06      	cmp	r3, #6
 800b5b8:	d140      	bne.n	800b63c <ThreadModbusTask+0x370>
 800b5ba:	4b98      	ldr	r3, [pc, #608]	; (800b81c <ThreadModbusTask+0x550>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	4619      	mov	r1, r3
 800b5c0:	4a97      	ldr	r2, [pc, #604]	; (800b820 <ThreadModbusTask+0x554>)
 800b5c2:	f241 7370 	movw	r3, #6000	; 0x1770
 800b5c6:	fb03 f301 	mul.w	r3, r3, r1
 800b5ca:	4413      	add	r3, r2
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	2b10      	cmp	r3, #16
 800b5d2:	d133      	bne.n	800b63c <ThreadModbusTask+0x370>
						{
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b5d4:	4b90      	ldr	r3, [pc, #576]	; (800b818 <ThreadModbusTask+0x54c>)
 800b5d6:	685a      	ldr	r2, [r3, #4]
 800b5d8:	4b90      	ldr	r3, [pc, #576]	; (800b81c <ThreadModbusTask+0x550>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	461c      	mov	r4, r3
 800b5de:	8bfb      	ldrh	r3, [r7, #30]
 800b5e0:	b2d0      	uxtb	r0, r2
 800b5e2:	498f      	ldr	r1, [pc, #572]	; (800b820 <ThreadModbusTask+0x554>)
 800b5e4:	f241 7270 	movw	r2, #6000	; 0x1770
 800b5e8:	fb02 f204 	mul.w	r2, r2, r4
 800b5ec:	440a      	add	r2, r1
 800b5ee:	4413      	add	r3, r2
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	701a      	strb	r2, [r3, #0]
							//i_max = 9 + (uint8_t)ModbusEvent.value.v;
							i_max = 9 + 2*( (((uint16_t)modbus_buffer[modbus_packet_number][4])<<8) | ((uint16_t)modbus_buffer[modbus_packet_number][5]) );
 800b5f4:	4b89      	ldr	r3, [pc, #548]	; (800b81c <ThreadModbusTask+0x550>)
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	4a89      	ldr	r2, [pc, #548]	; (800b820 <ThreadModbusTask+0x554>)
 800b5fc:	f241 7370 	movw	r3, #6000	; 0x1770
 800b600:	fb03 f301 	mul.w	r3, r3, r1
 800b604:	4413      	add	r3, r2
 800b606:	3304      	adds	r3, #4
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	021b      	lsls	r3, r3, #8
 800b60c:	4a83      	ldr	r2, [pc, #524]	; (800b81c <ThreadModbusTask+0x550>)
 800b60e:	7812      	ldrb	r2, [r2, #0]
 800b610:	4610      	mov	r0, r2
 800b612:	4983      	ldr	r1, [pc, #524]	; (800b820 <ThreadModbusTask+0x554>)
 800b614:	f241 7270 	movw	r2, #6000	; 0x1770
 800b618:	fb02 f200 	mul.w	r2, r2, r0
 800b61c:	440a      	add	r2, r1
 800b61e:	3205      	adds	r2, #5
 800b620:	7812      	ldrb	r2, [r2, #0]
 800b622:	4313      	orrs	r3, r2
 800b624:	b29b      	uxth	r3, r3
 800b626:	005b      	lsls	r3, r3, #1
 800b628:	b29b      	uxth	r3, r3
 800b62a:	3309      	adds	r3, #9
 800b62c:	83bb      	strh	r3, [r7, #28]
							i_m = i_max;
 800b62e:	4a7d      	ldr	r2, [pc, #500]	; (800b824 <ThreadModbusTask+0x558>)
 800b630:	8bbb      	ldrh	r3, [r7, #28]
 800b632:	8013      	strh	r3, [r2, #0]
							i++;
 800b634:	8bfb      	ldrh	r3, [r7, #30]
 800b636:	3301      	adds	r3, #1
 800b638:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b63a:	e111      	b.n	800b860 <ThreadModbusTask+0x594>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b63c:	4b76      	ldr	r3, [pc, #472]	; (800b818 <ThreadModbusTask+0x54c>)
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	4b76      	ldr	r3, [pc, #472]	; (800b81c <ThreadModbusTask+0x550>)
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	461c      	mov	r4, r3
 800b646:	8bfb      	ldrh	r3, [r7, #30]
 800b648:	b2d0      	uxtb	r0, r2
 800b64a:	4975      	ldr	r1, [pc, #468]	; (800b820 <ThreadModbusTask+0x554>)
 800b64c:	f241 7270 	movw	r2, #6000	; 0x1770
 800b650:	fb02 f204 	mul.w	r2, r2, r4
 800b654:	440a      	add	r2, r1
 800b656:	4413      	add	r3, r2
 800b658:	4602      	mov	r2, r0
 800b65a:	701a      	strb	r2, [r3, #0]
							i++;
 800b65c:	8bfb      	ldrh	r3, [r7, #30]
 800b65e:	3301      	adds	r3, #1
 800b660:	83fb      	strh	r3, [r7, #30]
				break;
 800b662:	e0fd      	b.n	800b860 <ThreadModbusTask+0x594>

				case(0x10):
					if(i==0)
 800b664:	8bfb      	ldrh	r3, [r7, #30]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d104      	bne.n	800b674 <ThreadModbusTask+0x3a8>
					{
						i = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b672:	e0f7      	b.n	800b864 <ThreadModbusTask+0x598>
					else if(i==1)
 800b674:	8bfb      	ldrh	r3, [r7, #30]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d11b      	bne.n	800b6b2 <ThreadModbusTask+0x3e6>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b67a:	4b67      	ldr	r3, [pc, #412]	; (800b818 <ThreadModbusTask+0x54c>)
 800b67c:	685a      	ldr	r2, [r3, #4]
 800b67e:	4b67      	ldr	r3, [pc, #412]	; (800b81c <ThreadModbusTask+0x550>)
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	461c      	mov	r4, r3
 800b684:	8bfb      	ldrh	r3, [r7, #30]
 800b686:	b2d0      	uxtb	r0, r2
 800b688:	4965      	ldr	r1, [pc, #404]	; (800b820 <ThreadModbusTask+0x554>)
 800b68a:	f241 7270 	movw	r2, #6000	; 0x1770
 800b68e:	fb02 f204 	mul.w	r2, r2, r4
 800b692:	440a      	add	r2, r1
 800b694:	4413      	add	r3, r2
 800b696:	4602      	mov	r2, r0
 800b698:	701a      	strb	r2, [r3, #0]
						i++;
 800b69a:	8bfb      	ldrh	r3, [r7, #30]
 800b69c:	3301      	adds	r3, #1
 800b69e:	83fb      	strh	r3, [r7, #30]
						modem_transmit_delay_state = 1;
 800b6a0:	4b61      	ldr	r3, [pc, #388]	; (800b828 <ThreadModbusTask+0x55c>)
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	701a      	strb	r2, [r3, #0]
						osThreadSuspend(M95TaskHandle);
 800b6a6:	4b61      	ldr	r3, [pc, #388]	; (800b82c <ThreadModbusTask+0x560>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fb f97a 	bl	80069a4 <osThreadSuspend>
				break;
 800b6b0:	e0d8      	b.n	800b864 <ThreadModbusTask+0x598>
					else if(i>1)
 800b6b2:	8bfb      	ldrh	r3, [r7, #30]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	f240 80d5 	bls.w	800b864 <ThreadModbusTask+0x598>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b6ba:	8bfb      	ldrh	r3, [r7, #30]
 800b6bc:	2b06      	cmp	r3, #6
 800b6be:	d140      	bne.n	800b742 <ThreadModbusTask+0x476>
 800b6c0:	4b56      	ldr	r3, [pc, #344]	; (800b81c <ThreadModbusTask+0x550>)
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	4a56      	ldr	r2, [pc, #344]	; (800b820 <ThreadModbusTask+0x554>)
 800b6c8:	f241 7370 	movw	r3, #6000	; 0x1770
 800b6cc:	fb03 f301 	mul.w	r3, r3, r1
 800b6d0:	4413      	add	r3, r2
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	2b10      	cmp	r3, #16
 800b6d8:	d133      	bne.n	800b742 <ThreadModbusTask+0x476>
								modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b6da:	4b4f      	ldr	r3, [pc, #316]	; (800b818 <ThreadModbusTask+0x54c>)
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	4b4f      	ldr	r3, [pc, #316]	; (800b81c <ThreadModbusTask+0x550>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	461c      	mov	r4, r3
 800b6e4:	8bfb      	ldrh	r3, [r7, #30]
 800b6e6:	b2d0      	uxtb	r0, r2
 800b6e8:	494d      	ldr	r1, [pc, #308]	; (800b820 <ThreadModbusTask+0x554>)
 800b6ea:	f241 7270 	movw	r2, #6000	; 0x1770
 800b6ee:	fb02 f204 	mul.w	r2, r2, r4
 800b6f2:	440a      	add	r2, r1
 800b6f4:	4413      	add	r3, r2
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	701a      	strb	r2, [r3, #0]
								i_max = 9 + 2*( (((uint16_t)modbus_buffer[modbus_packet_number][4])<<8) | ((uint16_t)modbus_buffer[modbus_packet_number][5]) );
 800b6fa:	4b48      	ldr	r3, [pc, #288]	; (800b81c <ThreadModbusTask+0x550>)
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	4619      	mov	r1, r3
 800b700:	4a47      	ldr	r2, [pc, #284]	; (800b820 <ThreadModbusTask+0x554>)
 800b702:	f241 7370 	movw	r3, #6000	; 0x1770
 800b706:	fb03 f301 	mul.w	r3, r3, r1
 800b70a:	4413      	add	r3, r2
 800b70c:	3304      	adds	r3, #4
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	021b      	lsls	r3, r3, #8
 800b712:	4a42      	ldr	r2, [pc, #264]	; (800b81c <ThreadModbusTask+0x550>)
 800b714:	7812      	ldrb	r2, [r2, #0]
 800b716:	4610      	mov	r0, r2
 800b718:	4941      	ldr	r1, [pc, #260]	; (800b820 <ThreadModbusTask+0x554>)
 800b71a:	f241 7270 	movw	r2, #6000	; 0x1770
 800b71e:	fb02 f200 	mul.w	r2, r2, r0
 800b722:	440a      	add	r2, r1
 800b724:	3205      	adds	r2, #5
 800b726:	7812      	ldrb	r2, [r2, #0]
 800b728:	4313      	orrs	r3, r2
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	b29b      	uxth	r3, r3
 800b730:	3309      	adds	r3, #9
 800b732:	83bb      	strh	r3, [r7, #28]
								i_m = i_max;
 800b734:	4a3b      	ldr	r2, [pc, #236]	; (800b824 <ThreadModbusTask+0x558>)
 800b736:	8bbb      	ldrh	r3, [r7, #28]
 800b738:	8013      	strh	r3, [r2, #0]
								i++;
 800b73a:	8bfb      	ldrh	r3, [r7, #30]
 800b73c:	3301      	adds	r3, #1
 800b73e:	83fb      	strh	r3, [r7, #30]
				break;
 800b740:	e090      	b.n	800b864 <ThreadModbusTask+0x598>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b742:	4b35      	ldr	r3, [pc, #212]	; (800b818 <ThreadModbusTask+0x54c>)
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	4b35      	ldr	r3, [pc, #212]	; (800b81c <ThreadModbusTask+0x550>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	461c      	mov	r4, r3
 800b74c:	8bfb      	ldrh	r3, [r7, #30]
 800b74e:	b2d0      	uxtb	r0, r2
 800b750:	4933      	ldr	r1, [pc, #204]	; (800b820 <ThreadModbusTask+0x554>)
 800b752:	f241 7270 	movw	r2, #6000	; 0x1770
 800b756:	fb02 f204 	mul.w	r2, r2, r4
 800b75a:	440a      	add	r2, r1
 800b75c:	4413      	add	r3, r2
 800b75e:	4602      	mov	r2, r0
 800b760:	701a      	strb	r2, [r3, #0]
							i++;
 800b762:	8bfb      	ldrh	r3, [r7, #30]
 800b764:	3301      	adds	r3, #1
 800b766:	83fb      	strh	r3, [r7, #30]
				break;
 800b768:	e07c      	b.n	800b864 <ThreadModbusTask+0x598>

				default:
					if(i==0)
 800b76a:	8bfb      	ldrh	r3, [r7, #30]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d104      	bne.n	800b77a <ThreadModbusTask+0x4ae>
					{
						i = 0;
 800b770:	2300      	movs	r3, #0
 800b772:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b774:	2300      	movs	r3, #0
 800b776:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b778:	e076      	b.n	800b868 <ThreadModbusTask+0x59c>
					else if(i==1)
 800b77a:	8bfb      	ldrh	r3, [r7, #30]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d104      	bne.n	800b78a <ThreadModbusTask+0x4be>
						i = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b784:	2300      	movs	r3, #0
 800b786:	83bb      	strh	r3, [r7, #28]
				break;
 800b788:	e06e      	b.n	800b868 <ThreadModbusTask+0x59c>
					else if(i>1)
 800b78a:	8bfb      	ldrh	r3, [r7, #30]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d96b      	bls.n	800b868 <ThreadModbusTask+0x59c>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b790:	8bfb      	ldrh	r3, [r7, #30]
 800b792:	2b06      	cmp	r3, #6
 800b794:	d14c      	bne.n	800b830 <ThreadModbusTask+0x564>
 800b796:	4b21      	ldr	r3, [pc, #132]	; (800b81c <ThreadModbusTask+0x550>)
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	4619      	mov	r1, r3
 800b79c:	4a20      	ldr	r2, [pc, #128]	; (800b820 <ThreadModbusTask+0x554>)
 800b79e:	f241 7370 	movw	r3, #6000	; 0x1770
 800b7a2:	fb03 f301 	mul.w	r3, r3, r1
 800b7a6:	4413      	add	r3, r2
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2b10      	cmp	r3, #16
 800b7ae:	d13f      	bne.n	800b830 <ThreadModbusTask+0x564>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b7b0:	4b19      	ldr	r3, [pc, #100]	; (800b818 <ThreadModbusTask+0x54c>)
 800b7b2:	685a      	ldr	r2, [r3, #4]
 800b7b4:	4b19      	ldr	r3, [pc, #100]	; (800b81c <ThreadModbusTask+0x550>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	461c      	mov	r4, r3
 800b7ba:	8bfb      	ldrh	r3, [r7, #30]
 800b7bc:	b2d0      	uxtb	r0, r2
 800b7be:	4918      	ldr	r1, [pc, #96]	; (800b820 <ThreadModbusTask+0x554>)
 800b7c0:	f241 7270 	movw	r2, #6000	; 0x1770
 800b7c4:	fb02 f204 	mul.w	r2, r2, r4
 800b7c8:	440a      	add	r2, r1
 800b7ca:	4413      	add	r3, r2
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	701a      	strb	r2, [r3, #0]
							i_max = 9 + 2*( (((uint16_t)modbus_buffer[modbus_packet_number][4])<<8) | ((uint16_t)modbus_buffer[modbus_packet_number][5]) );
 800b7d0:	4b12      	ldr	r3, [pc, #72]	; (800b81c <ThreadModbusTask+0x550>)
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4a12      	ldr	r2, [pc, #72]	; (800b820 <ThreadModbusTask+0x554>)
 800b7d8:	f241 7370 	movw	r3, #6000	; 0x1770
 800b7dc:	fb03 f301 	mul.w	r3, r3, r1
 800b7e0:	4413      	add	r3, r2
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	021b      	lsls	r3, r3, #8
 800b7e8:	4a0c      	ldr	r2, [pc, #48]	; (800b81c <ThreadModbusTask+0x550>)
 800b7ea:	7812      	ldrb	r2, [r2, #0]
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	490c      	ldr	r1, [pc, #48]	; (800b820 <ThreadModbusTask+0x554>)
 800b7f0:	f241 7270 	movw	r2, #6000	; 0x1770
 800b7f4:	fb02 f200 	mul.w	r2, r2, r0
 800b7f8:	440a      	add	r2, r1
 800b7fa:	3205      	adds	r2, #5
 800b7fc:	7812      	ldrb	r2, [r2, #0]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	b29b      	uxth	r3, r3
 800b802:	005b      	lsls	r3, r3, #1
 800b804:	b29b      	uxth	r3, r3
 800b806:	3309      	adds	r3, #9
 800b808:	83bb      	strh	r3, [r7, #28]
							i_m = i_max;
 800b80a:	4a06      	ldr	r2, [pc, #24]	; (800b824 <ThreadModbusTask+0x558>)
 800b80c:	8bbb      	ldrh	r3, [r7, #28]
 800b80e:	8013      	strh	r3, [r2, #0]
							i++;
 800b810:	8bfb      	ldrh	r3, [r7, #30]
 800b812:	3301      	adds	r3, #1
 800b814:	83fb      	strh	r3, [r7, #30]
				break;
 800b816:	e027      	b.n	800b868 <ThreadModbusTask+0x59c>
 800b818:	2001897c 	.word	0x2001897c
 800b81c:	20007f9e 	.word	0x20007f9e
 800b820:	200080c8 	.word	0x200080c8
 800b824:	20018988 	.word	0x20018988
 800b828:	20007fa2 	.word	0x20007fa2
 800b82c:	20016c10 	.word	0x20016c10
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b830:	4b4c      	ldr	r3, [pc, #304]	; (800b964 <ThreadModbusTask+0x698>)
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	4b4c      	ldr	r3, [pc, #304]	; (800b968 <ThreadModbusTask+0x69c>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	461c      	mov	r4, r3
 800b83a:	8bfb      	ldrh	r3, [r7, #30]
 800b83c:	b2d0      	uxtb	r0, r2
 800b83e:	494b      	ldr	r1, [pc, #300]	; (800b96c <ThreadModbusTask+0x6a0>)
 800b840:	f241 7270 	movw	r2, #6000	; 0x1770
 800b844:	fb02 f204 	mul.w	r2, r2, r4
 800b848:	440a      	add	r2, r1
 800b84a:	4413      	add	r3, r2
 800b84c:	4602      	mov	r2, r0
 800b84e:	701a      	strb	r2, [r3, #0]
							i++;
 800b850:	8bfb      	ldrh	r3, [r7, #30]
 800b852:	3301      	adds	r3, #1
 800b854:	83fb      	strh	r3, [r7, #30]
				break;
 800b856:	e007      	b.n	800b868 <ThreadModbusTask+0x59c>
				break;
 800b858:	bf00      	nop
 800b85a:	e006      	b.n	800b86a <ThreadModbusTask+0x59e>
				break;
 800b85c:	bf00      	nop
 800b85e:	e004      	b.n	800b86a <ThreadModbusTask+0x59e>
				break;
 800b860:	bf00      	nop
 800b862:	e002      	b.n	800b86a <ThreadModbusTask+0x59e>
				break;
 800b864:	bf00      	nop
 800b866:	e000      	b.n	800b86a <ThreadModbusTask+0x59e>
				break;
 800b868:	bf00      	nop
			}
			if( (i >= i_max) && (i != 0) && (i_max != 0) ) // если число принятых байт соответствует длине соответствующей команды
 800b86a:	8bfa      	ldrh	r2, [r7, #30]
 800b86c:	8bbb      	ldrh	r3, [r7, #28]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d356      	bcc.n	800b920 <ThreadModbusTask+0x654>
 800b872:	8bfb      	ldrh	r3, [r7, #30]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d053      	beq.n	800b920 <ThreadModbusTask+0x654>
 800b878:	8bbb      	ldrh	r3, [r7, #28]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d050      	beq.n	800b920 <ThreadModbusTask+0x654>
			{
				crc_temp = CRC16(&modbus_buffer[modbus_packet_number][0], i_max-2); // считаем контрольную сумму принятого пакета
 800b87e:	4b3a      	ldr	r3, [pc, #232]	; (800b968 <ThreadModbusTask+0x69c>)
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	f241 7370 	movw	r3, #6000	; 0x1770
 800b888:	fb03 f302 	mul.w	r3, r3, r2
 800b88c:	4a37      	ldr	r2, [pc, #220]	; (800b96c <ThreadModbusTask+0x6a0>)
 800b88e:	441a      	add	r2, r3
 800b890:	8bbb      	ldrh	r3, [r7, #28]
 800b892:	3b02      	subs	r3, #2
 800b894:	4619      	mov	r1, r3
 800b896:	4610      	mov	r0, r2
 800b898:	f003 fa50 	bl	800ed3c <CRC16>
 800b89c:	4603      	mov	r3, r0
 800b89e:	4a34      	ldr	r2, [pc, #208]	; (800b970 <ThreadModbusTask+0x6a4>)
 800b8a0:	6013      	str	r3, [r2, #0]
				if( ( ((crc_temp>>8)&0x00FF) == modbus_buffer[modbus_packet_number][i_max-1] ) && ( (crc_temp&0x00FF) == modbus_buffer[modbus_packet_number][i_max-2]) ) // проверяем контрольную сумму принятого пакета
 800b8a2:	4b33      	ldr	r3, [pc, #204]	; (800b970 <ThreadModbusTask+0x6a4>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	0a1b      	lsrs	r3, r3, #8
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	4a2f      	ldr	r2, [pc, #188]	; (800b968 <ThreadModbusTask+0x69c>)
 800b8ac:	7812      	ldrb	r2, [r2, #0]
 800b8ae:	4614      	mov	r4, r2
 800b8b0:	8bba      	ldrh	r2, [r7, #28]
 800b8b2:	3a01      	subs	r2, #1
 800b8b4:	482d      	ldr	r0, [pc, #180]	; (800b96c <ThreadModbusTask+0x6a0>)
 800b8b6:	f241 7170 	movw	r1, #6000	; 0x1770
 800b8ba:	fb01 f104 	mul.w	r1, r1, r4
 800b8be:	4401      	add	r1, r0
 800b8c0:	440a      	add	r2, r1
 800b8c2:	7812      	ldrb	r2, [r2, #0]
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d127      	bne.n	800b918 <ThreadModbusTask+0x64c>
 800b8c8:	4b29      	ldr	r3, [pc, #164]	; (800b970 <ThreadModbusTask+0x6a4>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	4a26      	ldr	r2, [pc, #152]	; (800b968 <ThreadModbusTask+0x69c>)
 800b8d0:	7812      	ldrb	r2, [r2, #0]
 800b8d2:	4614      	mov	r4, r2
 800b8d4:	8bba      	ldrh	r2, [r7, #28]
 800b8d6:	3a02      	subs	r2, #2
 800b8d8:	4824      	ldr	r0, [pc, #144]	; (800b96c <ThreadModbusTask+0x6a0>)
 800b8da:	f241 7170 	movw	r1, #6000	; 0x1770
 800b8de:	fb01 f104 	mul.w	r1, r1, r4
 800b8e2:	4401      	add	r1, r0
 800b8e4:	440a      	add	r2, r1
 800b8e6:	7812      	ldrb	r2, [r2, #0]
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d115      	bne.n	800b918 <ThreadModbusTask+0x64c>
				{
					modbus_packet_number1 = modbus_packet_number;
 800b8ec:	4b1e      	ldr	r3, [pc, #120]	; (800b968 <ThreadModbusTask+0x69c>)
 800b8ee:	781a      	ldrb	r2, [r3, #0]
 800b8f0:	4b20      	ldr	r3, [pc, #128]	; (800b974 <ThreadModbusTask+0x6a8>)
 800b8f2:	701a      	strb	r2, [r3, #0]
					modbus_packet_number++;
 800b8f4:	4b1c      	ldr	r3, [pc, #112]	; (800b968 <ThreadModbusTask+0x69c>)
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	4b1a      	ldr	r3, [pc, #104]	; (800b968 <ThreadModbusTask+0x69c>)
 800b8fe:	701a      	strb	r2, [r3, #0]
					if( modbus_packet_number >= 10)
 800b900:	4b19      	ldr	r3, [pc, #100]	; (800b968 <ThreadModbusTask+0x69c>)
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	2b09      	cmp	r3, #9
 800b906:	d902      	bls.n	800b90e <ThreadModbusTask+0x642>
					{
						modbus_packet_number = 0;
 800b908:	4b17      	ldr	r3, [pc, #92]	; (800b968 <ThreadModbusTask+0x69c>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	701a      	strb	r2, [r3, #0]
					}

					osSemaphoreRelease(ModbusPacketReceiveHandle);
 800b90e:	4b1a      	ldr	r3, [pc, #104]	; (800b978 <ThreadModbusTask+0x6ac>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4618      	mov	r0, r3
 800b914:	f7fa ff34 	bl	8006780 <osSemaphoreRelease>
				}

				i = 0;     // обнуляем значение текущего принятого байта
 800b918:	2300      	movs	r3, #0
 800b91a:	83fb      	strh	r3, [r7, #30]
				i_max = 0; // обнуляем максимальное значение принятого байта
 800b91c:	2300      	movs	r3, #0
 800b91e:	83bb      	strh	r3, [r7, #28]
				//osThreadResume(M95TaskHandle);

			}
		}

		if(modem_transmit_delay_state == 1)
 800b920:	4b16      	ldr	r3, [pc, #88]	; (800b97c <ThreadModbusTask+0x6b0>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b01      	cmp	r3, #1
 800b928:	f47f acd6 	bne.w	800b2d8 <ThreadModbusTask+0xc>
		{
			modem_transmit_delay++;
 800b92c:	4b14      	ldr	r3, [pc, #80]	; (800b980 <ThreadModbusTask+0x6b4>)
 800b92e:	881b      	ldrh	r3, [r3, #0]
 800b930:	b29b      	uxth	r3, r3
 800b932:	3301      	adds	r3, #1
 800b934:	b29a      	uxth	r2, r3
 800b936:	4b12      	ldr	r3, [pc, #72]	; (800b980 <ThreadModbusTask+0x6b4>)
 800b938:	801a      	strh	r2, [r3, #0]
			if(modem_transmit_delay >= 10000)
 800b93a:	4b11      	ldr	r3, [pc, #68]	; (800b980 <ThreadModbusTask+0x6b4>)
 800b93c:	881b      	ldrh	r3, [r3, #0]
 800b93e:	b29b      	uxth	r3, r3
 800b940:	f242 720f 	movw	r2, #9999	; 0x270f
 800b944:	4293      	cmp	r3, r2
 800b946:	f67f acc7 	bls.w	800b2d8 <ThreadModbusTask+0xc>
			{
				osThreadResume(M95TaskHandle);
 800b94a:	4b0e      	ldr	r3, [pc, #56]	; (800b984 <ThreadModbusTask+0x6b8>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fb f834 	bl	80069bc <osThreadResume>
				modem_transmit_delay = 0;
 800b954:	4b0a      	ldr	r3, [pc, #40]	; (800b980 <ThreadModbusTask+0x6b4>)
 800b956:	2200      	movs	r2, #0
 800b958:	801a      	strh	r2, [r3, #0]
				modem_transmit_delay_state = 0;
 800b95a:	4b08      	ldr	r3, [pc, #32]	; (800b97c <ThreadModbusTask+0x6b0>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	701a      	strb	r2, [r3, #0]
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 800b960:	e4ba      	b.n	800b2d8 <ThreadModbusTask+0xc>
 800b962:	bf00      	nop
 800b964:	2001897c 	.word	0x2001897c
 800b968:	20007f9e 	.word	0x20007f9e
 800b96c:	200080c8 	.word	0x200080c8
 800b970:	2001898c 	.word	0x2001898c
 800b974:	20007f9f 	.word	0x20007f9f
 800b978:	20016c14 	.word	0x20016c14
 800b97c:	20007fa2 	.word	0x20007fa2
 800b980:	20007fa0 	.word	0x20007fa0
 800b984:	20016c10 	.word	0x20016c10

0800b988 <ThreadReadRegistersTask>:
extern osThreadId M95TaskHandle;
extern osThreadId MainTaskHandle;


void ThreadReadRegistersTask(void const * argument)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
	read_status_registers(); // вычитываем регистры
 800b990:	f001 fb18 	bl	800cfc4 <read_status_registers>
	read_control_registers();
 800b994:	f001 fe6e 	bl	800d674 <read_control_registers>
	read_bootloader_registers();
 800b998:	f002 f9ee 	bl	800dd78 <read_bootloader_registers>
	read_change_boot_registers();
 800b99c:	f003 f884 	bl	800eaa8 <read_change_boot_registers>
	osDelay(2000); // ждем пока будет получен статус фаз А1,А2,В1,В2,С1,С2
 800b9a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b9a4:	f7fa fcf9 	bl	800639a <osDelay>
	osThreadResume(MainTaskHandle); // запускаем основной процесс
 800b9a8:	4b0d      	ldr	r3, [pc, #52]	; (800b9e0 <ThreadReadRegistersTask+0x58>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fb f805 	bl	80069bc <osThreadResume>
	osThreadResume(M95TaskHandle);  // запускаем процесс модема
 800b9b2:	4b0c      	ldr	r3, [pc, #48]	; (800b9e4 <ThreadReadRegistersTask+0x5c>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fb f800 	bl	80069bc <osThreadResume>
	osDelay(1000); //ждем 1 секунду
 800b9bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b9c0:	f7fa fceb 	bl	800639a <osDelay>


	for(;;)
	{

		read_status_registers(); // вычитываем регистры
 800b9c4:	f001 fafe 	bl	800cfc4 <read_status_registers>
		read_control_registers();
 800b9c8:	f001 fe54 	bl	800d674 <read_control_registers>
		read_bootloader_registers();
 800b9cc:	f002 f9d4 	bl	800dd78 <read_bootloader_registers>
		read_change_boot_registers();
 800b9d0:	f003 f86a 	bl	800eaa8 <read_change_boot_registers>

		osDelay(1000); // ждем 1 секунду
 800b9d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b9d8:	f7fa fcdf 	bl	800639a <osDelay>
		read_status_registers(); // вычитываем регистры
 800b9dc:	e7f2      	b.n	800b9c4 <ThreadReadRegistersTask+0x3c>
 800b9de:	bf00      	nop
 800b9e0:	20016c08 	.word	0x20016c08
 800b9e4:	20016c10 	.word	0x20016c10

0800b9e8 <fm25v02_read>:
	}
	return temp_id;
}

void fm25v02_read (uint16_t address, uint8_t* data)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	6039      	str	r1, [r7, #0]
 800b9f2:	80fb      	strh	r3, [r7, #6]
	uint8_t data_out[3];
	data_out[0]= READ;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800b9f8:	88fb      	ldrh	r3, [r7, #6]
 800b9fa:	0a1b      	lsrs	r3, r3, #8
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800ba02:	88fb      	ldrh	r3, [r7, #6]
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	73bb      	strb	r3, [r7, #14]
	FM25V02_CS_ON();
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba0e:	4811      	ldr	r0, [pc, #68]	; (800ba54 <fm25v02_read+0x6c>)
 800ba10:	f7f7 fada 	bl	8002fc8 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 3, 10) != HAL_OK ) {}
 800ba14:	bf00      	nop
 800ba16:	f107 010c 	add.w	r1, r7, #12
 800ba1a:	230a      	movs	r3, #10
 800ba1c:	2203      	movs	r2, #3
 800ba1e:	480e      	ldr	r0, [pc, #56]	; (800ba58 <fm25v02_read+0x70>)
 800ba20:	f7f8 fb13 	bl	800404a <HAL_SPI_Transmit>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1f5      	bne.n	800ba16 <fm25v02_read+0x2e>
	while( HAL_SPI_Receive(&hspi2, data, 1, 10) != HAL_OK ) {}
 800ba2a:	bf00      	nop
 800ba2c:	230a      	movs	r3, #10
 800ba2e:	2201      	movs	r2, #1
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	4809      	ldr	r0, [pc, #36]	; (800ba58 <fm25v02_read+0x70>)
 800ba34:	f7f8 fc45 	bl	80042c2 <HAL_SPI_Receive>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1f6      	bne.n	800ba2c <fm25v02_read+0x44>
	FM25V02_CS_OFF();
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba44:	4803      	ldr	r0, [pc, #12]	; (800ba54 <fm25v02_read+0x6c>)
 800ba46:	f7f7 fabf 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800ba4a:	bf00      	nop
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	40020400 	.word	0x40020400
 800ba58:	20007fb0 	.word	0x20007fb0

0800ba5c <fm25v02_write>:

void fm25v02_write (uint16_t address, uint8_t data)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4603      	mov	r3, r0
 800ba64:	460a      	mov	r2, r1
 800ba66:	80fb      	strh	r3, [r7, #6]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	717b      	strb	r3, [r7, #5]
	uint8_t data_out[4];
	data_out[0]= WREN;
 800ba6c:	2306      	movs	r3, #6
 800ba6e:	733b      	strb	r3, [r7, #12]
	FM25V02_CS_ON();
 800ba70:	2200      	movs	r2, #0
 800ba72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba76:	481d      	ldr	r0, [pc, #116]	; (800baec <fm25v02_write+0x90>)
 800ba78:	f7f7 faa6 	bl	8002fc8 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 1, 10) != HAL_OK ) {}
 800ba7c:	bf00      	nop
 800ba7e:	f107 010c 	add.w	r1, r7, #12
 800ba82:	230a      	movs	r3, #10
 800ba84:	2201      	movs	r2, #1
 800ba86:	481a      	ldr	r0, [pc, #104]	; (800baf0 <fm25v02_write+0x94>)
 800ba88:	f7f8 fadf 	bl	800404a <HAL_SPI_Transmit>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1f5      	bne.n	800ba7e <fm25v02_write+0x22>
	FM25V02_CS_OFF();
 800ba92:	2201      	movs	r2, #1
 800ba94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba98:	4814      	ldr	r0, [pc, #80]	; (800baec <fm25v02_write+0x90>)
 800ba9a:	f7f7 fa95 	bl	8002fc8 <HAL_GPIO_WritePin>
	data_out[0]= WRITE;
 800ba9e:	2302      	movs	r3, #2
 800baa0:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800baa2:	88fb      	ldrh	r3, [r7, #6]
 800baa4:	0a1b      	lsrs	r3, r3, #8
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800baac:	88fb      	ldrh	r3, [r7, #6]
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	73bb      	strb	r3, [r7, #14]
	data_out[3]= data;
 800bab2:	797b      	ldrb	r3, [r7, #5]
 800bab4:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 800bab6:	2200      	movs	r2, #0
 800bab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800babc:	480b      	ldr	r0, [pc, #44]	; (800baec <fm25v02_write+0x90>)
 800babe:	f7f7 fa83 	bl	8002fc8 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 800bac2:	bf00      	nop
 800bac4:	f107 010c 	add.w	r1, r7, #12
 800bac8:	230a      	movs	r3, #10
 800baca:	2204      	movs	r2, #4
 800bacc:	4808      	ldr	r0, [pc, #32]	; (800baf0 <fm25v02_write+0x94>)
 800bace:	f7f8 fabc 	bl	800404a <HAL_SPI_Transmit>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1f5      	bne.n	800bac4 <fm25v02_write+0x68>
	FM25V02_CS_OFF();
 800bad8:	2201      	movs	r2, #1
 800bada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bade:	4803      	ldr	r0, [pc, #12]	; (800baec <fm25v02_write+0x90>)
 800bae0:	f7f7 fa72 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bae4:	bf00      	nop
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	40020400 	.word	0x40020400
 800baf0:	20007fb0 	.word	0x20007fb0

0800baf4 <fm25v02_fast_write>:

uint8_t fm25v02_fast_write (uint16_t address, uint8_t* data, uint16_t Size)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	4603      	mov	r3, r0
 800bafc:	6039      	str	r1, [r7, #0]
 800bafe:	80fb      	strh	r3, [r7, #6]
 800bb00:	4613      	mov	r3, r2
 800bb02:	80bb      	strh	r3, [r7, #4]
	for(uint8_t i=0; i<Size; i++)
 800bb04:	2300      	movs	r3, #0
 800bb06:	73fb      	strb	r3, [r7, #15]
 800bb08:	e00e      	b.n	800bb28 <fm25v02_fast_write+0x34>
	{
		fm25v02_write(address+i, *(data+i));
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	88fb      	ldrh	r3, [r7, #6]
 800bb10:	4413      	add	r3, r2
 800bb12:	b298      	uxth	r0, r3
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	4413      	add	r3, r2
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	f7ff ff9d 	bl	800ba5c <fm25v02_write>
	for(uint8_t i=0; i<Size; i++)
 800bb22:	7bfb      	ldrb	r3, [r7, #15]
 800bb24:	3301      	adds	r3, #1
 800bb26:	73fb      	strb	r3, [r7, #15]
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	88ba      	ldrh	r2, [r7, #4]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d8eb      	bhi.n	800bb0a <fm25v02_fast_write+0x16>
	}
	return 0;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <fm25v02_fast_read>:

HAL_StatusTypeDef fm25v02_fast_read (uint16_t address, uint8_t* data, uint16_t Size)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	6039      	str	r1, [r7, #0]
 800bb46:	80fb      	strh	r3, [r7, #6]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	80bb      	strh	r3, [r7, #4]
	uint8_t data_out[4];
	data_out[0]= FSTRD;
 800bb4c:	230b      	movs	r3, #11
 800bb4e:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800bb50:	88fb      	ldrh	r3, [r7, #6]
 800bb52:	0a1b      	lsrs	r3, r3, #8
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800bb5a:	88fb      	ldrh	r3, [r7, #6]
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	73bb      	strb	r3, [r7, #14]
	data_out[3]= 0xFF;
 800bb60:	23ff      	movs	r3, #255	; 0xff
 800bb62:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 800bb64:	2200      	movs	r2, #0
 800bb66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bb6a:	4811      	ldr	r0, [pc, #68]	; (800bbb0 <fm25v02_fast_read+0x74>)
 800bb6c:	f7f7 fa2c 	bl	8002fc8 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 800bb70:	bf00      	nop
 800bb72:	f107 010c 	add.w	r1, r7, #12
 800bb76:	230a      	movs	r3, #10
 800bb78:	2204      	movs	r2, #4
 800bb7a:	480e      	ldr	r0, [pc, #56]	; (800bbb4 <fm25v02_fast_read+0x78>)
 800bb7c:	f7f8 fa65 	bl	800404a <HAL_SPI_Transmit>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1f5      	bne.n	800bb72 <fm25v02_fast_read+0x36>
	while( HAL_SPI_Receive(&hspi2, data, Size, 10) != HAL_OK ) {}
 800bb86:	bf00      	nop
 800bb88:	88ba      	ldrh	r2, [r7, #4]
 800bb8a:	230a      	movs	r3, #10
 800bb8c:	6839      	ldr	r1, [r7, #0]
 800bb8e:	4809      	ldr	r0, [pc, #36]	; (800bbb4 <fm25v02_fast_read+0x78>)
 800bb90:	f7f8 fb97 	bl	80042c2 <HAL_SPI_Receive>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1f6      	bne.n	800bb88 <fm25v02_fast_read+0x4c>
	FM25V02_CS_OFF();
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bba0:	4803      	ldr	r0, [pc, #12]	; (800bbb0 <fm25v02_fast_read+0x74>)
 800bba2:	f7f7 fa11 	bl	8002fc8 <HAL_GPIO_WritePin>
	return HAL_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	40020400 	.word	0x40020400
 800bbb4:	20007fb0 	.word	0x20007fb0

0800bbb8 <BUZ_ON>:


//---функции включения и отключения светодиодов, зуммера и транзистора охранного светодиода-----------------

void BUZ_ON(void) // включение зуммера
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bbc2:	4802      	ldr	r0, [pc, #8]	; (800bbcc <BUZ_ON+0x14>)
 800bbc4:	f7f7 fa00 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bbc8:	bf00      	nop
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	40020c00 	.word	0x40020c00

0800bbd0 <BUZ_OFF>:

void BUZ_OFF(void) // выключение зуммера
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bbda:	4802      	ldr	r0, [pc, #8]	; (800bbe4 <BUZ_OFF+0x14>)
 800bbdc:	f7f7 f9f4 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bbe0:	bf00      	nop
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	40020c00 	.word	0x40020c00

0800bbe8 <LED1_OFF>:
{
	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
}

void LED1_OFF(void) // выключение светодиода LED1
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800bbec:	2200      	movs	r2, #0
 800bbee:	2120      	movs	r1, #32
 800bbf0:	4802      	ldr	r0, [pc, #8]	; (800bbfc <LED1_OFF+0x14>)
 800bbf2:	f7f7 f9e9 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bbf6:	bf00      	nop
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	40020400 	.word	0x40020400

0800bc00 <LED1_ON>:

void LED1_ON(void) // включение светодиода LED1
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800bc04:	2201      	movs	r2, #1
 800bc06:	2120      	movs	r1, #32
 800bc08:	4802      	ldr	r0, [pc, #8]	; (800bc14 <LED1_ON+0x14>)
 800bc0a:	f7f7 f9dd 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bc0e:	bf00      	nop
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	40020400 	.word	0x40020400

0800bc18 <LED2_ON>:
{
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
}

void LED2_ON(void) // включение светодиода LED2
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	2102      	movs	r1, #2
 800bc20:	4802      	ldr	r0, [pc, #8]	; (800bc2c <LED2_ON+0x14>)
 800bc22:	f7f7 f9d1 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bc26:	bf00      	nop
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	40021000 	.word	0x40021000

0800bc30 <LED3_ON>:
{
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
}

void LED3_ON(void) // включение светодиода LED3
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800bc34:	2201      	movs	r2, #1
 800bc36:	2120      	movs	r1, #32
 800bc38:	4802      	ldr	r0, [pc, #8]	; (800bc44 <LED3_ON+0x14>)
 800bc3a:	f7f7 f9c5 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bc3e:	bf00      	nop
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	40021000 	.word	0x40021000

0800bc48 <LED4_ON>:
{
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
}

void LED4_ON(void) // включение светодиода LED4
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	2140      	movs	r1, #64	; 0x40
 800bc50:	4802      	ldr	r0, [pc, #8]	; (800bc5c <LED4_ON+0x14>)
 800bc52:	f7f7 f9b9 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bc56:	bf00      	nop
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	40021000 	.word	0x40021000

0800bc60 <LED5_ON>:
{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
}

void LED5_ON(void) // включение светодиода LED5
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800bc64:	2201      	movs	r2, #1
 800bc66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bc6a:	4802      	ldr	r0, [pc, #8]	; (800bc74 <LED5_ON+0x14>)
 800bc6c:	f7f7 f9ac 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bc70:	bf00      	nop
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	40020800 	.word	0x40020800

0800bc78 <LED6_ON>:
{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}

void LED6_ON(void) // включение светодиода LED6
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	2102      	movs	r1, #2
 800bc80:	4802      	ldr	r0, [pc, #8]	; (800bc8c <LED6_ON+0x14>)
 800bc82:	f7f7 f9a1 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bc86:	bf00      	nop
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	40020800 	.word	0x40020800

0800bc90 <find_str>:

//uint8_t send_ok[] = "SEND OK\r\n";
uint8_t send_ok[] = "SEND OK\r\n";

uint8_t find_str(uint8_t* buf_in, uint16_t buf_in_len, uint8_t* buf_search, uint16_t buf_search_len)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b087      	sub	sp, #28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	607a      	str	r2, [r7, #4]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	817b      	strh	r3, [r7, #10]
 800bca0:	4613      	mov	r3, r2
 800bca2:	813b      	strh	r3, [r7, #8]
	uint8_t j=0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i=0; i<buf_in_len; i++)
 800bca8:	2300      	movs	r3, #0
 800bcaa:	75bb      	strb	r3, [r7, #22]
 800bcac:	e018      	b.n	800bce0 <find_str+0x50>
	{
		if( *( buf_in+i ) == *(buf_search+j) )
 800bcae:	7dbb      	ldrb	r3, [r7, #22]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	781a      	ldrb	r2, [r3, #0]
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
 800bcb8:	6879      	ldr	r1, [r7, #4]
 800bcba:	440b      	add	r3, r1
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d109      	bne.n	800bcd6 <find_str+0x46>
		{
			j++;
 800bcc2:	7dfb      	ldrb	r3, [r7, #23]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	75fb      	strb	r3, [r7, #23]
			if(j>=buf_search_len)
 800bcc8:	7dfb      	ldrb	r3, [r7, #23]
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	893a      	ldrh	r2, [r7, #8]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d803      	bhi.n	800bcda <find_str+0x4a>
			{
				return 1;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e00a      	b.n	800bcec <find_str+0x5c>
			}
		}
		else
		{
			j=0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<buf_in_len; i++)
 800bcda:	7dbb      	ldrb	r3, [r7, #22]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	75bb      	strb	r3, [r7, #22]
 800bce0:	7dbb      	ldrb	r3, [r7, #22]
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	897a      	ldrh	r2, [r7, #10]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d8e1      	bhi.n	800bcae <find_str+0x1e>
		}
	}

	return 0;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	371c      	adds	r7, #28
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <m95_power_on>:

void m95_power_on(void) // функция включения питания
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd02:	480c      	ldr	r0, [pc, #48]	; (800bd34 <m95_power_on+0x3c>)
 800bd04:	f7f7 f960 	bl	8002fc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800bd08:	2064      	movs	r0, #100	; 0x64
 800bd0a:	f7f5 fe55 	bl	80019b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd14:	4807      	ldr	r0, [pc, #28]	; (800bd34 <m95_power_on+0x3c>)
 800bd16:	f7f7 f957 	bl	8002fc8 <HAL_GPIO_WritePin>
	HAL_Delay(1100);
 800bd1a:	f240 404c 	movw	r0, #1100	; 0x44c
 800bd1e:	f7f5 fe4b 	bl	80019b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800bd22:	2200      	movs	r2, #0
 800bd24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd28:	4802      	ldr	r0, [pc, #8]	; (800bd34 <m95_power_on+0x3c>)
 800bd2a:	f7f7 f94d 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bd2e:	bf00      	nop
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	40021000 	.word	0x40021000

0800bd38 <m95_power_off>:

void m95_power_off(void)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd42:	480c      	ldr	r0, [pc, #48]	; (800bd74 <m95_power_off+0x3c>)
 800bd44:	f7f7 f940 	bl	8002fc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800bd48:	2064      	movs	r0, #100	; 0x64
 800bd4a:	f7f5 fe35 	bl	80019b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd54:	4807      	ldr	r0, [pc, #28]	; (800bd74 <m95_power_off+0x3c>)
 800bd56:	f7f7 f937 	bl	8002fc8 <HAL_GPIO_WritePin>
	HAL_Delay(1100);
 800bd5a:	f240 404c 	movw	r0, #1100	; 0x44c
 800bd5e:	f7f5 fe2b 	bl	80019b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800bd62:	2200      	movs	r2, #0
 800bd64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd68:	4802      	ldr	r0, [pc, #8]	; (800bd74 <m95_power_off+0x3c>)
 800bd6a:	f7f7 f92d 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800bd6e:	bf00      	nop
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	40021000 	.word	0x40021000

0800bd78 <modem_rx_buffer_clear>:



void modem_rx_buffer_clear (void)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 800bd7e:	2300      	movs	r3, #0
 800bd80:	80fb      	strh	r3, [r7, #6]
 800bd82:	e006      	b.n	800bd92 <modem_rx_buffer_clear+0x1a>
	{
		modem_rx_buffer[i] = 0;
 800bd84:	88fb      	ldrh	r3, [r7, #6]
 800bd86:	4a08      	ldr	r2, [pc, #32]	; (800bda8 <modem_rx_buffer_clear+0x30>)
 800bd88:	2100      	movs	r1, #0
 800bd8a:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 800bd8c:	88fb      	ldrh	r3, [r7, #6]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	80fb      	strh	r3, [r7, #6]
 800bd92:	88fb      	ldrh	r3, [r7, #6]
 800bd94:	2bff      	cmp	r3, #255	; 0xff
 800bd96:	d9f5      	bls.n	800bd84 <modem_rx_buffer_clear+0xc>
	}
}
 800bd98:	bf00      	nop
 800bd9a:	bf00      	nop
 800bd9c:	370c      	adds	r7, #12
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	20016d40 	.word	0x20016d40

0800bdac <ATE0>:

uint8_t ATE0 (void)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
	char str_out[6];
	sprintf(str_out, "ATE0\r\n");
 800bdb2:	463b      	mov	r3, r7
 800bdb4:	491f      	ldr	r1, [pc, #124]	; (800be34 <ATE0+0x88>)
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f003 f908 	bl	800efcc <siprintf>

	read_rx_state = ACTIVE;
 800bdbc:	4b1e      	ldr	r3, [pc, #120]	; (800be38 <ATE0+0x8c>)
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800bdc2:	4b1e      	ldr	r3, [pc, #120]	; (800be3c <ATE0+0x90>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800bdc8:	f7ff ffd6 	bl	800bd78 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800bdcc:	2201      	movs	r2, #1
 800bdce:	491c      	ldr	r1, [pc, #112]	; (800be40 <ATE0+0x94>)
 800bdd0:	481c      	ldr	r0, [pc, #112]	; (800be44 <ATE0+0x98>)
 800bdd2:	f7f9 fa01 	bl	80051d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 6);
 800bdd6:	463b      	mov	r3, r7
 800bdd8:	2206      	movs	r2, #6
 800bdda:	4619      	mov	r1, r3
 800bddc:	4819      	ldr	r0, [pc, #100]	; (800be44 <ATE0+0x98>)
 800bdde:	f7f9 f97d 	bl	80050dc <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800bde2:	4b19      	ldr	r3, [pc, #100]	; (800be48 <ATE0+0x9c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f04f 31ff 	mov.w	r1, #4294967295
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7fa fc7a 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800bdf0:	4b16      	ldr	r3, [pc, #88]	; (800be4c <ATE0+0xa0>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7fa fb17 	bl	800642c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800bdfe:	e010      	b.n	800be22 <ATE0+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800be00:	4913      	ldr	r1, [pc, #76]	; (800be50 <ATE0+0xa4>)
 800be02:	4814      	ldr	r0, [pc, #80]	; (800be54 <ATE0+0xa8>)
 800be04:	f003 f902 	bl	800f00c <strstr>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d009      	beq.n	800be22 <ATE0+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800be0e:	4b0f      	ldr	r3, [pc, #60]	; (800be4c <ATE0+0xa0>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4618      	mov	r0, r3
 800be14:	f7fa fb4e 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800be18:	4b07      	ldr	r3, [pc, #28]	; (800be38 <ATE0+0x8c>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	e004      	b.n	800be2c <ATE0+0x80>
	while(read_rx_state == ACTIVE)
 800be22:	4b05      	ldr	r3, [pc, #20]	; (800be38 <ATE0+0x8c>)
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d0ea      	beq.n	800be00 <ATE0+0x54>
		}
	}
	return AT_ERROR;
 800be2a:	2301      	movs	r3, #1
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	0800f8bc 	.word	0x0800f8bc
 800be38:	20016c18 	.word	0x20016c18
 800be3c:	2000080c 	.word	0x2000080c
 800be40:	20016c40 	.word	0x20016c40
 800be44:	20008070 	.word	0x20008070
 800be48:	20016e4c 	.word	0x20016e4c
 800be4c:	20016b30 	.word	0x20016b30
 800be50:	0800f8c4 	.word	0x0800f8c4
 800be54:	20016d40 	.word	0x20016d40

0800be58 <AT>:


uint8_t AT (void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
	char str_out[4];
	sprintf(str_out, "AT\r\n");
 800be5e:	1d3b      	adds	r3, r7, #4
 800be60:	491f      	ldr	r1, [pc, #124]	; (800bee0 <AT+0x88>)
 800be62:	4618      	mov	r0, r3
 800be64:	f003 f8b2 	bl	800efcc <siprintf>

	read_rx_state = ACTIVE;
 800be68:	4b1e      	ldr	r3, [pc, #120]	; (800bee4 <AT+0x8c>)
 800be6a:	2201      	movs	r2, #1
 800be6c:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800be6e:	4b1e      	ldr	r3, [pc, #120]	; (800bee8 <AT+0x90>)
 800be70:	2200      	movs	r2, #0
 800be72:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800be74:	f7ff ff80 	bl	800bd78 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800be78:	2201      	movs	r2, #1
 800be7a:	491c      	ldr	r1, [pc, #112]	; (800beec <AT+0x94>)
 800be7c:	481c      	ldr	r0, [pc, #112]	; (800bef0 <AT+0x98>)
 800be7e:	f7f9 f9ab 	bl	80051d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 4);
 800be82:	1d3b      	adds	r3, r7, #4
 800be84:	2204      	movs	r2, #4
 800be86:	4619      	mov	r1, r3
 800be88:	4819      	ldr	r0, [pc, #100]	; (800bef0 <AT+0x98>)
 800be8a:	f7f9 f927 	bl	80050dc <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800be8e:	4b19      	ldr	r3, [pc, #100]	; (800bef4 <AT+0x9c>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f04f 31ff 	mov.w	r1, #4294967295
 800be96:	4618      	mov	r0, r3
 800be98:	f7fa fc24 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800be9c:	4b16      	ldr	r3, [pc, #88]	; (800bef8 <AT+0xa0>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fa fac1 	bl	800642c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800beaa:	e010      	b.n	800bece <AT+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800beac:	4913      	ldr	r1, [pc, #76]	; (800befc <AT+0xa4>)
 800beae:	4814      	ldr	r0, [pc, #80]	; (800bf00 <AT+0xa8>)
 800beb0:	f003 f8ac 	bl	800f00c <strstr>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d009      	beq.n	800bece <AT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800beba:	4b0f      	ldr	r3, [pc, #60]	; (800bef8 <AT+0xa0>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fa faf8 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bec4:	4b07      	ldr	r3, [pc, #28]	; (800bee4 <AT+0x8c>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	e004      	b.n	800bed8 <AT+0x80>
	while(read_rx_state == ACTIVE)
 800bece:	4b05      	ldr	r3, [pc, #20]	; (800bee4 <AT+0x8c>)
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d0ea      	beq.n	800beac <AT+0x54>
		}
	}
	return AT_ERROR;
 800bed6:	2301      	movs	r3, #1
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	0800f8cc 	.word	0x0800f8cc
 800bee4:	20016c18 	.word	0x20016c18
 800bee8:	2000080c 	.word	0x2000080c
 800beec:	20016c40 	.word	0x20016c40
 800bef0:	20008070 	.word	0x20008070
 800bef4:	20016e4c 	.word	0x20016e4c
 800bef8:	20016b30 	.word	0x20016b30
 800befc:	0800f8c4 	.word	0x0800f8c4
 800bf00:	20016d40 	.word	0x20016d40

0800bf04 <AT_CSQ>:
	}
	return AT_ERROR;
}

uint8_t AT_CSQ (uint8_t* signal_level)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
	char str_out[8];
	sprintf(str_out, "AT+CSQ\r\n");
 800bf0c:	f107 0308 	add.w	r3, r7, #8
 800bf10:	4931      	ldr	r1, [pc, #196]	; (800bfd8 <AT_CSQ+0xd4>)
 800bf12:	4618      	mov	r0, r3
 800bf14:	f003 f85a 	bl	800efcc <siprintf>

	read_rx_state = ACTIVE;
 800bf18:	4b30      	ldr	r3, [pc, #192]	; (800bfdc <AT_CSQ+0xd8>)
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800bf1e:	4b30      	ldr	r3, [pc, #192]	; (800bfe0 <AT_CSQ+0xdc>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800bf24:	f7ff ff28 	bl	800bd78 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800bf28:	2201      	movs	r2, #1
 800bf2a:	492e      	ldr	r1, [pc, #184]	; (800bfe4 <AT_CSQ+0xe0>)
 800bf2c:	482e      	ldr	r0, [pc, #184]	; (800bfe8 <AT_CSQ+0xe4>)
 800bf2e:	f7f9 f953 	bl	80051d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 8);
 800bf32:	f107 0308 	add.w	r3, r7, #8
 800bf36:	2208      	movs	r2, #8
 800bf38:	4619      	mov	r1, r3
 800bf3a:	482b      	ldr	r0, [pc, #172]	; (800bfe8 <AT_CSQ+0xe4>)
 800bf3c:	f7f9 f8ce 	bl	80050dc <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_csq, 7);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800bf40:	4b2a      	ldr	r3, [pc, #168]	; (800bfec <AT_CSQ+0xe8>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f04f 31ff 	mov.w	r1, #4294967295
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fa fbcb 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800bf4e:	4b28      	ldr	r3, [pc, #160]	; (800bff0 <AT_CSQ+0xec>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fa fa68 	bl	800642c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800bf5c:	e033      	b.n	800bfc6 <AT_CSQ+0xc2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "+CSQ:") != NULL )
 800bf5e:	4925      	ldr	r1, [pc, #148]	; (800bff4 <AT_CSQ+0xf0>)
 800bf60:	4825      	ldr	r0, [pc, #148]	; (800bff8 <AT_CSQ+0xf4>)
 800bf62:	f003 f853 	bl	800f00c <strstr>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d01b      	beq.n	800bfa4 <AT_CSQ+0xa0>
		{
			if(modem_rx_buffer[9]==',') // в случае, если ATE0 (эхо выключено)
 800bf6c:	4b22      	ldr	r3, [pc, #136]	; (800bff8 <AT_CSQ+0xf4>)
 800bf6e:	7a5b      	ldrb	r3, [r3, #9]
 800bf70:	2b2c      	cmp	r3, #44	; 0x2c
 800bf72:	d106      	bne.n	800bf82 <AT_CSQ+0x7e>
			{
				*signal_level = modem_rx_buffer[8]-0x30;
 800bf74:	4b20      	ldr	r3, [pc, #128]	; (800bff8 <AT_CSQ+0xf4>)
 800bf76:	7a1b      	ldrb	r3, [r3, #8]
 800bf78:	3b30      	subs	r3, #48	; 0x30
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	701a      	strb	r2, [r3, #0]
 800bf80:	e010      	b.n	800bfa4 <AT_CSQ+0xa0>
			}
			else
			{
				*signal_level = (modem_rx_buffer[8]-0x30)*10 + (modem_rx_buffer[9]-0x30);
 800bf82:	4b1d      	ldr	r3, [pc, #116]	; (800bff8 <AT_CSQ+0xf4>)
 800bf84:	7a1b      	ldrb	r3, [r3, #8]
 800bf86:	3b30      	subs	r3, #48	; 0x30
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	0092      	lsls	r2, r2, #2
 800bf8e:	4413      	add	r3, r2
 800bf90:	005b      	lsls	r3, r3, #1
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	4b18      	ldr	r3, [pc, #96]	; (800bff8 <AT_CSQ+0xf4>)
 800bf96:	7a5b      	ldrb	r3, [r3, #9]
 800bf98:	4413      	add	r3, r2
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	3b30      	subs	r3, #48	; 0x30
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	701a      	strb	r2, [r3, #0]
			//{
				//*signal_level = (modem_rx_buffer[14]-0x30)*10 + (modem_rx_buffer[15]-0x30);
			//}

		}
		if(strstr(modem_rx_buffer, "OK") != NULL )
 800bfa4:	4915      	ldr	r1, [pc, #84]	; (800bffc <AT_CSQ+0xf8>)
 800bfa6:	4814      	ldr	r0, [pc, #80]	; (800bff8 <AT_CSQ+0xf4>)
 800bfa8:	f003 f830 	bl	800f00c <strstr>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d009      	beq.n	800bfc6 <AT_CSQ+0xc2>
		{
			osTimerStop(AT_TimerHandle);
 800bfb2:	4b0f      	ldr	r3, [pc, #60]	; (800bff0 <AT_CSQ+0xec>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fa fa7c 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bfbc:	4b07      	ldr	r3, [pc, #28]	; (800bfdc <AT_CSQ+0xd8>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	e004      	b.n	800bfd0 <AT_CSQ+0xcc>
	while(read_rx_state == ACTIVE)
 800bfc6:	4b05      	ldr	r3, [pc, #20]	; (800bfdc <AT_CSQ+0xd8>)
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d0c7      	beq.n	800bf5e <AT_CSQ+0x5a>
		}
	}
	return AT_ERROR;
 800bfce:	2301      	movs	r3, #1
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	0800f8e8 	.word	0x0800f8e8
 800bfdc:	20016c18 	.word	0x20016c18
 800bfe0:	2000080c 	.word	0x2000080c
 800bfe4:	20016c40 	.word	0x20016c40
 800bfe8:	20008070 	.word	0x20008070
 800bfec:	20016e4c 	.word	0x20016e4c
 800bff0:	20016b30 	.word	0x20016b30
 800bff4:	0800f8f4 	.word	0x0800f8f4
 800bff8:	20016d40 	.word	0x20016d40
 800bffc:	0800f8fc 	.word	0x0800f8fc

0800c000 <AT_CIPSTATUS>:

uint8_t AT_CIPSTATUS (void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
	uint8_t str_out[14];
	sprintf(str_out, "AT+CIPSTATUS\r\n");
 800c006:	463b      	mov	r3, r7
 800c008:	4986      	ldr	r1, [pc, #536]	; (800c224 <AT_CIPSTATUS+0x224>)
 800c00a:	4618      	mov	r0, r3
 800c00c:	f002 ffde 	bl	800efcc <siprintf>
	read_rx_state = ACTIVE;
 800c010:	4b85      	ldr	r3, [pc, #532]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c012:	2201      	movs	r2, #1
 800c014:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c016:	4b85      	ldr	r3, [pc, #532]	; (800c22c <AT_CIPSTATUS+0x22c>)
 800c018:	2200      	movs	r2, #0
 800c01a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c01c:	f7ff feac 	bl	800bd78 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c020:	2201      	movs	r2, #1
 800c022:	4983      	ldr	r1, [pc, #524]	; (800c230 <AT_CIPSTATUS+0x230>)
 800c024:	4883      	ldr	r0, [pc, #524]	; (800c234 <AT_CIPSTATUS+0x234>)
 800c026:	f7f9 f8d7 	bl	80051d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 14);
 800c02a:	463b      	mov	r3, r7
 800c02c:	220e      	movs	r2, #14
 800c02e:	4619      	mov	r1, r3
 800c030:	4880      	ldr	r0, [pc, #512]	; (800c234 <AT_CIPSTATUS+0x234>)
 800c032:	f7f9 f853 	bl	80050dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c036:	4b80      	ldr	r3, [pc, #512]	; (800c238 <AT_CIPSTATUS+0x238>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f04f 31ff 	mov.w	r1, #4294967295
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fa fb50 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c044:	4b7d      	ldr	r3, [pc, #500]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fa f9ed 	bl	800642c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c052:	e0dc      	b.n	800c20e <AT_CIPSTATUS+0x20e>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "IP INITIAL\r\n") != NULL )
 800c054:	497a      	ldr	r1, [pc, #488]	; (800c240 <AT_CIPSTATUS+0x240>)
 800c056:	487b      	ldr	r0, [pc, #492]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c058:	f002 ffd8 	bl	800f00c <strstr>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d009      	beq.n	800c076 <AT_CIPSTATUS+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800c062:	4b76      	ldr	r3, [pc, #472]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4618      	mov	r0, r3
 800c068:	f7fa fa24 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c06c:	4b6e      	ldr	r3, [pc, #440]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c06e:	2200      	movs	r2, #0
 800c070:	701a      	strb	r2, [r3, #0]
			return IP_INITIAL;
 800c072:	2302      	movs	r3, #2
 800c074:	e0d1      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP START\r\n") != NULL )
 800c076:	4974      	ldr	r1, [pc, #464]	; (800c248 <AT_CIPSTATUS+0x248>)
 800c078:	4872      	ldr	r0, [pc, #456]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c07a:	f002 ffc7 	bl	800f00c <strstr>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d009      	beq.n	800c098 <AT_CIPSTATUS+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800c084:	4b6d      	ldr	r3, [pc, #436]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fa fa13 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c08e:	4b66      	ldr	r3, [pc, #408]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c090:	2200      	movs	r2, #0
 800c092:	701a      	strb	r2, [r3, #0]
			return IP_START;
 800c094:	2303      	movs	r3, #3
 800c096:	e0c0      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP CONFIG\r\n") != NULL )
 800c098:	496c      	ldr	r1, [pc, #432]	; (800c24c <AT_CIPSTATUS+0x24c>)
 800c09a:	486a      	ldr	r0, [pc, #424]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c09c:	f002 ffb6 	bl	800f00c <strstr>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d009      	beq.n	800c0ba <AT_CIPSTATUS+0xba>
		{
			osTimerStop(AT_TimerHandle);
 800c0a6:	4b65      	ldr	r3, [pc, #404]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7fa fa02 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c0b0:	4b5d      	ldr	r3, [pc, #372]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	701a      	strb	r2, [r3, #0]
			return IP_CONFIG;
 800c0b6:	2304      	movs	r3, #4
 800c0b8:	e0af      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP IND\r\n") != NULL )
 800c0ba:	4965      	ldr	r1, [pc, #404]	; (800c250 <AT_CIPSTATUS+0x250>)
 800c0bc:	4861      	ldr	r0, [pc, #388]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c0be:	f002 ffa5 	bl	800f00c <strstr>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d009      	beq.n	800c0dc <AT_CIPSTATUS+0xdc>
		{
			osTimerStop(AT_TimerHandle);
 800c0c8:	4b5c      	ldr	r3, [pc, #368]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fa f9f1 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c0d2:	4b55      	ldr	r3, [pc, #340]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	701a      	strb	r2, [r3, #0]
			return IP_IND;
 800c0d8:	2305      	movs	r3, #5
 800c0da:	e09e      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP GPRSACT\r\n") != NULL )
 800c0dc:	495d      	ldr	r1, [pc, #372]	; (800c254 <AT_CIPSTATUS+0x254>)
 800c0de:	4859      	ldr	r0, [pc, #356]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c0e0:	f002 ff94 	bl	800f00c <strstr>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d009      	beq.n	800c0fe <AT_CIPSTATUS+0xfe>
		{
			osTimerStop(AT_TimerHandle);
 800c0ea:	4b54      	ldr	r3, [pc, #336]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fa f9e0 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c0f4:	4b4c      	ldr	r3, [pc, #304]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	701a      	strb	r2, [r3, #0]
			return IP_GPRSACT;
 800c0fa:	2306      	movs	r3, #6
 800c0fc:	e08d      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP STATUS\r\n") != NULL )
 800c0fe:	4956      	ldr	r1, [pc, #344]	; (800c258 <AT_CIPSTATUS+0x258>)
 800c100:	4850      	ldr	r0, [pc, #320]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c102:	f002 ff83 	bl	800f00c <strstr>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d009      	beq.n	800c120 <AT_CIPSTATUS+0x120>
		{
			osTimerStop(AT_TimerHandle);
 800c10c:	4b4b      	ldr	r3, [pc, #300]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4618      	mov	r0, r3
 800c112:	f7fa f9cf 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c116:	4b44      	ldr	r3, [pc, #272]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c118:	2200      	movs	r2, #0
 800c11a:	701a      	strb	r2, [r3, #0]
			return IP_STATUS;
 800c11c:	2307      	movs	r3, #7
 800c11e:	e07c      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "TCP CONNECTING\r\n") != NULL )
 800c120:	494e      	ldr	r1, [pc, #312]	; (800c25c <AT_CIPSTATUS+0x25c>)
 800c122:	4848      	ldr	r0, [pc, #288]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c124:	f002 ff72 	bl	800f00c <strstr>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d009      	beq.n	800c142 <AT_CIPSTATUS+0x142>
		{
			osTimerStop(AT_TimerHandle);
 800c12e:	4b43      	ldr	r3, [pc, #268]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4618      	mov	r0, r3
 800c134:	f7fa f9be 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c138:	4b3b      	ldr	r3, [pc, #236]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	701a      	strb	r2, [r3, #0]
			return TCP_CONNECTING;
 800c13e:	2308      	movs	r3, #8
 800c140:	e06b      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "UDP CONNECTING\r\n") != NULL )
 800c142:	4947      	ldr	r1, [pc, #284]	; (800c260 <AT_CIPSTATUS+0x260>)
 800c144:	483f      	ldr	r0, [pc, #252]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c146:	f002 ff61 	bl	800f00c <strstr>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d009      	beq.n	800c164 <AT_CIPSTATUS+0x164>
		{
			osTimerStop(AT_TimerHandle);
 800c150:	4b3a      	ldr	r3, [pc, #232]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4618      	mov	r0, r3
 800c156:	f7fa f9ad 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c15a:	4b33      	ldr	r3, [pc, #204]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	701a      	strb	r2, [r3, #0]
			return UDP_CONNECTING;
 800c160:	2309      	movs	r3, #9
 800c162:	e05a      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP CLOSE\r\n") != NULL )
 800c164:	493f      	ldr	r1, [pc, #252]	; (800c264 <AT_CIPSTATUS+0x264>)
 800c166:	4837      	ldr	r0, [pc, #220]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c168:	f002 ff50 	bl	800f00c <strstr>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d009      	beq.n	800c186 <AT_CIPSTATUS+0x186>
		{
			osTimerStop(AT_TimerHandle);
 800c172:	4b32      	ldr	r3, [pc, #200]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4618      	mov	r0, r3
 800c178:	f7fa f99c 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c17c:	4b2a      	ldr	r3, [pc, #168]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c17e:	2200      	movs	r2, #0
 800c180:	701a      	strb	r2, [r3, #0]
			return IP_CLOSE;
 800c182:	230a      	movs	r3, #10
 800c184:	e049      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL )
 800c186:	4938      	ldr	r1, [pc, #224]	; (800c268 <AT_CIPSTATUS+0x268>)
 800c188:	482e      	ldr	r0, [pc, #184]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c18a:	f002 ff3f 	bl	800f00c <strstr>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d009      	beq.n	800c1a8 <AT_CIPSTATUS+0x1a8>
		{
			osTimerStop(AT_TimerHandle);
 800c194:	4b29      	ldr	r3, [pc, #164]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fa f98b 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c19e:	4b22      	ldr	r3, [pc, #136]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	701a      	strb	r2, [r3, #0]
			return CONNECT_OK;
 800c1a4:	230b      	movs	r3, #11
 800c1a6:	e038      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "PDP DEACT\r\n") != NULL )
 800c1a8:	4930      	ldr	r1, [pc, #192]	; (800c26c <AT_CIPSTATUS+0x26c>)
 800c1aa:	4826      	ldr	r0, [pc, #152]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c1ac:	f002 ff2e 	bl	800f00c <strstr>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d009      	beq.n	800c1ca <AT_CIPSTATUS+0x1ca>
		{
			osTimerStop(AT_TimerHandle);
 800c1b6:	4b21      	ldr	r3, [pc, #132]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fa f97a 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c1c0:	4b19      	ldr	r3, [pc, #100]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	701a      	strb	r2, [r3, #0]
			return PDP_DEACT;
 800c1c6:	230c      	movs	r3, #12
 800c1c8:	e027      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c1ca:	4929      	ldr	r1, [pc, #164]	; (800c270 <AT_CIPSTATUS+0x270>)
 800c1cc:	481d      	ldr	r0, [pc, #116]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c1ce:	f002 ff1d 	bl	800f00c <strstr>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d009      	beq.n	800c1ec <AT_CIPSTATUS+0x1ec>
		{
			osTimerStop(AT_TimerHandle);
 800c1d8:	4b18      	ldr	r3, [pc, #96]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fa f969 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c1e2:	4b11      	ldr	r3, [pc, #68]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e016      	b.n	800c21a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "TCP CLOSED\r\n") != NULL )
 800c1ec:	4921      	ldr	r1, [pc, #132]	; (800c274 <AT_CIPSTATUS+0x274>)
 800c1ee:	4815      	ldr	r0, [pc, #84]	; (800c244 <AT_CIPSTATUS+0x244>)
 800c1f0:	f002 ff0c 	bl	800f00c <strstr>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d009      	beq.n	800c20e <AT_CIPSTATUS+0x20e>
		{
			osTimerStop(AT_TimerHandle);
 800c1fa:	4b10      	ldr	r3, [pc, #64]	; (800c23c <AT_CIPSTATUS+0x23c>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fa f958 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c204:	4b08      	ldr	r3, [pc, #32]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c206:	2200      	movs	r2, #0
 800c208:	701a      	strb	r2, [r3, #0]
			return TCP_CLOSED;
 800c20a:	230d      	movs	r3, #13
 800c20c:	e005      	b.n	800c21a <AT_CIPSTATUS+0x21a>
	while(read_rx_state == ACTIVE)
 800c20e:	4b06      	ldr	r3, [pc, #24]	; (800c228 <AT_CIPSTATUS+0x228>)
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	2b01      	cmp	r3, #1
 800c214:	f43f af1e 	beq.w	800c054 <AT_CIPSTATUS+0x54>
		}

	}
	return AT_ERROR;
 800c218:	2301      	movs	r3, #1
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	0800f900 	.word	0x0800f900
 800c228:	20016c18 	.word	0x20016c18
 800c22c:	2000080c 	.word	0x2000080c
 800c230:	20016c40 	.word	0x20016c40
 800c234:	20008070 	.word	0x20008070
 800c238:	20016e4c 	.word	0x20016e4c
 800c23c:	20016b30 	.word	0x20016b30
 800c240:	0800f910 	.word	0x0800f910
 800c244:	20016d40 	.word	0x20016d40
 800c248:	0800f920 	.word	0x0800f920
 800c24c:	0800f92c 	.word	0x0800f92c
 800c250:	0800f938 	.word	0x0800f938
 800c254:	0800f944 	.word	0x0800f944
 800c258:	0800f954 	.word	0x0800f954
 800c25c:	0800f960 	.word	0x0800f960
 800c260:	0800f974 	.word	0x0800f974
 800c264:	0800f988 	.word	0x0800f988
 800c268:	0800f994 	.word	0x0800f994
 800c26c:	0800f9a4 	.word	0x0800f9a4
 800c270:	0800f9b0 	.word	0x0800f9b0
 800c274:	0800f9b8 	.word	0x0800f9b8

0800c278 <AT_CSTT>:

uint8_t AT_CSTT  (char* apn, char* user, char* password)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b0a0      	sub	sp, #128	; 0x80
 800c27c:	af02      	add	r7, sp, #8
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
	uint8_t n;
	char str_out[101];
	sprintf(str_out, "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", apn, user, password);
 800c284:	f107 0010 	add.w	r0, r7, #16
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	9300      	str	r3, [sp, #0]
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	492d      	ldr	r1, [pc, #180]	; (800c348 <AT_CSTT+0xd0>)
 800c292:	f002 fe9b 	bl	800efcc <siprintf>
	n = strlen(str_out);
 800c296:	f107 0310 	add.w	r3, r7, #16
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7f3 ff98 	bl	80001d0 <strlen>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	read_rx_state = ACTIVE;
 800c2a6:	4b29      	ldr	r3, [pc, #164]	; (800c34c <AT_CSTT+0xd4>)
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c2ac:	4b28      	ldr	r3, [pc, #160]	; (800c350 <AT_CSTT+0xd8>)
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c2b2:	f7ff fd61 	bl	800bd78 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	4926      	ldr	r1, [pc, #152]	; (800c354 <AT_CSTT+0xdc>)
 800c2ba:	4827      	ldr	r0, [pc, #156]	; (800c358 <AT_CSTT+0xe0>)
 800c2bc:	f7f8 ff8c 	bl	80051d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n);
 800c2c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	f107 0310 	add.w	r3, r7, #16
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	4822      	ldr	r0, [pc, #136]	; (800c358 <AT_CSTT+0xe0>)
 800c2ce:	f7f8 ff05 	bl	80050dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c2d2:	4b22      	ldr	r3, [pc, #136]	; (800c35c <AT_CSTT+0xe4>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f04f 31ff 	mov.w	r1, #4294967295
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fa fa02 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c2e0:	4b1f      	ldr	r3, [pc, #124]	; (800c360 <AT_CSTT+0xe8>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fa f89f 	bl	800642c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c2ee:	e021      	b.n	800c334 <AT_CSTT+0xbc>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c2f0:	491c      	ldr	r1, [pc, #112]	; (800c364 <AT_CSTT+0xec>)
 800c2f2:	481d      	ldr	r0, [pc, #116]	; (800c368 <AT_CSTT+0xf0>)
 800c2f4:	f002 fe8a 	bl	800f00c <strstr>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d009      	beq.n	800c312 <AT_CSTT+0x9a>
		{
			osTimerStop(AT_TimerHandle);
 800c2fe:	4b18      	ldr	r3, [pc, #96]	; (800c360 <AT_CSTT+0xe8>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4618      	mov	r0, r3
 800c304:	f7fa f8d6 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c308:	4b10      	ldr	r3, [pc, #64]	; (800c34c <AT_CSTT+0xd4>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	e015      	b.n	800c33e <AT_CSTT+0xc6>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c312:	4916      	ldr	r1, [pc, #88]	; (800c36c <AT_CSTT+0xf4>)
 800c314:	4814      	ldr	r0, [pc, #80]	; (800c368 <AT_CSTT+0xf0>)
 800c316:	f002 fe79 	bl	800f00c <strstr>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d009      	beq.n	800c334 <AT_CSTT+0xbc>
		{
			osTimerStop(AT_TimerHandle);
 800c320:	4b0f      	ldr	r3, [pc, #60]	; (800c360 <AT_CSTT+0xe8>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4618      	mov	r0, r3
 800c326:	f7fa f8c5 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c32a:	4b08      	ldr	r3, [pc, #32]	; (800c34c <AT_CSTT+0xd4>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	e004      	b.n	800c33e <AT_CSTT+0xc6>
	while(read_rx_state == ACTIVE)
 800c334:	4b05      	ldr	r3, [pc, #20]	; (800c34c <AT_CSTT+0xd4>)
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d0d9      	beq.n	800c2f0 <AT_CSTT+0x78>
		}

	}
	return AT_ERROR;
 800c33c:	2301      	movs	r3, #1

}
 800c33e:	4618      	mov	r0, r3
 800c340:	3778      	adds	r7, #120	; 0x78
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	0800f9c8 	.word	0x0800f9c8
 800c34c:	20016c18 	.word	0x20016c18
 800c350:	2000080c 	.word	0x2000080c
 800c354:	20016c40 	.word	0x20016c40
 800c358:	20008070 	.word	0x20008070
 800c35c:	20016e4c 	.word	0x20016e4c
 800c360:	20016b30 	.word	0x20016b30
 800c364:	0800f8c4 	.word	0x0800f8c4
 800c368:	20016d40 	.word	0x20016d40
 800c36c:	0800f9b0 	.word	0x0800f9b0

0800c370 <AT_CIICR>:

uint8_t AT_CIICR  (void)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
	uint8_t str_out[10];
	sprintf(str_out, "AT+CIICR\r\n");
 800c376:	1d3b      	adds	r3, r7, #4
 800c378:	4928      	ldr	r1, [pc, #160]	; (800c41c <AT_CIICR+0xac>)
 800c37a:	4618      	mov	r0, r3
 800c37c:	f002 fe26 	bl	800efcc <siprintf>

	read_rx_state = ACTIVE;
 800c380:	4b27      	ldr	r3, [pc, #156]	; (800c420 <AT_CIICR+0xb0>)
 800c382:	2201      	movs	r2, #1
 800c384:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c386:	4b27      	ldr	r3, [pc, #156]	; (800c424 <AT_CIICR+0xb4>)
 800c388:	2200      	movs	r2, #0
 800c38a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c38c:	f7ff fcf4 	bl	800bd78 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c390:	2201      	movs	r2, #1
 800c392:	4925      	ldr	r1, [pc, #148]	; (800c428 <AT_CIICR+0xb8>)
 800c394:	4825      	ldr	r0, [pc, #148]	; (800c42c <AT_CIICR+0xbc>)
 800c396:	f7f8 ff1f 	bl	80051d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 10);
 800c39a:	1d3b      	adds	r3, r7, #4
 800c39c:	220a      	movs	r2, #10
 800c39e:	4619      	mov	r1, r3
 800c3a0:	4822      	ldr	r0, [pc, #136]	; (800c42c <AT_CIICR+0xbc>)
 800c3a2:	f7f8 fe9b 	bl	80050dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c3a6:	4b22      	ldr	r3, [pc, #136]	; (800c430 <AT_CIICR+0xc0>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f04f 31ff 	mov.w	r1, #4294967295
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fa f998 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 5000);
 800c3b4:	4b1f      	ldr	r3, [pc, #124]	; (800c434 <AT_CIICR+0xc4>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f241 3188 	movw	r1, #5000	; 0x1388
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fa f835 	bl	800642c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c3c2:	e021      	b.n	800c408 <AT_CIICR+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c3c4:	491c      	ldr	r1, [pc, #112]	; (800c438 <AT_CIICR+0xc8>)
 800c3c6:	481d      	ldr	r0, [pc, #116]	; (800c43c <AT_CIICR+0xcc>)
 800c3c8:	f002 fe20 	bl	800f00c <strstr>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d009      	beq.n	800c3e6 <AT_CIICR+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800c3d2:	4b18      	ldr	r3, [pc, #96]	; (800c434 <AT_CIICR+0xc4>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fa f86c 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c3dc:	4b10      	ldr	r3, [pc, #64]	; (800c420 <AT_CIICR+0xb0>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e015      	b.n	800c412 <AT_CIICR+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c3e6:	4916      	ldr	r1, [pc, #88]	; (800c440 <AT_CIICR+0xd0>)
 800c3e8:	4814      	ldr	r0, [pc, #80]	; (800c43c <AT_CIICR+0xcc>)
 800c3ea:	f002 fe0f 	bl	800f00c <strstr>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d009      	beq.n	800c408 <AT_CIICR+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800c3f4:	4b0f      	ldr	r3, [pc, #60]	; (800c434 <AT_CIICR+0xc4>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7fa f85b 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c3fe:	4b08      	ldr	r3, [pc, #32]	; (800c420 <AT_CIICR+0xb0>)
 800c400:	2200      	movs	r2, #0
 800c402:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	e004      	b.n	800c412 <AT_CIICR+0xa2>
	while(read_rx_state == ACTIVE)
 800c408:	4b05      	ldr	r3, [pc, #20]	; (800c420 <AT_CIICR+0xb0>)
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d0d9      	beq.n	800c3c4 <AT_CIICR+0x54>
		}

	}
	return AT_ERROR;
 800c410:	2301      	movs	r3, #1

}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	0800f9e4 	.word	0x0800f9e4
 800c420:	20016c18 	.word	0x20016c18
 800c424:	2000080c 	.word	0x2000080c
 800c428:	20016c40 	.word	0x20016c40
 800c42c:	20008070 	.word	0x20008070
 800c430:	20016e4c 	.word	0x20016e4c
 800c434:	20016b30 	.word	0x20016b30
 800c438:	0800f8c4 	.word	0x0800f8c4
 800c43c:	20016d40 	.word	0x20016d40
 800c440:	0800f9b0 	.word	0x0800f9b0

0800c444 <AT_CIFSR>:

uint8_t AT_CIFSR  (void)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
	uint8_t str_out[10];
	sprintf(str_out, "AT+CIFSR\r\n");
 800c44a:	1d3b      	adds	r3, r7, #4
 800c44c:	4928      	ldr	r1, [pc, #160]	; (800c4f0 <AT_CIFSR+0xac>)
 800c44e:	4618      	mov	r0, r3
 800c450:	f002 fdbc 	bl	800efcc <siprintf>

	read_rx_state = ACTIVE;
 800c454:	4b27      	ldr	r3, [pc, #156]	; (800c4f4 <AT_CIFSR+0xb0>)
 800c456:	2201      	movs	r2, #1
 800c458:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c45a:	4b27      	ldr	r3, [pc, #156]	; (800c4f8 <AT_CIFSR+0xb4>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c460:	f7ff fc8a 	bl	800bd78 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c464:	2201      	movs	r2, #1
 800c466:	4925      	ldr	r1, [pc, #148]	; (800c4fc <AT_CIFSR+0xb8>)
 800c468:	4825      	ldr	r0, [pc, #148]	; (800c500 <AT_CIFSR+0xbc>)
 800c46a:	f7f8 feb5 	bl	80051d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 10);
 800c46e:	1d3b      	adds	r3, r7, #4
 800c470:	220a      	movs	r2, #10
 800c472:	4619      	mov	r1, r3
 800c474:	4822      	ldr	r0, [pc, #136]	; (800c500 <AT_CIFSR+0xbc>)
 800c476:	f7f8 fe31 	bl	80050dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c47a:	4b22      	ldr	r3, [pc, #136]	; (800c504 <AT_CIFSR+0xc0>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f04f 31ff 	mov.w	r1, #4294967295
 800c482:	4618      	mov	r0, r3
 800c484:	f7fa f92e 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 1000);
 800c488:	4b1f      	ldr	r3, [pc, #124]	; (800c508 <AT_CIFSR+0xc4>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c490:	4618      	mov	r0, r3
 800c492:	f7f9 ffcb 	bl	800642c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c496:	e021      	b.n	800c4dc <AT_CIFSR+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c498:	491c      	ldr	r1, [pc, #112]	; (800c50c <AT_CIFSR+0xc8>)
 800c49a:	481d      	ldr	r0, [pc, #116]	; (800c510 <AT_CIFSR+0xcc>)
 800c49c:	f002 fdb6 	bl	800f00c <strstr>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d009      	beq.n	800c4ba <AT_CIFSR+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800c4a6:	4b18      	ldr	r3, [pc, #96]	; (800c508 <AT_CIFSR+0xc4>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fa f802 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c4b0:	4b10      	ldr	r3, [pc, #64]	; (800c4f4 <AT_CIFSR+0xb0>)
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	e015      	b.n	800c4e6 <AT_CIFSR+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c4ba:	4916      	ldr	r1, [pc, #88]	; (800c514 <AT_CIFSR+0xd0>)
 800c4bc:	4814      	ldr	r0, [pc, #80]	; (800c510 <AT_CIFSR+0xcc>)
 800c4be:	f002 fda5 	bl	800f00c <strstr>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d009      	beq.n	800c4dc <AT_CIFSR+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800c4c8:	4b0f      	ldr	r3, [pc, #60]	; (800c508 <AT_CIFSR+0xc4>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7f9 fff1 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c4d2:	4b08      	ldr	r3, [pc, #32]	; (800c4f4 <AT_CIFSR+0xb0>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e004      	b.n	800c4e6 <AT_CIFSR+0xa2>
	while(read_rx_state == ACTIVE)
 800c4dc:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <AT_CIFSR+0xb0>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d0d9      	beq.n	800c498 <AT_CIFSR+0x54>
		}

	}
	return AT_ERROR;
 800c4e4:	2301      	movs	r3, #1

}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	0800f9f0 	.word	0x0800f9f0
 800c4f4:	20016c18 	.word	0x20016c18
 800c4f8:	2000080c 	.word	0x2000080c
 800c4fc:	20016c40 	.word	0x20016c40
 800c500:	20008070 	.word	0x20008070
 800c504:	20016e4c 	.word	0x20016e4c
 800c508:	20016b30 	.word	0x20016b30
 800c50c:	0800f8c4 	.word	0x0800f8c4
 800c510:	20016d40 	.word	0x20016d40
 800c514:	0800f9b0 	.word	0x0800f9b0

0800c518 <AT_CIPSTART>:

uint8_t AT_CIPSTART (char* type , uint8_t ip1, uint8_t ip2, uint8_t ip3, uint8_t ip4, uint16_t port)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b098      	sub	sp, #96	; 0x60
 800c51c:	af04      	add	r7, sp, #16
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	4608      	mov	r0, r1
 800c522:	4611      	mov	r1, r2
 800c524:	461a      	mov	r2, r3
 800c526:	4603      	mov	r3, r0
 800c528:	70fb      	strb	r3, [r7, #3]
 800c52a:	460b      	mov	r3, r1
 800c52c:	70bb      	strb	r3, [r7, #2]
 800c52e:	4613      	mov	r3, r2
 800c530:	707b      	strb	r3, [r7, #1]
	char str5[3];
	char str6[5];
	char str7[42];
	uint8_t n;

	sprintf(str1, "%s", type);
 800c532:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	4951      	ldr	r1, [pc, #324]	; (800c680 <AT_CIPSTART+0x168>)
 800c53a:	4618      	mov	r0, r3
 800c53c:	f002 fd46 	bl	800efcc <siprintf>
	sprintf(str2, "%u", ip1);
 800c540:	78fa      	ldrb	r2, [r7, #3]
 800c542:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c546:	494f      	ldr	r1, [pc, #316]	; (800c684 <AT_CIPSTART+0x16c>)
 800c548:	4618      	mov	r0, r3
 800c54a:	f002 fd3f 	bl	800efcc <siprintf>
	sprintf(str3, "%u", ip2);
 800c54e:	78ba      	ldrb	r2, [r7, #2]
 800c550:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c554:	494b      	ldr	r1, [pc, #300]	; (800c684 <AT_CIPSTART+0x16c>)
 800c556:	4618      	mov	r0, r3
 800c558:	f002 fd38 	bl	800efcc <siprintf>
	sprintf(str4, "%u", ip3);
 800c55c:	787a      	ldrb	r2, [r7, #1]
 800c55e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c562:	4948      	ldr	r1, [pc, #288]	; (800c684 <AT_CIPSTART+0x16c>)
 800c564:	4618      	mov	r0, r3
 800c566:	f002 fd31 	bl	800efcc <siprintf>
	sprintf(str5, "%u", ip4);
 800c56a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800c56e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c572:	4944      	ldr	r1, [pc, #272]	; (800c684 <AT_CIPSTART+0x16c>)
 800c574:	4618      	mov	r0, r3
 800c576:	f002 fd29 	bl	800efcc <siprintf>
	sprintf(str6, "%u", port);
 800c57a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800c57e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c582:	4940      	ldr	r1, [pc, #256]	; (800c684 <AT_CIPSTART+0x16c>)
 800c584:	4618      	mov	r0, r3
 800c586:	f002 fd21 	bl	800efcc <siprintf>

	n = sprintf(str7, "AT+CIPSTART=\"%s\",\"%s.%s.%s.%s\",%s\r\n", str1, str2, str3, str4, str5, str6);
 800c58a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800c58e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800c592:	f107 0008 	add.w	r0, r7, #8
 800c596:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c59a:	9303      	str	r3, [sp, #12]
 800c59c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c5a0:	9302      	str	r3, [sp, #8]
 800c5a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c5a6:	9301      	str	r3, [sp, #4]
 800c5a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4935      	ldr	r1, [pc, #212]	; (800c688 <AT_CIPSTART+0x170>)
 800c5b2:	f002 fd0b 	bl	800efcc <siprintf>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

 	read_rx_state = ACTIVE;
 800c5bc:	4b33      	ldr	r3, [pc, #204]	; (800c68c <AT_CIPSTART+0x174>)
 800c5be:	2201      	movs	r2, #1
 800c5c0:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c5c2:	4b33      	ldr	r3, [pc, #204]	; (800c690 <AT_CIPSTART+0x178>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c5c8:	f7ff fbd6 	bl	800bd78 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	4931      	ldr	r1, [pc, #196]	; (800c694 <AT_CIPSTART+0x17c>)
 800c5d0:	4831      	ldr	r0, [pc, #196]	; (800c698 <AT_CIPSTART+0x180>)
 800c5d2:	f7f8 fe01 	bl	80051d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str7, n);
 800c5d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	f107 0308 	add.w	r3, r7, #8
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	482d      	ldr	r0, [pc, #180]	; (800c698 <AT_CIPSTART+0x180>)
 800c5e4:	f7f8 fd7a 	bl	80050dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c5e8:	4b2c      	ldr	r3, [pc, #176]	; (800c69c <AT_CIPSTART+0x184>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f04f 31ff 	mov.w	r1, #4294967295
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fa f877 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 10000);
 800c5f6:	4b2a      	ldr	r3, [pc, #168]	; (800c6a0 <AT_CIPSTART+0x188>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f242 7110 	movw	r1, #10000	; 0x2710
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7f9 ff14 	bl	800642c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c604:	e032      	b.n	800c66c <AT_CIPSTART+0x154>
	{
		//osThreadSuspend(M95TaskHandle);
		if( (strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL) )
 800c606:	4927      	ldr	r1, [pc, #156]	; (800c6a4 <AT_CIPSTART+0x18c>)
 800c608:	4827      	ldr	r0, [pc, #156]	; (800c6a8 <AT_CIPSTART+0x190>)
 800c60a:	f002 fcff 	bl	800f00c <strstr>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d009      	beq.n	800c628 <AT_CIPSTART+0x110>
		{
			osTimerStop(AT_TimerHandle);
 800c614:	4b22      	ldr	r3, [pc, #136]	; (800c6a0 <AT_CIPSTART+0x188>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4618      	mov	r0, r3
 800c61a:	f7f9 ff4b 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c61e:	4b1b      	ldr	r3, [pc, #108]	; (800c68c <AT_CIPSTART+0x174>)
 800c620:	2200      	movs	r2, #0
 800c622:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	e026      	b.n	800c676 <AT_CIPSTART+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "ALREADY CONNECT\r\n") != NULL) )
 800c628:	4920      	ldr	r1, [pc, #128]	; (800c6ac <AT_CIPSTART+0x194>)
 800c62a:	481f      	ldr	r0, [pc, #124]	; (800c6a8 <AT_CIPSTART+0x190>)
 800c62c:	f002 fcee 	bl	800f00c <strstr>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d009      	beq.n	800c64a <AT_CIPSTART+0x132>
		{
			osTimerStop(AT_TimerHandle);
 800c636:	4b1a      	ldr	r3, [pc, #104]	; (800c6a0 <AT_CIPSTART+0x188>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7f9 ff3a 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c640:	4b12      	ldr	r3, [pc, #72]	; (800c68c <AT_CIPSTART+0x174>)
 800c642:	2200      	movs	r2, #0
 800c644:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	e015      	b.n	800c676 <AT_CIPSTART+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "CONNECT FAIL\r\n") != NULL) )
 800c64a:	4919      	ldr	r1, [pc, #100]	; (800c6b0 <AT_CIPSTART+0x198>)
 800c64c:	4816      	ldr	r0, [pc, #88]	; (800c6a8 <AT_CIPSTART+0x190>)
 800c64e:	f002 fcdd 	bl	800f00c <strstr>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d009      	beq.n	800c66c <AT_CIPSTART+0x154>
		{
			osTimerStop(AT_TimerHandle);
 800c658:	4b11      	ldr	r3, [pc, #68]	; (800c6a0 <AT_CIPSTART+0x188>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7f9 ff29 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c662:	4b0a      	ldr	r3, [pc, #40]	; (800c68c <AT_CIPSTART+0x174>)
 800c664:	2200      	movs	r2, #0
 800c666:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c668:	2301      	movs	r3, #1
 800c66a:	e004      	b.n	800c676 <AT_CIPSTART+0x15e>
	while(read_rx_state == ACTIVE)
 800c66c:	4b07      	ldr	r3, [pc, #28]	; (800c68c <AT_CIPSTART+0x174>)
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d0c8      	beq.n	800c606 <AT_CIPSTART+0xee>
		}

	}
	return AT_ERROR;
 800c674:	2301      	movs	r3, #1

}
 800c676:	4618      	mov	r0, r3
 800c678:	3750      	adds	r7, #80	; 0x50
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	0800f9fc 	.word	0x0800f9fc
 800c684:	0800fa00 	.word	0x0800fa00
 800c688:	0800fa04 	.word	0x0800fa04
 800c68c:	20016c18 	.word	0x20016c18
 800c690:	2000080c 	.word	0x2000080c
 800c694:	20016c40 	.word	0x20016c40
 800c698:	20008070 	.word	0x20008070
 800c69c:	20016e4c 	.word	0x20016e4c
 800c6a0:	20016b30 	.word	0x20016b30
 800c6a4:	0800f994 	.word	0x0800f994
 800c6a8:	20016d40 	.word	0x20016d40
 800c6ac:	0800fa28 	.word	0x0800fa28
 800c6b0:	0800fa3c 	.word	0x0800fa3c

0800c6b4 <AT_CIPSEND>:

uint8_t AT_CIPSEND (uint8_t* buf, uint16_t length) // maximum length = 1460
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b088      	sub	sp, #32
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	807b      	strh	r3, [r7, #2]
	uint8_t n1;
	char str_out[17];

	n1 = sprintf(str_out, "AT+CIPSEND=%u\r\n", length);
 800c6c0:	887a      	ldrh	r2, [r7, #2]
 800c6c2:	f107 030c 	add.w	r3, r7, #12
 800c6c6:	493b      	ldr	r1, [pc, #236]	; (800c7b4 <AT_CIPSEND+0x100>)
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f002 fc7f 	bl	800efcc <siprintf>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	77fb      	strb	r3, [r7, #31]

 	read_rx_state = ACTIVE;
 800c6d2:	4b39      	ldr	r3, [pc, #228]	; (800c7b8 <AT_CIPSEND+0x104>)
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c6d8:	4b38      	ldr	r3, [pc, #224]	; (800c7bc <AT_CIPSEND+0x108>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c6de:	f7ff fb4b 	bl	800bd78 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	4936      	ldr	r1, [pc, #216]	; (800c7c0 <AT_CIPSEND+0x10c>)
 800c6e6:	4837      	ldr	r0, [pc, #220]	; (800c7c4 <AT_CIPSEND+0x110>)
 800c6e8:	f7f8 fd76 	bl	80051d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n1);
 800c6ec:	7ffb      	ldrb	r3, [r7, #31]
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	f107 030c 	add.w	r3, r7, #12
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	4833      	ldr	r0, [pc, #204]	; (800c7c4 <AT_CIPSEND+0x110>)
 800c6f8:	f7f8 fcf0 	bl	80050dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c6fc:	4b32      	ldr	r3, [pc, #200]	; (800c7c8 <AT_CIPSEND+0x114>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f04f 31ff 	mov.w	r1, #4294967295
 800c704:	4618      	mov	r0, r3
 800c706:	f7f9 ffed 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 2000);
 800c70a:	4b30      	ldr	r3, [pc, #192]	; (800c7cc <AT_CIPSEND+0x118>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c712:	4618      	mov	r0, r3
 800c714:	f7f9 fe8a 	bl	800642c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c718:	e043      	b.n	800c7a2 <AT_CIPSEND+0xee>
	{
		//osThreadSuspend(osThreadGetId());
		//osSemaphoreWait(ReceiveStateHandle, osWaitForever);
		if( strstr(modem_rx_buffer, "> ") != NULL )
 800c71a:	492d      	ldr	r1, [pc, #180]	; (800c7d0 <AT_CIPSEND+0x11c>)
 800c71c:	482d      	ldr	r0, [pc, #180]	; (800c7d4 <AT_CIPSEND+0x120>)
 800c71e:	f002 fc75 	bl	800f00c <strstr>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d03c      	beq.n	800c7a2 <AT_CIPSEND+0xee>
		{
			osTimerStop(AT_TimerHandle);
 800c728:	4b28      	ldr	r3, [pc, #160]	; (800c7cc <AT_CIPSEND+0x118>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7f9 fec1 	bl	80064b4 <osTimerStop>
			modem_rx_number = 0;
 800c732:	4b22      	ldr	r3, [pc, #136]	; (800c7bc <AT_CIPSEND+0x108>)
 800c734:	2200      	movs	r2, #0
 800c736:	701a      	strb	r2, [r3, #0]
			modem_rx_buffer_clear();
 800c738:	f7ff fb1e 	bl	800bd78 <modem_rx_buffer_clear>

			HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c73c:	2201      	movs	r2, #1
 800c73e:	4920      	ldr	r1, [pc, #128]	; (800c7c0 <AT_CIPSEND+0x10c>)
 800c740:	4820      	ldr	r0, [pc, #128]	; (800c7c4 <AT_CIPSEND+0x110>)
 800c742:	f7f8 fd49 	bl	80051d8 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart3, buf, length);
 800c746:	887b      	ldrh	r3, [r7, #2]
 800c748:	461a      	mov	r2, r3
 800c74a:	6879      	ldr	r1, [r7, #4]
 800c74c:	481d      	ldr	r0, [pc, #116]	; (800c7c4 <AT_CIPSEND+0x110>)
 800c74e:	f7f8 fcc5 	bl	80050dc <HAL_UART_Transmit_DMA>

			osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c752:	4b1d      	ldr	r3, [pc, #116]	; (800c7c8 <AT_CIPSEND+0x114>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f04f 31ff 	mov.w	r1, #4294967295
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7f9 ffc2 	bl	80066e4 <osSemaphoreWait>

			osTimerStart(AT_TimerHandle, 5000); // маленькое время!!!!!
 800c760:	4b1a      	ldr	r3, [pc, #104]	; (800c7cc <AT_CIPSEND+0x118>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f241 3188 	movw	r1, #5000	; 0x1388
 800c768:	4618      	mov	r0, r3
 800c76a:	f7f9 fe5f 	bl	800642c <osTimerStart>
			while(read_rx_state == ACTIVE)
 800c76e:	e012      	b.n	800c796 <AT_CIPSEND+0xe2>
			{
				//osThreadSuspend(osThreadGetId());
				//osSemaphoreWait(ReceiveStateHandle, osWaitForever);

				if( find_str(modem_rx_buffer, 255, send_ok, 9) == 1 )
 800c770:	2309      	movs	r3, #9
 800c772:	4a19      	ldr	r2, [pc, #100]	; (800c7d8 <AT_CIPSEND+0x124>)
 800c774:	21ff      	movs	r1, #255	; 0xff
 800c776:	4817      	ldr	r0, [pc, #92]	; (800c7d4 <AT_CIPSEND+0x120>)
 800c778:	f7ff fa8a 	bl	800bc90 <find_str>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d109      	bne.n	800c796 <AT_CIPSEND+0xe2>
				{
					osTimerStop(AT_TimerHandle);
 800c782:	4b12      	ldr	r3, [pc, #72]	; (800c7cc <AT_CIPSEND+0x118>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4618      	mov	r0, r3
 800c788:	f7f9 fe94 	bl	80064b4 <osTimerStop>
					read_rx_state = NOT_ACTIVE;
 800c78c:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <AT_CIPSEND+0x104>)
 800c78e:	2200      	movs	r2, #0
 800c790:	701a      	strb	r2, [r3, #0]
					return AT_OK;
 800c792:	2300      	movs	r3, #0
 800c794:	e00a      	b.n	800c7ac <AT_CIPSEND+0xf8>
			while(read_rx_state == ACTIVE)
 800c796:	4b08      	ldr	r3, [pc, #32]	; (800c7b8 <AT_CIPSEND+0x104>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d0e8      	beq.n	800c770 <AT_CIPSEND+0xbc>
					read_rx_state = NOT_ACTIVE;
					return AT_ERROR;
				}
				*/
			}
			return AT_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e004      	b.n	800c7ac <AT_CIPSEND+0xf8>
	while(read_rx_state == ACTIVE)
 800c7a2:	4b05      	ldr	r3, [pc, #20]	; (800c7b8 <AT_CIPSEND+0x104>)
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d0b7      	beq.n	800c71a <AT_CIPSEND+0x66>
			read_rx_state = NOT_ACTIVE;
			return AT_ERROR;
		}*/

	}
	return AT_ERROR;
 800c7aa:	2301      	movs	r3, #1

}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3720      	adds	r7, #32
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	0800fa4c 	.word	0x0800fa4c
 800c7b8:	20016c18 	.word	0x20016c18
 800c7bc:	2000080c 	.word	0x2000080c
 800c7c0:	20016c40 	.word	0x20016c40
 800c7c4:	20008070 	.word	0x20008070
 800c7c8:	20016e4c 	.word	0x20016e4c
 800c7cc:	20016b30 	.word	0x20016b30
 800c7d0:	0800fa5c 	.word	0x0800fa5c
 800c7d4:	20016d40 	.word	0x20016d40
 800c7d8:	20000018 	.word	0x20000018

0800c7dc <AT_CIPSHUT>:

uint8_t AT_CIPSHUT  (void)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
	uint8_t str_out[12];
	sprintf(str_out, "AT+CIPSHUT\r\n");
 800c7e2:	1d3b      	adds	r3, r7, #4
 800c7e4:	4928      	ldr	r1, [pc, #160]	; (800c888 <AT_CIPSHUT+0xac>)
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f002 fbf0 	bl	800efcc <siprintf>

	read_rx_state = ACTIVE;
 800c7ec:	4b27      	ldr	r3, [pc, #156]	; (800c88c <AT_CIPSHUT+0xb0>)
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c7f2:	4b27      	ldr	r3, [pc, #156]	; (800c890 <AT_CIPSHUT+0xb4>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c7f8:	f7ff fabe 	bl	800bd78 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	4925      	ldr	r1, [pc, #148]	; (800c894 <AT_CIPSHUT+0xb8>)
 800c800:	4825      	ldr	r0, [pc, #148]	; (800c898 <AT_CIPSHUT+0xbc>)
 800c802:	f7f8 fce9 	bl	80051d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 12);
 800c806:	1d3b      	adds	r3, r7, #4
 800c808:	220c      	movs	r2, #12
 800c80a:	4619      	mov	r1, r3
 800c80c:	4822      	ldr	r0, [pc, #136]	; (800c898 <AT_CIPSHUT+0xbc>)
 800c80e:	f7f8 fc65 	bl	80050dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c812:	4b22      	ldr	r3, [pc, #136]	; (800c89c <AT_CIPSHUT+0xc0>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f04f 31ff 	mov.w	r1, #4294967295
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7f9 ff62 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 10000);
 800c820:	4b1f      	ldr	r3, [pc, #124]	; (800c8a0 <AT_CIPSHUT+0xc4>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f242 7110 	movw	r1, #10000	; 0x2710
 800c828:	4618      	mov	r0, r3
 800c82a:	f7f9 fdff 	bl	800642c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c82e:	e021      	b.n	800c874 <AT_CIPSHUT+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c830:	491c      	ldr	r1, [pc, #112]	; (800c8a4 <AT_CIPSHUT+0xc8>)
 800c832:	481d      	ldr	r0, [pc, #116]	; (800c8a8 <AT_CIPSHUT+0xcc>)
 800c834:	f002 fbea 	bl	800f00c <strstr>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d009      	beq.n	800c852 <AT_CIPSHUT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800c83e:	4b18      	ldr	r3, [pc, #96]	; (800c8a0 <AT_CIPSHUT+0xc4>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4618      	mov	r0, r3
 800c844:	f7f9 fe36 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c848:	4b10      	ldr	r3, [pc, #64]	; (800c88c <AT_CIPSHUT+0xb0>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c84e:	2300      	movs	r3, #0
 800c850:	e015      	b.n	800c87e <AT_CIPSHUT+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c852:	4916      	ldr	r1, [pc, #88]	; (800c8ac <AT_CIPSHUT+0xd0>)
 800c854:	4814      	ldr	r0, [pc, #80]	; (800c8a8 <AT_CIPSHUT+0xcc>)
 800c856:	f002 fbd9 	bl	800f00c <strstr>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d009      	beq.n	800c874 <AT_CIPSHUT+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800c860:	4b0f      	ldr	r3, [pc, #60]	; (800c8a0 <AT_CIPSHUT+0xc4>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4618      	mov	r0, r3
 800c866:	f7f9 fe25 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c86a:	4b08      	ldr	r3, [pc, #32]	; (800c88c <AT_CIPSHUT+0xb0>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	e004      	b.n	800c87e <AT_CIPSHUT+0xa2>
	while(read_rx_state == ACTIVE)
 800c874:	4b05      	ldr	r3, [pc, #20]	; (800c88c <AT_CIPSHUT+0xb0>)
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d0d9      	beq.n	800c830 <AT_CIPSHUT+0x54>
		}

	}
	return AT_ERROR;
 800c87c:	2301      	movs	r3, #1

}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	0800fa60 	.word	0x0800fa60
 800c88c:	20016c18 	.word	0x20016c18
 800c890:	2000080c 	.word	0x2000080c
 800c894:	20016c40 	.word	0x20016c40
 800c898:	20008070 	.word	0x20008070
 800c89c:	20016e4c 	.word	0x20016e4c
 800c8a0:	20016b30 	.word	0x20016b30
 800c8a4:	0800f8c4 	.word	0x0800f8c4
 800c8a8:	20016d40 	.word	0x20016d40
 800c8ac:	0800f9b0 	.word	0x0800f9b0

0800c8b0 <AT_CCID>:

uint8_t AT_CCID ( uint8_t* id, uint64_t* temp_id) // Команда для для чтения CCID сим карты. id - указатель к массиву в которую будет сохраняться CCID симкарты (должен быть 8 байт), temp_id - указатель к временному массиву для расчета (должен быть 20 байт)
{
 800c8b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8b4:	b0ae      	sub	sp, #184	; 0xb8
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800c8bc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
	//uint64_t id1[20];
	char str_out[9];
	sprintf(str_out, "AT+CCID\r\n");
 800c8c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c8c4:	491d      	ldr	r1, [pc, #116]	; (800c93c <AT_CCID+0x8c>)
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f002 fb80 	bl	800efcc <siprintf>
	read_rx_state = ACTIVE;
 800c8cc:	4a1c      	ldr	r2, [pc, #112]	; (800c940 <AT_CCID+0x90>)
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	7013      	strb	r3, [r2, #0]
	modem_rx_number = 0;
 800c8d2:	4a1c      	ldr	r2, [pc, #112]	; (800c944 <AT_CCID+0x94>)
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	7013      	strb	r3, [r2, #0]
	modem_rx_buffer_clear();
 800c8d8:	f7ff fa4e 	bl	800bd78 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c8dc:	2201      	movs	r2, #1
 800c8de:	491a      	ldr	r1, [pc, #104]	; (800c948 <AT_CCID+0x98>)
 800c8e0:	481a      	ldr	r0, [pc, #104]	; (800c94c <AT_CCID+0x9c>)
 800c8e2:	f7f8 fc79 	bl	80051d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 800c8e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c8ea:	2209      	movs	r2, #9
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	4817      	ldr	r0, [pc, #92]	; (800c94c <AT_CCID+0x9c>)
 800c8f0:	f7f8 fbf4 	bl	80050dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c8f4:	4b16      	ldr	r3, [pc, #88]	; (800c950 <AT_CCID+0xa0>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f04f 31ff 	mov.w	r1, #4294967295
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7f9 fef1 	bl	80066e4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c902:	4b14      	ldr	r3, [pc, #80]	; (800c954 <AT_CCID+0xa4>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7f9 fd8e 	bl	800642c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c910:	e34b      	b.n	800cfaa <AT_CCID+0x6fa>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c912:	4911      	ldr	r1, [pc, #68]	; (800c958 <AT_CCID+0xa8>)
 800c914:	4811      	ldr	r0, [pc, #68]	; (800c95c <AT_CCID+0xac>)
 800c916:	f002 fb79 	bl	800f00c <strstr>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 8344 	beq.w	800cfaa <AT_CCID+0x6fa>
		{
			osTimerStop(AT_TimerHandle);
 800c922:	4b0c      	ldr	r3, [pc, #48]	; (800c954 <AT_CCID+0xa4>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4618      	mov	r0, r3
 800c928:	f7f9 fdc4 	bl	80064b4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c92c:	4a04      	ldr	r2, [pc, #16]	; (800c940 <AT_CCID+0x90>)
 800c92e:	2300      	movs	r3, #0
 800c930:	7013      	strb	r3, [r2, #0]

			// В случае, когда ATE0, эхо выключено
			for(uint8_t i=0; i<19; i++)
 800c932:	2300      	movs	r3, #0
 800c934:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800c938:	e029      	b.n	800c98e <AT_CCID+0xde>
 800c93a:	bf00      	nop
 800c93c:	0800fa70 	.word	0x0800fa70
 800c940:	20016c18 	.word	0x20016c18
 800c944:	2000080c 	.word	0x2000080c
 800c948:	20016c40 	.word	0x20016c40
 800c94c:	20008070 	.word	0x20008070
 800c950:	20016e4c 	.word	0x20016e4c
 800c954:	20016b30 	.word	0x20016b30
 800c958:	0800f8c4 	.word	0x0800f8c4
 800c95c:	20016d40 	.word	0x20016d40
			{
				*(temp_id+i) = (uint8_t)modem_rx_buffer[4+i] - 48;
 800c960:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c964:	1d1a      	adds	r2, r3, #4
 800c966:	4bde      	ldr	r3, [pc, #888]	; (800cce0 <AT_CCID+0x430>)
 800c968:	5c9b      	ldrb	r3, [r3, r2]
 800c96a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800c96e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c972:	00da      	lsls	r2, r3, #3
 800c974:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c978:	1899      	adds	r1, r3, r2
 800c97a:	4602      	mov	r2, r0
 800c97c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c980:	e9c1 2300 	strd	r2, r3, [r1]
			for(uint8_t i=0; i<19; i++)
 800c984:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c988:	3301      	adds	r3, #1
 800c98a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800c98e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c992:	2b12      	cmp	r3, #18
 800c994:	d9e4      	bls.n	800c960 <AT_CCID+0xb0>
				*(temp_id+i) = (uint8_t)modem_rx_buffer[10+i] - 48;
				//temp_id[i] = (uint8_t)modem_rx_buffer[10+i] - 48;
			}
			*/

			*(temp_id+19) = *temp_id*1000000000000000000 + *(temp_id+1)*100000000000000000 + *(temp_id+2)*10000000000000000 + *(temp_id+3)*1000000000000000 + *(temp_id+4)*100000000000000 + *(temp_id+5)*10000000000000 + *(temp_id+6)*1000000000000 + *(temp_id+7)*100000000000 + *(temp_id+8)*10000000000 + *(temp_id+9)*1000000000 + *(temp_id+10)*100000000 + *(temp_id+11)*10000000 + *(temp_id+12)*1000000 + *(temp_id+13)*100000 + *(temp_id+14)*10000 + *(temp_id+15)*1000 + *(temp_id+16)*100 + *(temp_id+17)*10 + *(temp_id+18);
 800c996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	49d1      	ldr	r1, [pc, #836]	; (800cce4 <AT_CCID+0x434>)
 800c9a0:	fb01 f003 	mul.w	r0, r1, r3
 800c9a4:	49d0      	ldr	r1, [pc, #832]	; (800cce8 <AT_CCID+0x438>)
 800c9a6:	fb01 f102 	mul.w	r1, r1, r2
 800c9aa:	4408      	add	r0, r1
 800c9ac:	49cd      	ldr	r1, [pc, #820]	; (800cce4 <AT_CCID+0x434>)
 800c9ae:	fba2 4501 	umull	r4, r5, r2, r1
 800c9b2:	1943      	adds	r3, r0, r5
 800c9b4:	461d      	mov	r5, r3
 800c9b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9ba:	3308      	adds	r3, #8
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	49ca      	ldr	r1, [pc, #808]	; (800ccec <AT_CCID+0x43c>)
 800c9c2:	fb01 f003 	mul.w	r0, r1, r3
 800c9c6:	49ca      	ldr	r1, [pc, #808]	; (800ccf0 <AT_CCID+0x440>)
 800c9c8:	fb01 f102 	mul.w	r1, r1, r2
 800c9cc:	4408      	add	r0, r1
 800c9ce:	49c7      	ldr	r1, [pc, #796]	; (800ccec <AT_CCID+0x43c>)
 800c9d0:	fba2 2301 	umull	r2, r3, r2, r1
 800c9d4:	18c1      	adds	r1, r0, r3
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	eb14 0a02 	adds.w	sl, r4, r2
 800c9dc:	eb45 0b03 	adc.w	fp, r5, r3
 800c9e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9e4:	3318      	adds	r3, #24
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	49c2      	ldr	r1, [pc, #776]	; (800ccf4 <AT_CCID+0x444>)
 800c9ec:	fb01 f003 	mul.w	r0, r1, r3
 800c9f0:	49c1      	ldr	r1, [pc, #772]	; (800ccf8 <AT_CCID+0x448>)
 800c9f2:	fb01 f102 	mul.w	r1, r1, r2
 800c9f6:	4408      	add	r0, r1
 800c9f8:	49be      	ldr	r1, [pc, #760]	; (800ccf4 <AT_CCID+0x444>)
 800c9fa:	fba2 4501 	umull	r4, r5, r2, r1
 800c9fe:	1943      	adds	r3, r0, r5
 800ca00:	461d      	mov	r5, r3
 800ca02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca06:	3310      	adds	r3, #16
 800ca08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0c:	49bb      	ldr	r1, [pc, #748]	; (800ccfc <AT_CCID+0x44c>)
 800ca0e:	fb01 f003 	mul.w	r0, r1, r3
 800ca12:	49bb      	ldr	r1, [pc, #748]	; (800cd00 <AT_CCID+0x450>)
 800ca14:	fb01 f102 	mul.w	r1, r1, r2
 800ca18:	4408      	add	r0, r1
 800ca1a:	49b8      	ldr	r1, [pc, #736]	; (800ccfc <AT_CCID+0x44c>)
 800ca1c:	fba2 2301 	umull	r2, r3, r2, r1
 800ca20:	18c1      	adds	r1, r0, r3
 800ca22:	460b      	mov	r3, r1
 800ca24:	eb14 0802 	adds.w	r8, r4, r2
 800ca28:	eb45 0903 	adc.w	r9, r5, r3
 800ca2c:	eb1a 0308 	adds.w	r3, sl, r8
 800ca30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca34:	eb4b 0309 	adc.w	r3, fp, r9
 800ca38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca40:	3328      	adds	r3, #40	; 0x28
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	49af      	ldr	r1, [pc, #700]	; (800cd04 <AT_CCID+0x454>)
 800ca48:	fb01 f003 	mul.w	r0, r1, r3
 800ca4c:	f640 1118 	movw	r1, #2328	; 0x918
 800ca50:	fb01 f102 	mul.w	r1, r1, r2
 800ca54:	4408      	add	r0, r1
 800ca56:	49ab      	ldr	r1, [pc, #684]	; (800cd04 <AT_CCID+0x454>)
 800ca58:	fba2 4501 	umull	r4, r5, r2, r1
 800ca5c:	1943      	adds	r3, r0, r5
 800ca5e:	461d      	mov	r5, r3
 800ca60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca64:	3320      	adds	r3, #32
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	49a7      	ldr	r1, [pc, #668]	; (800cd08 <AT_CCID+0x458>)
 800ca6c:	fb01 f003 	mul.w	r0, r1, r3
 800ca70:	f645 21f3 	movw	r1, #23283	; 0x5af3
 800ca74:	fb01 f102 	mul.w	r1, r1, r2
 800ca78:	4408      	add	r0, r1
 800ca7a:	49a3      	ldr	r1, [pc, #652]	; (800cd08 <AT_CCID+0x458>)
 800ca7c:	fba2 2301 	umull	r2, r3, r2, r1
 800ca80:	18c1      	adds	r1, r0, r3
 800ca82:	460b      	mov	r3, r1
 800ca84:	18a1      	adds	r1, r4, r2
 800ca86:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800ca8a:	eb45 0303 	adc.w	r3, r5, r3
 800ca8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca92:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800ca96:	4623      	mov	r3, r4
 800ca98:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	189b      	adds	r3, r3, r2
 800caa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800caa4:	460b      	mov	r3, r1
 800caa6:	462a      	mov	r2, r5
 800caa8:	eb42 0303 	adc.w	r3, r2, r3
 800caac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cab0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cab4:	3338      	adds	r3, #56	; 0x38
 800cab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caba:	4994      	ldr	r1, [pc, #592]	; (800cd0c <AT_CCID+0x45c>)
 800cabc:	fb01 f003 	mul.w	r0, r1, r3
 800cac0:	2117      	movs	r1, #23
 800cac2:	fb01 f102 	mul.w	r1, r1, r2
 800cac6:	4408      	add	r0, r1
 800cac8:	4990      	ldr	r1, [pc, #576]	; (800cd0c <AT_CCID+0x45c>)
 800caca:	fba2 4501 	umull	r4, r5, r2, r1
 800cace:	1943      	adds	r3, r0, r5
 800cad0:	461d      	mov	r5, r3
 800cad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cad6:	3330      	adds	r3, #48	; 0x30
 800cad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cadc:	498c      	ldr	r1, [pc, #560]	; (800cd10 <AT_CCID+0x460>)
 800cade:	fb01 f003 	mul.w	r0, r1, r3
 800cae2:	21e8      	movs	r1, #232	; 0xe8
 800cae4:	fb01 f102 	mul.w	r1, r1, r2
 800cae8:	4408      	add	r0, r1
 800caea:	4989      	ldr	r1, [pc, #548]	; (800cd10 <AT_CCID+0x460>)
 800caec:	fba2 2301 	umull	r2, r3, r2, r1
 800caf0:	18c1      	adds	r1, r0, r3
 800caf2:	460b      	mov	r3, r1
 800caf4:	18a1      	adds	r1, r4, r2
 800caf6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800cafa:	eb45 0303 	adc.w	r3, r5, r3
 800cafe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb02:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800cb06:	4623      	mov	r3, r4
 800cb08:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	189b      	adds	r3, r3, r2
 800cb10:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb12:	460b      	mov	r3, r1
 800cb14:	462a      	mov	r2, r5
 800cb16:	eb42 0303 	adc.w	r3, r2, r3
 800cb1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cb1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb20:	3348      	adds	r3, #72	; 0x48
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	497b      	ldr	r1, [pc, #492]	; (800cd14 <AT_CCID+0x464>)
 800cb28:	fb01 f003 	mul.w	r0, r1, r3
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	fb01 f102 	mul.w	r1, r1, r2
 800cb32:	4408      	add	r0, r1
 800cb34:	4977      	ldr	r1, [pc, #476]	; (800cd14 <AT_CCID+0x464>)
 800cb36:	fba2 4501 	umull	r4, r5, r2, r1
 800cb3a:	1943      	adds	r3, r0, r5
 800cb3c:	461d      	mov	r5, r3
 800cb3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb42:	3340      	adds	r3, #64	; 0x40
 800cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb48:	4973      	ldr	r1, [pc, #460]	; (800cd18 <AT_CCID+0x468>)
 800cb4a:	fb01 f003 	mul.w	r0, r1, r3
 800cb4e:	2102      	movs	r1, #2
 800cb50:	fb01 f102 	mul.w	r1, r1, r2
 800cb54:	4408      	add	r0, r1
 800cb56:	4970      	ldr	r1, [pc, #448]	; (800cd18 <AT_CCID+0x468>)
 800cb58:	fba2 2301 	umull	r2, r3, r2, r1
 800cb5c:	18c1      	adds	r1, r0, r3
 800cb5e:	460b      	mov	r3, r1
 800cb60:	18a1      	adds	r1, r4, r2
 800cb62:	6739      	str	r1, [r7, #112]	; 0x70
 800cb64:	eb45 0303 	adc.w	r3, r5, r3
 800cb68:	677b      	str	r3, [r7, #116]	; 0x74
 800cb6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800cb6e:	4623      	mov	r3, r4
 800cb70:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800cb74:	4602      	mov	r2, r0
 800cb76:	189b      	adds	r3, r3, r2
 800cb78:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	462a      	mov	r2, r5
 800cb7e:	eb42 0303 	adc.w	r3, r2, r3
 800cb82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb88:	3358      	adds	r3, #88	; 0x58
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	4963      	ldr	r1, [pc, #396]	; (800cd1c <AT_CCID+0x46c>)
 800cb90:	fb01 f003 	mul.w	r0, r1, r3
 800cb94:	2100      	movs	r1, #0
 800cb96:	fb01 f102 	mul.w	r1, r1, r2
 800cb9a:	4408      	add	r0, r1
 800cb9c:	495f      	ldr	r1, [pc, #380]	; (800cd1c <AT_CCID+0x46c>)
 800cb9e:	fba2 4501 	umull	r4, r5, r2, r1
 800cba2:	1943      	adds	r3, r0, r5
 800cba4:	461d      	mov	r5, r3
 800cba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cbaa:	3350      	adds	r3, #80	; 0x50
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	495b      	ldr	r1, [pc, #364]	; (800cd20 <AT_CCID+0x470>)
 800cbb2:	fb01 f003 	mul.w	r0, r1, r3
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	fb01 f102 	mul.w	r1, r1, r2
 800cbbc:	4408      	add	r0, r1
 800cbbe:	4958      	ldr	r1, [pc, #352]	; (800cd20 <AT_CCID+0x470>)
 800cbc0:	fba2 2301 	umull	r2, r3, r2, r1
 800cbc4:	18c1      	adds	r1, r0, r3
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	18a1      	adds	r1, r4, r2
 800cbca:	6639      	str	r1, [r7, #96]	; 0x60
 800cbcc:	eb45 0303 	adc.w	r3, r5, r3
 800cbd0:	667b      	str	r3, [r7, #100]	; 0x64
 800cbd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800cbd6:	4623      	mov	r3, r4
 800cbd8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800cbdc:	4602      	mov	r2, r0
 800cbde:	189b      	adds	r3, r3, r2
 800cbe0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	462a      	mov	r2, r5
 800cbe6:	eb42 0303 	adc.w	r3, r2, r3
 800cbea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cbf0:	3368      	adds	r3, #104	; 0x68
 800cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf6:	494b      	ldr	r1, [pc, #300]	; (800cd24 <AT_CCID+0x474>)
 800cbf8:	fb01 f003 	mul.w	r0, r1, r3
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	fb01 f102 	mul.w	r1, r1, r2
 800cc02:	4408      	add	r0, r1
 800cc04:	4947      	ldr	r1, [pc, #284]	; (800cd24 <AT_CCID+0x474>)
 800cc06:	fba2 8901 	umull	r8, r9, r2, r1
 800cc0a:	eb00 0309 	add.w	r3, r0, r9
 800cc0e:	4699      	mov	r9, r3
 800cc10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc14:	3360      	adds	r3, #96	; 0x60
 800cc16:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cc1a:	4622      	mov	r2, r4
 800cc1c:	462b      	mov	r3, r5
 800cc1e:	f04f 0000 	mov.w	r0, #0
 800cc22:	f04f 0100 	mov.w	r1, #0
 800cc26:	0159      	lsls	r1, r3, #5
 800cc28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cc2c:	0150      	lsls	r0, r2, #5
 800cc2e:	4602      	mov	r2, r0
 800cc30:	460b      	mov	r3, r1
 800cc32:	1b12      	subs	r2, r2, r4
 800cc34:	eb63 0305 	sbc.w	r3, r3, r5
 800cc38:	f04f 0000 	mov.w	r0, #0
 800cc3c:	f04f 0100 	mov.w	r1, #0
 800cc40:	0259      	lsls	r1, r3, #9
 800cc42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800cc46:	0250      	lsls	r0, r2, #9
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	1912      	adds	r2, r2, r4
 800cc4e:	eb45 0303 	adc.w	r3, r5, r3
 800cc52:	f04f 0000 	mov.w	r0, #0
 800cc56:	f04f 0100 	mov.w	r1, #0
 800cc5a:	0199      	lsls	r1, r3, #6
 800cc5c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800cc60:	0190      	lsls	r0, r2, #6
 800cc62:	1a80      	subs	r0, r0, r2
 800cc64:	eb61 0103 	sbc.w	r1, r1, r3
 800cc68:	1903      	adds	r3, r0, r4
 800cc6a:	653b      	str	r3, [r7, #80]	; 0x50
 800cc6c:	eb41 0305 	adc.w	r3, r1, r5
 800cc70:	657b      	str	r3, [r7, #84]	; 0x54
 800cc72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800cc76:	460b      	mov	r3, r1
 800cc78:	eb18 0303 	adds.w	r3, r8, r3
 800cc7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc7e:	4613      	mov	r3, r2
 800cc80:	eb49 0303 	adc.w	r3, r9, r3
 800cc84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc86:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800cc8a:	4623      	mov	r3, r4
 800cc8c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cc90:	4602      	mov	r2, r0
 800cc92:	189b      	adds	r3, r3, r2
 800cc94:	643b      	str	r3, [r7, #64]	; 0x40
 800cc96:	460b      	mov	r3, r1
 800cc98:	462a      	mov	r2, r5
 800cc9a:	eb42 0303 	adc.w	r3, r2, r3
 800cc9e:	647b      	str	r3, [r7, #68]	; 0x44
 800cca0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cca4:	3378      	adds	r3, #120	; 0x78
 800cca6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ccaa:	4622      	mov	r2, r4
 800ccac:	462b      	mov	r3, r5
 800ccae:	f04f 0000 	mov.w	r0, #0
 800ccb2:	f04f 0100 	mov.w	r1, #0
 800ccb6:	0159      	lsls	r1, r3, #5
 800ccb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ccbc:	0150      	lsls	r0, r2, #5
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	1b12      	subs	r2, r2, r4
 800ccc4:	eb63 0305 	sbc.w	r3, r3, r5
 800ccc8:	f04f 0000 	mov.w	r0, #0
 800cccc:	f04f 0100 	mov.w	r1, #0
 800ccd0:	0099      	lsls	r1, r3, #2
 800ccd2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800ccd6:	0090      	lsls	r0, r2, #2
 800ccd8:	4602      	mov	r2, r0
 800ccda:	460b      	mov	r3, r1
 800ccdc:	1912      	adds	r2, r2, r4
 800ccde:	e023      	b.n	800cd28 <AT_CCID+0x478>
 800cce0:	20016d40 	.word	0x20016d40
 800cce4:	a7640000 	.word	0xa7640000
 800cce8:	0de0b6b3 	.word	0x0de0b6b3
 800ccec:	5d8a0000 	.word	0x5d8a0000
 800ccf0:	01634578 	.word	0x01634578
 800ccf4:	a4c68000 	.word	0xa4c68000
 800ccf8:	00038d7e 	.word	0x00038d7e
 800ccfc:	6fc10000 	.word	0x6fc10000
 800cd00:	002386f2 	.word	0x002386f2
 800cd04:	4e72a000 	.word	0x4e72a000
 800cd08:	107a4000 	.word	0x107a4000
 800cd0c:	4876e800 	.word	0x4876e800
 800cd10:	d4a51000 	.word	0xd4a51000
 800cd14:	3b9aca00 	.word	0x3b9aca00
 800cd18:	540be400 	.word	0x540be400
 800cd1c:	00989680 	.word	0x00989680
 800cd20:	05f5e100 	.word	0x05f5e100
 800cd24:	000186a0 	.word	0x000186a0
 800cd28:	eb45 0303 	adc.w	r3, r5, r3
 800cd2c:	f04f 0000 	mov.w	r0, #0
 800cd30:	f04f 0100 	mov.w	r1, #0
 800cd34:	00d9      	lsls	r1, r3, #3
 800cd36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd3a:	00d0      	lsls	r0, r2, #3
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	460b      	mov	r3, r1
 800cd40:	4690      	mov	r8, r2
 800cd42:	4699      	mov	r9, r3
 800cd44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cd48:	3370      	adds	r3, #112	; 0x70
 800cd4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cd4e:	4622      	mov	r2, r4
 800cd50:	462b      	mov	r3, r5
 800cd52:	f04f 0000 	mov.w	r0, #0
 800cd56:	f04f 0100 	mov.w	r1, #0
 800cd5a:	0099      	lsls	r1, r3, #2
 800cd5c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cd60:	0090      	lsls	r0, r2, #2
 800cd62:	4602      	mov	r2, r0
 800cd64:	460b      	mov	r3, r1
 800cd66:	1912      	adds	r2, r2, r4
 800cd68:	eb45 0303 	adc.w	r3, r5, r3
 800cd6c:	f04f 0000 	mov.w	r0, #0
 800cd70:	f04f 0100 	mov.w	r1, #0
 800cd74:	00d9      	lsls	r1, r3, #3
 800cd76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd7a:	00d0      	lsls	r0, r2, #3
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	460b      	mov	r3, r1
 800cd80:	1b12      	subs	r2, r2, r4
 800cd82:	eb63 0305 	sbc.w	r3, r3, r5
 800cd86:	f04f 0000 	mov.w	r0, #0
 800cd8a:	f04f 0100 	mov.w	r1, #0
 800cd8e:	0119      	lsls	r1, r3, #4
 800cd90:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800cd94:	0110      	lsls	r0, r2, #4
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	1912      	adds	r2, r2, r4
 800cd9c:	eb45 0303 	adc.w	r3, r5, r3
 800cda0:	f04f 0000 	mov.w	r0, #0
 800cda4:	f04f 0100 	mov.w	r1, #0
 800cda8:	0119      	lsls	r1, r3, #4
 800cdaa:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800cdae:	0110      	lsls	r0, r2, #4
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	eb18 0102 	adds.w	r1, r8, r2
 800cdb8:	63b9      	str	r1, [r7, #56]	; 0x38
 800cdba:	eb49 0303 	adc.w	r3, r9, r3
 800cdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdc0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800cdc4:	4623      	mov	r3, r4
 800cdc6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cdca:	4602      	mov	r2, r0
 800cdcc:	189b      	adds	r3, r3, r2
 800cdce:	633b      	str	r3, [r7, #48]	; 0x30
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	462a      	mov	r2, r5
 800cdd4:	eb42 0303 	adc.w	r3, r2, r3
 800cdd8:	637b      	str	r3, [r7, #52]	; 0x34
 800cdda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cdde:	3388      	adds	r3, #136	; 0x88
 800cde0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cde4:	4622      	mov	r2, r4
 800cde6:	462b      	mov	r3, r5
 800cde8:	f04f 0000 	mov.w	r0, #0
 800cdec:	f04f 0100 	mov.w	r1, #0
 800cdf0:	0099      	lsls	r1, r3, #2
 800cdf2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cdf6:	0090      	lsls	r0, r2, #2
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	1912      	adds	r2, r2, r4
 800cdfe:	eb45 0303 	adc.w	r3, r5, r3
 800ce02:	1891      	adds	r1, r2, r2
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	415b      	adcs	r3, r3
 800ce08:	60fb      	str	r3, [r7, #12]
 800ce0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce0e:	4690      	mov	r8, r2
 800ce10:	4699      	mov	r9, r3
 800ce12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce16:	3380      	adds	r3, #128	; 0x80
 800ce18:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ce1c:	4622      	mov	r2, r4
 800ce1e:	462b      	mov	r3, r5
 800ce20:	1891      	adds	r1, r2, r2
 800ce22:	6039      	str	r1, [r7, #0]
 800ce24:	415b      	adcs	r3, r3
 800ce26:	607b      	str	r3, [r7, #4]
 800ce28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce2c:	1912      	adds	r2, r2, r4
 800ce2e:	eb45 0303 	adc.w	r3, r5, r3
 800ce32:	f04f 0000 	mov.w	r0, #0
 800ce36:	f04f 0100 	mov.w	r1, #0
 800ce3a:	0159      	lsls	r1, r3, #5
 800ce3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ce40:	0150      	lsls	r0, r2, #5
 800ce42:	1812      	adds	r2, r2, r0
 800ce44:	eb41 0303 	adc.w	r3, r1, r3
 800ce48:	1911      	adds	r1, r2, r4
 800ce4a:	62b9      	str	r1, [r7, #40]	; 0x28
 800ce4c:	416b      	adcs	r3, r5
 800ce4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ce54:	460b      	mov	r3, r1
 800ce56:	eb18 0303 	adds.w	r3, r8, r3
 800ce5a:	623b      	str	r3, [r7, #32]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	eb49 0303 	adc.w	r3, r9, r3
 800ce62:	627b      	str	r3, [r7, #36]	; 0x24
 800ce64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ce68:	4623      	mov	r3, r4
 800ce6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ce6e:	4602      	mov	r2, r0
 800ce70:	189b      	adds	r3, r3, r2
 800ce72:	61bb      	str	r3, [r7, #24]
 800ce74:	460b      	mov	r3, r1
 800ce76:	462a      	mov	r2, r5
 800ce78:	eb42 0303 	adc.w	r3, r2, r3
 800ce7c:	61fb      	str	r3, [r7, #28]
 800ce7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce82:	3390      	adds	r3, #144	; 0x90
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ce8c:	3198      	adds	r1, #152	; 0x98
 800ce8e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800ce92:	4620      	mov	r0, r4
 800ce94:	1880      	adds	r0, r0, r2
 800ce96:	6138      	str	r0, [r7, #16]
 800ce98:	4628      	mov	r0, r5
 800ce9a:	eb43 0000 	adc.w	r0, r3, r0
 800ce9e:	6178      	str	r0, [r7, #20]
 800cea0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cea4:	e9c1 3400 	strd	r3, r4, [r1]
			//temp_id[19] = temp_id[0]*1000000000000000000 + temp_id[1]*100000000000000000 + temp_id[2]*10000000000000000 + temp_id[3]*1000000000000000 + temp_id[4]*100000000000000 + temp_id[5]*10000000000000 + temp_id[6]*1000000000000 + temp_id[7]*100000000000 + temp_id[8]*10000000000 + temp_id[9]*1000000000 + temp_id[10]*100000000 + temp_id[11]*10000000 + temp_id[12]*1000000 + temp_id[13]*100000 + temp_id[14]*10000 + temp_id[15]*1000 + temp_id[16]*100 + temp_id[17]*10 + temp_id[18];

			*id = (uint8_t)(*(temp_id+19)>>56);
 800cea8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ceac:	3398      	adds	r3, #152	; 0x98
 800ceae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ceb2:	f04f 0200 	mov.w	r2, #0
 800ceb6:	f04f 0300 	mov.w	r3, #0
 800ceba:	0e0a      	lsrs	r2, r1, #24
 800cebc:	2300      	movs	r3, #0
 800cebe:	b2d2      	uxtb	r2, r2
 800cec0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cec4:	701a      	strb	r2, [r3, #0]
			*(id+1) = (uint8_t)(*(temp_id+19)>>48);
 800cec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ceca:	3398      	adds	r3, #152	; 0x98
 800cecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ced0:	f04f 0200 	mov.w	r2, #0
 800ced4:	f04f 0300 	mov.w	r3, #0
 800ced8:	0c0a      	lsrs	r2, r1, #16
 800ceda:	2300      	movs	r3, #0
 800cedc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cee0:	3101      	adds	r1, #1
 800cee2:	b2d3      	uxtb	r3, r2
 800cee4:	700b      	strb	r3, [r1, #0]
			*(id+2) = (uint8_t)(*(temp_id+19)>>40);
 800cee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ceea:	3398      	adds	r3, #152	; 0x98
 800ceec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cef0:	f04f 0200 	mov.w	r2, #0
 800cef4:	f04f 0300 	mov.w	r3, #0
 800cef8:	0a0a      	lsrs	r2, r1, #8
 800cefa:	2300      	movs	r3, #0
 800cefc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf00:	3102      	adds	r1, #2
 800cf02:	b2d3      	uxtb	r3, r2
 800cf04:	700b      	strb	r3, [r1, #0]
			*(id+3) = (uint8_t)(*(temp_id+19)>>32);
 800cf06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf0a:	3398      	adds	r3, #152	; 0x98
 800cf0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf10:	f04f 0200 	mov.w	r2, #0
 800cf14:	f04f 0300 	mov.w	r3, #0
 800cf18:	000a      	movs	r2, r1
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf20:	3103      	adds	r1, #3
 800cf22:	b2d3      	uxtb	r3, r2
 800cf24:	700b      	strb	r3, [r1, #0]
			*(id+4) = (uint8_t)(*(temp_id+19)>>24);
 800cf26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf2a:	3398      	adds	r3, #152	; 0x98
 800cf2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf30:	f04f 0200 	mov.w	r2, #0
 800cf34:	f04f 0300 	mov.w	r3, #0
 800cf38:	0e02      	lsrs	r2, r0, #24
 800cf3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cf3e:	0e0b      	lsrs	r3, r1, #24
 800cf40:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf44:	3104      	adds	r1, #4
 800cf46:	b2d3      	uxtb	r3, r2
 800cf48:	700b      	strb	r3, [r1, #0]
			*(id+5) = (uint8_t)(*(temp_id+19)>>16);
 800cf4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf4e:	3398      	adds	r3, #152	; 0x98
 800cf50:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf54:	f04f 0200 	mov.w	r2, #0
 800cf58:	f04f 0300 	mov.w	r3, #0
 800cf5c:	0c02      	lsrs	r2, r0, #16
 800cf5e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cf62:	0c0b      	lsrs	r3, r1, #16
 800cf64:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf68:	3105      	adds	r1, #5
 800cf6a:	b2d3      	uxtb	r3, r2
 800cf6c:	700b      	strb	r3, [r1, #0]
			*(id+6) = (uint8_t)(*(temp_id+19)>>8);
 800cf6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf72:	3398      	adds	r3, #152	; 0x98
 800cf74:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf78:	f04f 0200 	mov.w	r2, #0
 800cf7c:	f04f 0300 	mov.w	r3, #0
 800cf80:	0a02      	lsrs	r2, r0, #8
 800cf82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cf86:	0a0b      	lsrs	r3, r1, #8
 800cf88:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf8c:	3106      	adds	r1, #6
 800cf8e:	b2d3      	uxtb	r3, r2
 800cf90:	700b      	strb	r3, [r1, #0]
			*(id+7) = (uint8_t)*(temp_id+19);
 800cf92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf96:	3398      	adds	r3, #152	; 0x98
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cfa0:	3107      	adds	r1, #7
 800cfa2:	b2d3      	uxtb	r3, r2
 800cfa4:	700b      	strb	r3, [r1, #0]

			return AT_OK;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	e005      	b.n	800cfb6 <AT_CCID+0x706>
	while(read_rx_state == ACTIVE)
 800cfaa:	4b05      	ldr	r3, [pc, #20]	; (800cfc0 <AT_CCID+0x710>)
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	f43f acaf 	beq.w	800c912 <AT_CCID+0x62>
		}

	}
	return AT_ERROR;
 800cfb4:	2301      	movs	r3, #1
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	37b8      	adds	r7, #184	; 0xb8
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cfc0:	20016c18 	.word	0x20016c18

0800cfc4 <read_status_registers>:
bootloader_register_struct bootloader_registers;
change_boot_register_struct change_boot_registers;

//----функция чтения из памяти регистров статуса--------------------------
void read_status_registers(void)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800cfca:	4bbc      	ldr	r3, [pc, #752]	; (800d2bc <read_status_registers+0x2f8>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f04f 31ff 	mov.w	r1, #4294967295
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7f9 fac2 	bl	800655c <osMutexWait>

	fm25v02_read(2*VERSION_REG, &status_reg_temp_h);
 800cfd8:	1dfb      	adds	r3, r7, #7
 800cfda:	4619      	mov	r1, r3
 800cfdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800cfe0:	f7fe fd02 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*VERSION_REG+1, &status_reg_temp_l);
 800cfe4:	1dbb      	adds	r3, r7, #6
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	f242 0001 	movw	r0, #8193	; 0x2001
 800cfec:	f7fe fcfc 	bl	800b9e8 <fm25v02_read>
	status_registers.version_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cff0:	79fb      	ldrb	r3, [r7, #7]
 800cff2:	021b      	lsls	r3, r3, #8
 800cff4:	b21a      	sxth	r2, r3
 800cff6:	79bb      	ldrb	r3, [r7, #6]
 800cff8:	b21b      	sxth	r3, r3
 800cffa:	4313      	orrs	r3, r2
 800cffc:	b21b      	sxth	r3, r3
 800cffe:	b29a      	uxth	r2, r3
 800d000:	4baf      	ldr	r3, [pc, #700]	; (800d2c0 <read_status_registers+0x2fc>)
 800d002:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*SECURITY_STATUS_REG, &status_reg_temp_h);
 800d004:	1dfb      	adds	r3, r7, #7
 800d006:	4619      	mov	r1, r3
 800d008:	f242 0002 	movw	r0, #8194	; 0x2002
 800d00c:	f7fe fcec 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*SECURITY_STATUS_REG+1, &status_reg_temp_l);
 800d010:	1dbb      	adds	r3, r7, #6
 800d012:	4619      	mov	r1, r3
 800d014:	f242 0003 	movw	r0, #8195	; 0x2003
 800d018:	f7fe fce6 	bl	800b9e8 <fm25v02_read>
	status_registers.security_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d01c:	79fb      	ldrb	r3, [r7, #7]
 800d01e:	021b      	lsls	r3, r3, #8
 800d020:	b21a      	sxth	r2, r3
 800d022:	79bb      	ldrb	r3, [r7, #6]
 800d024:	b21b      	sxth	r3, r3
 800d026:	4313      	orrs	r3, r2
 800d028:	b21b      	sxth	r3, r3
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	4ba4      	ldr	r3, [pc, #656]	; (800d2c0 <read_status_registers+0x2fc>)
 800d02e:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*STATUS_LOOP_REG, &status_reg_temp_h);
 800d030:	1dfb      	adds	r3, r7, #7
 800d032:	4619      	mov	r1, r3
 800d034:	f242 0004 	movw	r0, #8196	; 0x2004
 800d038:	f7fe fcd6 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*STATUS_LOOP_REG+1, &status_reg_temp_l);
 800d03c:	1dbb      	adds	r3, r7, #6
 800d03e:	4619      	mov	r1, r3
 800d040:	f242 0005 	movw	r0, #8197	; 0x2005
 800d044:	f7fe fcd0 	bl	800b9e8 <fm25v02_read>
	status_registers.status_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d048:	79fb      	ldrb	r3, [r7, #7]
 800d04a:	021b      	lsls	r3, r3, #8
 800d04c:	b21a      	sxth	r2, r3
 800d04e:	79bb      	ldrb	r3, [r7, #6]
 800d050:	b21b      	sxth	r3, r3
 800d052:	4313      	orrs	r3, r2
 800d054:	b21b      	sxth	r3, r3
 800d056:	b29a      	uxth	r2, r3
 800d058:	4b99      	ldr	r3, [pc, #612]	; (800d2c0 <read_status_registers+0x2fc>)
 800d05a:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*ERROR_LOOP_REG, &status_reg_temp_h);
 800d05c:	1dfb      	adds	r3, r7, #7
 800d05e:	4619      	mov	r1, r3
 800d060:	f242 0006 	movw	r0, #8198	; 0x2006
 800d064:	f7fe fcc0 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ERROR_LOOP_REG+1, &status_reg_temp_l);
 800d068:	1dbb      	adds	r3, r7, #6
 800d06a:	4619      	mov	r1, r3
 800d06c:	f242 0007 	movw	r0, #8199	; 0x2007
 800d070:	f7fe fcba 	bl	800b9e8 <fm25v02_read>
	status_registers.error_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d074:	79fb      	ldrb	r3, [r7, #7]
 800d076:	021b      	lsls	r3, r3, #8
 800d078:	b21a      	sxth	r2, r3
 800d07a:	79bb      	ldrb	r3, [r7, #6]
 800d07c:	b21b      	sxth	r3, r3
 800d07e:	4313      	orrs	r3, r2
 800d080:	b21b      	sxth	r3, r3
 800d082:	b29a      	uxth	r2, r3
 800d084:	4b8e      	ldr	r3, [pc, #568]	; (800d2c0 <read_status_registers+0x2fc>)
 800d086:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*ALARM_LOOP_REG, &status_reg_temp_h);
 800d088:	1dfb      	adds	r3, r7, #7
 800d08a:	4619      	mov	r1, r3
 800d08c:	f242 0008 	movw	r0, #8200	; 0x2008
 800d090:	f7fe fcaa 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_REG+1, &status_reg_temp_l);
 800d094:	1dbb      	adds	r3, r7, #6
 800d096:	4619      	mov	r1, r3
 800d098:	f242 0009 	movw	r0, #8201	; 0x2009
 800d09c:	f7fe fca4 	bl	800b9e8 <fm25v02_read>
	status_registers.alarm_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d0a0:	79fb      	ldrb	r3, [r7, #7]
 800d0a2:	021b      	lsls	r3, r3, #8
 800d0a4:	b21a      	sxth	r2, r3
 800d0a6:	79bb      	ldrb	r3, [r7, #6]
 800d0a8:	b21b      	sxth	r3, r3
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	b21b      	sxth	r3, r3
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	4b83      	ldr	r3, [pc, #524]	; (800d2c0 <read_status_registers+0x2fc>)
 800d0b2:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*TIME_CURRENT_YEAR_REG, &status_reg_temp_h);
 800d0b4:	1dfb      	adds	r3, r7, #7
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	f242 000a 	movw	r0, #8202	; 0x200a
 800d0bc:	f7fe fc94 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_YEAR_REG+1, &status_reg_temp_l);
 800d0c0:	1dbb      	adds	r3, r7, #6
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	f242 000b 	movw	r0, #8203	; 0x200b
 800d0c8:	f7fe fc8e 	bl	800b9e8 <fm25v02_read>
	status_registers.time_current_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d0cc:	79fb      	ldrb	r3, [r7, #7]
 800d0ce:	021b      	lsls	r3, r3, #8
 800d0d0:	b21a      	sxth	r2, r3
 800d0d2:	79bb      	ldrb	r3, [r7, #6]
 800d0d4:	b21b      	sxth	r3, r3
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	b21b      	sxth	r3, r3
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	4b78      	ldr	r3, [pc, #480]	; (800d2c0 <read_status_registers+0x2fc>)
 800d0de:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*TIME_CURRENT_MONTH_REG, &status_reg_temp_h);
 800d0e0:	1dfb      	adds	r3, r7, #7
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	f242 000c 	movw	r0, #8204	; 0x200c
 800d0e8:	f7fe fc7e 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MONTH_REG+1, &status_reg_temp_l);
 800d0ec:	1dbb      	adds	r3, r7, #6
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	f242 000d 	movw	r0, #8205	; 0x200d
 800d0f4:	f7fe fc78 	bl	800b9e8 <fm25v02_read>
	status_registers.time_current_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d0f8:	79fb      	ldrb	r3, [r7, #7]
 800d0fa:	021b      	lsls	r3, r3, #8
 800d0fc:	b21a      	sxth	r2, r3
 800d0fe:	79bb      	ldrb	r3, [r7, #6]
 800d100:	b21b      	sxth	r3, r3
 800d102:	4313      	orrs	r3, r2
 800d104:	b21b      	sxth	r3, r3
 800d106:	b29a      	uxth	r2, r3
 800d108:	4b6d      	ldr	r3, [pc, #436]	; (800d2c0 <read_status_registers+0x2fc>)
 800d10a:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*TIME_CURRENT_DAY_REG, &status_reg_temp_h);
 800d10c:	1dfb      	adds	r3, r7, #7
 800d10e:	4619      	mov	r1, r3
 800d110:	f242 000e 	movw	r0, #8206	; 0x200e
 800d114:	f7fe fc68 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_DAY_REG+1, &status_reg_temp_l);
 800d118:	1dbb      	adds	r3, r7, #6
 800d11a:	4619      	mov	r1, r3
 800d11c:	f242 000f 	movw	r0, #8207	; 0x200f
 800d120:	f7fe fc62 	bl	800b9e8 <fm25v02_read>
	status_registers.time_current_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d124:	79fb      	ldrb	r3, [r7, #7]
 800d126:	021b      	lsls	r3, r3, #8
 800d128:	b21a      	sxth	r2, r3
 800d12a:	79bb      	ldrb	r3, [r7, #6]
 800d12c:	b21b      	sxth	r3, r3
 800d12e:	4313      	orrs	r3, r2
 800d130:	b21b      	sxth	r3, r3
 800d132:	b29a      	uxth	r2, r3
 800d134:	4b62      	ldr	r3, [pc, #392]	; (800d2c0 <read_status_registers+0x2fc>)
 800d136:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_CURRENT_HOUR_REG, &status_reg_temp_h);
 800d138:	1dfb      	adds	r3, r7, #7
 800d13a:	4619      	mov	r1, r3
 800d13c:	f242 0010 	movw	r0, #8208	; 0x2010
 800d140:	f7fe fc52 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_HOUR_REG+1, &status_reg_temp_l);
 800d144:	1dbb      	adds	r3, r7, #6
 800d146:	4619      	mov	r1, r3
 800d148:	f242 0011 	movw	r0, #8209	; 0x2011
 800d14c:	f7fe fc4c 	bl	800b9e8 <fm25v02_read>
	status_registers.time_current_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d150:	79fb      	ldrb	r3, [r7, #7]
 800d152:	021b      	lsls	r3, r3, #8
 800d154:	b21a      	sxth	r2, r3
 800d156:	79bb      	ldrb	r3, [r7, #6]
 800d158:	b21b      	sxth	r3, r3
 800d15a:	4313      	orrs	r3, r2
 800d15c:	b21b      	sxth	r3, r3
 800d15e:	b29a      	uxth	r2, r3
 800d160:	4b57      	ldr	r3, [pc, #348]	; (800d2c0 <read_status_registers+0x2fc>)
 800d162:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_CURRENT_MINUTE_REG, &status_reg_temp_h);
 800d164:	1dfb      	adds	r3, r7, #7
 800d166:	4619      	mov	r1, r3
 800d168:	f242 0012 	movw	r0, #8210	; 0x2012
 800d16c:	f7fe fc3c 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MINUTE_REG+1, &status_reg_temp_l);
 800d170:	1dbb      	adds	r3, r7, #6
 800d172:	4619      	mov	r1, r3
 800d174:	f242 0013 	movw	r0, #8211	; 0x2013
 800d178:	f7fe fc36 	bl	800b9e8 <fm25v02_read>
	status_registers.time_current_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d17c:	79fb      	ldrb	r3, [r7, #7]
 800d17e:	021b      	lsls	r3, r3, #8
 800d180:	b21a      	sxth	r2, r3
 800d182:	79bb      	ldrb	r3, [r7, #6]
 800d184:	b21b      	sxth	r3, r3
 800d186:	4313      	orrs	r3, r2
 800d188:	b21b      	sxth	r3, r3
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	4b4c      	ldr	r3, [pc, #304]	; (800d2c0 <read_status_registers+0x2fc>)
 800d18e:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_CURRENT_SECOND_REG, &status_reg_temp_h);
 800d190:	1dfb      	adds	r3, r7, #7
 800d192:	4619      	mov	r1, r3
 800d194:	f242 0014 	movw	r0, #8212	; 0x2014
 800d198:	f7fe fc26 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_SECOND_REG+1, &status_reg_temp_l);
 800d19c:	1dbb      	adds	r3, r7, #6
 800d19e:	4619      	mov	r1, r3
 800d1a0:	f242 0015 	movw	r0, #8213	; 0x2015
 800d1a4:	f7fe fc20 	bl	800b9e8 <fm25v02_read>
	status_registers.time_current_second_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d1a8:	79fb      	ldrb	r3, [r7, #7]
 800d1aa:	021b      	lsls	r3, r3, #8
 800d1ac:	b21a      	sxth	r2, r3
 800d1ae:	79bb      	ldrb	r3, [r7, #6]
 800d1b0:	b21b      	sxth	r3, r3
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	b21b      	sxth	r3, r3
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	4b41      	ldr	r3, [pc, #260]	; (800d2c0 <read_status_registers+0x2fc>)
 800d1ba:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG, &status_reg_temp_h);
 800d1bc:	1dfb      	adds	r3, r7, #7
 800d1be:	4619      	mov	r1, r3
 800d1c0:	f242 0016 	movw	r0, #8214	; 0x2016
 800d1c4:	f7fe fc10 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG+1, &status_reg_temp_l);
 800d1c8:	1dbb      	adds	r3, r7, #6
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	f242 0017 	movw	r0, #8215	; 0x2017
 800d1d0:	f7fe fc0a 	bl	800b9e8 <fm25v02_read>
	status_registers.time_current_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d1d4:	79fb      	ldrb	r3, [r7, #7]
 800d1d6:	021b      	lsls	r3, r3, #8
 800d1d8:	b21a      	sxth	r2, r3
 800d1da:	79bb      	ldrb	r3, [r7, #6]
 800d1dc:	b21b      	sxth	r3, r3
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	b21b      	sxth	r3, r3
 800d1e2:	b29a      	uxth	r2, r3
 800d1e4:	4b36      	ldr	r3, [pc, #216]	; (800d2c0 <read_status_registers+0x2fc>)
 800d1e6:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG, &status_reg_temp_h);
 800d1e8:	1dfb      	adds	r3, r7, #7
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	f242 0018 	movw	r0, #8216	; 0x2018
 800d1f0:	f7fe fbfa 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG+1, &status_reg_temp_l);
 800d1f4:	1dbb      	adds	r3, r7, #6
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	f242 0019 	movw	r0, #8217	; 0x2019
 800d1fc:	f7fe fbf4 	bl	800b9e8 <fm25v02_read>
	status_registers.address_processed_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d200:	79fb      	ldrb	r3, [r7, #7]
 800d202:	021b      	lsls	r3, r3, #8
 800d204:	b21a      	sxth	r2, r3
 800d206:	79bb      	ldrb	r3, [r7, #6]
 800d208:	b21b      	sxth	r3, r3
 800d20a:	4313      	orrs	r3, r2
 800d20c:	b21b      	sxth	r3, r3
 800d20e:	b29a      	uxth	r2, r3
 800d210:	4b2b      	ldr	r3, [pc, #172]	; (800d2c0 <read_status_registers+0x2fc>)
 800d212:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG, &status_reg_temp_h);
 800d214:	1dfb      	adds	r3, r7, #7
 800d216:	4619      	mov	r1, r3
 800d218:	f242 001a 	movw	r0, #8218	; 0x201a
 800d21c:	f7fe fbe4 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG+1, &status_reg_temp_l);
 800d220:	1dbb      	adds	r3, r7, #6
 800d222:	4619      	mov	r1, r3
 800d224:	f242 001b 	movw	r0, #8219	; 0x201b
 800d228:	f7fe fbde 	bl	800b9e8 <fm25v02_read>
	status_registers.address_processed_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d22c:	79fb      	ldrb	r3, [r7, #7]
 800d22e:	021b      	lsls	r3, r3, #8
 800d230:	b21a      	sxth	r2, r3
 800d232:	79bb      	ldrb	r3, [r7, #6]
 800d234:	b21b      	sxth	r3, r3
 800d236:	4313      	orrs	r3, r2
 800d238:	b21b      	sxth	r3, r3
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	4b20      	ldr	r3, [pc, #128]	; (800d2c0 <read_status_registers+0x2fc>)
 800d23e:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG, &status_reg_temp_h);
 800d240:	1dfb      	adds	r3, r7, #7
 800d242:	4619      	mov	r1, r3
 800d244:	f242 001c 	movw	r0, #8220	; 0x201c
 800d248:	f7fe fbce 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &status_reg_temp_l);
 800d24c:	1dbb      	adds	r3, r7, #6
 800d24e:	4619      	mov	r1, r3
 800d250:	f242 001d 	movw	r0, #8221	; 0x201d
 800d254:	f7fe fbc8 	bl	800b9e8 <fm25v02_read>
	status_registers.address_last_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d258:	79fb      	ldrb	r3, [r7, #7]
 800d25a:	021b      	lsls	r3, r3, #8
 800d25c:	b21a      	sxth	r2, r3
 800d25e:	79bb      	ldrb	r3, [r7, #6]
 800d260:	b21b      	sxth	r3, r3
 800d262:	4313      	orrs	r3, r2
 800d264:	b21b      	sxth	r3, r3
 800d266:	b29a      	uxth	r2, r3
 800d268:	4b15      	ldr	r3, [pc, #84]	; (800d2c0 <read_status_registers+0x2fc>)
 800d26a:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG, &status_reg_temp_h);
 800d26c:	1dfb      	adds	r3, r7, #7
 800d26e:	4619      	mov	r1, r3
 800d270:	f242 001e 	movw	r0, #8222	; 0x201e
 800d274:	f7fe fbb8 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &status_reg_temp_l);
 800d278:	1dbb      	adds	r3, r7, #6
 800d27a:	4619      	mov	r1, r3
 800d27c:	f242 001f 	movw	r0, #8223	; 0x201f
 800d280:	f7fe fbb2 	bl	800b9e8 <fm25v02_read>
	status_registers.address_last_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d284:	79fb      	ldrb	r3, [r7, #7]
 800d286:	021b      	lsls	r3, r3, #8
 800d288:	b21a      	sxth	r2, r3
 800d28a:	79bb      	ldrb	r3, [r7, #6]
 800d28c:	b21b      	sxth	r3, r3
 800d28e:	4313      	orrs	r3, r2
 800d290:	b21b      	sxth	r3, r3
 800d292:	b29a      	uxth	r2, r3
 800d294:	4b0a      	ldr	r3, [pc, #40]	; (800d2c0 <read_status_registers+0x2fc>)
 800d296:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*SYSTEM_STATUS_REG, &status_reg_temp_h);
 800d298:	1dfb      	adds	r3, r7, #7
 800d29a:	4619      	mov	r1, r3
 800d29c:	f242 0020 	movw	r0, #8224	; 0x2020
 800d2a0:	f7fe fba2 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*SYSTEM_STATUS_REG+1, &status_reg_temp_l);
 800d2a4:	1dbb      	adds	r3, r7, #6
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	f242 0021 	movw	r0, #8225	; 0x2021
 800d2ac:	f7fe fb9c 	bl	800b9e8 <fm25v02_read>
	status_registers.system_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d2b0:	79fb      	ldrb	r3, [r7, #7]
 800d2b2:	021b      	lsls	r3, r3, #8
 800d2b4:	b21a      	sxth	r2, r3
 800d2b6:	79bb      	ldrb	r3, [r7, #6]
 800d2b8:	e004      	b.n	800d2c4 <read_status_registers+0x300>
 800d2ba:	bf00      	nop
 800d2bc:	20016c3c 	.word	0x20016c3c
 800d2c0:	200189fc 	.word	0x200189fc
 800d2c4:	b21b      	sxth	r3, r3
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	b21b      	sxth	r3, r3
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	4bbd      	ldr	r3, [pc, #756]	; (800d5c4 <read_status_registers+0x600>)
 800d2ce:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*POWER_ON_REG, &status_reg_temp_h);
 800d2d0:	1dfb      	adds	r3, r7, #7
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	f242 0022 	movw	r0, #8226	; 0x2022
 800d2d8:	f7fe fb86 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*POWER_ON_REG+1, &status_reg_temp_l);
 800d2dc:	1dbb      	adds	r3, r7, #6
 800d2de:	4619      	mov	r1, r3
 800d2e0:	f242 0023 	movw	r0, #8227	; 0x2023
 800d2e4:	f7fe fb80 	bl	800b9e8 <fm25v02_read>
	status_registers.power_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d2e8:	79fb      	ldrb	r3, [r7, #7]
 800d2ea:	021b      	lsls	r3, r3, #8
 800d2ec:	b21a      	sxth	r2, r3
 800d2ee:	79bb      	ldrb	r3, [r7, #6]
 800d2f0:	b21b      	sxth	r3, r3
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	b21b      	sxth	r3, r3
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	4bb2      	ldr	r3, [pc, #712]	; (800d5c4 <read_status_registers+0x600>)
 800d2fa:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*ERROR_RTC_REG, &status_reg_temp_h);
 800d2fc:	1dfb      	adds	r3, r7, #7
 800d2fe:	4619      	mov	r1, r3
 800d300:	f242 0024 	movw	r0, #8228	; 0x2024
 800d304:	f7fe fb70 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ERROR_RTC_REG+1, &status_reg_temp_l);
 800d308:	1dbb      	adds	r3, r7, #6
 800d30a:	4619      	mov	r1, r3
 800d30c:	f242 0025 	movw	r0, #8229	; 0x2025
 800d310:	f7fe fb6a 	bl	800b9e8 <fm25v02_read>
	status_registers.error_rtc_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d314:	79fb      	ldrb	r3, [r7, #7]
 800d316:	021b      	lsls	r3, r3, #8
 800d318:	b21a      	sxth	r2, r3
 800d31a:	79bb      	ldrb	r3, [r7, #6]
 800d31c:	b21b      	sxth	r3, r3
 800d31e:	4313      	orrs	r3, r2
 800d320:	b21b      	sxth	r3, r3
 800d322:	b29a      	uxth	r2, r3
 800d324:	4ba7      	ldr	r3, [pc, #668]	; (800d5c4 <read_status_registers+0x600>)
 800d326:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*POWER_ON_LIGHTING_REG, &status_reg_temp_h);
 800d328:	1dfb      	adds	r3, r7, #7
 800d32a:	4619      	mov	r1, r3
 800d32c:	f242 0026 	movw	r0, #8230	; 0x2026
 800d330:	f7fe fb5a 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*POWER_ON_LIGHTING_REG+1, &status_reg_temp_l);
 800d334:	1dbb      	adds	r3, r7, #6
 800d336:	4619      	mov	r1, r3
 800d338:	f242 0027 	movw	r0, #8231	; 0x2027
 800d33c:	f7fe fb54 	bl	800b9e8 <fm25v02_read>
	status_registers.power_on_lighting_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d340:	79fb      	ldrb	r3, [r7, #7]
 800d342:	021b      	lsls	r3, r3, #8
 800d344:	b21a      	sxth	r2, r3
 800d346:	79bb      	ldrb	r3, [r7, #6]
 800d348:	b21b      	sxth	r3, r3
 800d34a:	4313      	orrs	r3, r2
 800d34c:	b21b      	sxth	r3, r3
 800d34e:	b29a      	uxth	r2, r3
 800d350:	4b9c      	ldr	r3, [pc, #624]	; (800d5c4 <read_status_registers+0x600>)
 800d352:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*IBUTTON_COMPLETE_0_REG, &status_reg_temp_h);
 800d354:	1dfb      	adds	r3, r7, #7
 800d356:	4619      	mov	r1, r3
 800d358:	f242 002a 	movw	r0, #8234	; 0x202a
 800d35c:	f7fe fb44 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_0_REG+1, &status_reg_temp_l);
 800d360:	1dbb      	adds	r3, r7, #6
 800d362:	4619      	mov	r1, r3
 800d364:	f242 002b 	movw	r0, #8235	; 0x202b
 800d368:	f7fe fb3e 	bl	800b9e8 <fm25v02_read>
	status_registers.ibutton_complite_0_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d36c:	79fb      	ldrb	r3, [r7, #7]
 800d36e:	021b      	lsls	r3, r3, #8
 800d370:	b21a      	sxth	r2, r3
 800d372:	79bb      	ldrb	r3, [r7, #6]
 800d374:	b21b      	sxth	r3, r3
 800d376:	4313      	orrs	r3, r2
 800d378:	b21b      	sxth	r3, r3
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	4b91      	ldr	r3, [pc, #580]	; (800d5c4 <read_status_registers+0x600>)
 800d37e:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*IBUTTON_COMPLETE_1_REG, &status_reg_temp_h);
 800d380:	1dfb      	adds	r3, r7, #7
 800d382:	4619      	mov	r1, r3
 800d384:	f242 002c 	movw	r0, #8236	; 0x202c
 800d388:	f7fe fb2e 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_1_REG+1, &status_reg_temp_l);
 800d38c:	1dbb      	adds	r3, r7, #6
 800d38e:	4619      	mov	r1, r3
 800d390:	f242 002d 	movw	r0, #8237	; 0x202d
 800d394:	f7fe fb28 	bl	800b9e8 <fm25v02_read>
	status_registers.ibutton_complite_1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d398:	79fb      	ldrb	r3, [r7, #7]
 800d39a:	021b      	lsls	r3, r3, #8
 800d39c:	b21a      	sxth	r2, r3
 800d39e:	79bb      	ldrb	r3, [r7, #6]
 800d3a0:	b21b      	sxth	r3, r3
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	b21b      	sxth	r3, r3
 800d3a6:	b29a      	uxth	r2, r3
 800d3a8:	4b86      	ldr	r3, [pc, #536]	; (800d5c4 <read_status_registers+0x600>)
 800d3aa:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*IBUTTON_COMPLETE_2_REG, &status_reg_temp_h);
 800d3ac:	1dfb      	adds	r3, r7, #7
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	f242 002e 	movw	r0, #8238	; 0x202e
 800d3b4:	f7fe fb18 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_2_REG+1, &status_reg_temp_l);
 800d3b8:	1dbb      	adds	r3, r7, #6
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	f242 002f 	movw	r0, #8239	; 0x202f
 800d3c0:	f7fe fb12 	bl	800b9e8 <fm25v02_read>
	status_registers.ibutton_complite_2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d3c4:	79fb      	ldrb	r3, [r7, #7]
 800d3c6:	021b      	lsls	r3, r3, #8
 800d3c8:	b21a      	sxth	r2, r3
 800d3ca:	79bb      	ldrb	r3, [r7, #6]
 800d3cc:	b21b      	sxth	r3, r3
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	b21b      	sxth	r3, r3
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	4b7b      	ldr	r3, [pc, #492]	; (800d5c4 <read_status_registers+0x600>)
 800d3d6:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*IBUTTON_COMPLETE_3_REG, &status_reg_temp_h);
 800d3d8:	1dfb      	adds	r3, r7, #7
 800d3da:	4619      	mov	r1, r3
 800d3dc:	f242 0030 	movw	r0, #8240	; 0x2030
 800d3e0:	f7fe fb02 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_3_REG+1, &status_reg_temp_l);
 800d3e4:	1dbb      	adds	r3, r7, #6
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	f242 0031 	movw	r0, #8241	; 0x2031
 800d3ec:	f7fe fafc 	bl	800b9e8 <fm25v02_read>
	status_registers.ibutton_complite_3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d3f0:	79fb      	ldrb	r3, [r7, #7]
 800d3f2:	021b      	lsls	r3, r3, #8
 800d3f4:	b21a      	sxth	r2, r3
 800d3f6:	79bb      	ldrb	r3, [r7, #6]
 800d3f8:	b21b      	sxth	r3, r3
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	b21b      	sxth	r3, r3
 800d3fe:	b29a      	uxth	r2, r3
 800d400:	4b70      	ldr	r3, [pc, #448]	; (800d5c4 <read_status_registers+0x600>)
 800d402:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*IBUTTON_COMPLETE_4_REG, &status_reg_temp_h);
 800d404:	1dfb      	adds	r3, r7, #7
 800d406:	4619      	mov	r1, r3
 800d408:	f242 0032 	movw	r0, #8242	; 0x2032
 800d40c:	f7fe faec 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_4_REG+1, &status_reg_temp_l);
 800d410:	1dbb      	adds	r3, r7, #6
 800d412:	4619      	mov	r1, r3
 800d414:	f242 0033 	movw	r0, #8243	; 0x2033
 800d418:	f7fe fae6 	bl	800b9e8 <fm25v02_read>
	status_registers.ibutton_complite_4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d41c:	79fb      	ldrb	r3, [r7, #7]
 800d41e:	021b      	lsls	r3, r3, #8
 800d420:	b21a      	sxth	r2, r3
 800d422:	79bb      	ldrb	r3, [r7, #6]
 800d424:	b21b      	sxth	r3, r3
 800d426:	4313      	orrs	r3, r2
 800d428:	b21b      	sxth	r3, r3
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	4b65      	ldr	r3, [pc, #404]	; (800d5c4 <read_status_registers+0x600>)
 800d42e:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*IBUTTON_COMPLETE_5_REG, &status_reg_temp_h);
 800d430:	1dfb      	adds	r3, r7, #7
 800d432:	4619      	mov	r1, r3
 800d434:	f242 0034 	movw	r0, #8244	; 0x2034
 800d438:	f7fe fad6 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_5_REG+1, &status_reg_temp_l);
 800d43c:	1dbb      	adds	r3, r7, #6
 800d43e:	4619      	mov	r1, r3
 800d440:	f242 0035 	movw	r0, #8245	; 0x2035
 800d444:	f7fe fad0 	bl	800b9e8 <fm25v02_read>
	status_registers.ibutton_complite_5_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	021b      	lsls	r3, r3, #8
 800d44c:	b21a      	sxth	r2, r3
 800d44e:	79bb      	ldrb	r3, [r7, #6]
 800d450:	b21b      	sxth	r3, r3
 800d452:	4313      	orrs	r3, r2
 800d454:	b21b      	sxth	r3, r3
 800d456:	b29a      	uxth	r2, r3
 800d458:	4b5a      	ldr	r3, [pc, #360]	; (800d5c4 <read_status_registers+0x600>)
 800d45a:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*IBUTTON_COMPLETE_6_REG, &status_reg_temp_h);
 800d45c:	1dfb      	adds	r3, r7, #7
 800d45e:	4619      	mov	r1, r3
 800d460:	f242 0036 	movw	r0, #8246	; 0x2036
 800d464:	f7fe fac0 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_6_REG+1, &status_reg_temp_l);
 800d468:	1dbb      	adds	r3, r7, #6
 800d46a:	4619      	mov	r1, r3
 800d46c:	f242 0037 	movw	r0, #8247	; 0x2037
 800d470:	f7fe faba 	bl	800b9e8 <fm25v02_read>
	status_registers.ibutton_complite_6_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d474:	79fb      	ldrb	r3, [r7, #7]
 800d476:	021b      	lsls	r3, r3, #8
 800d478:	b21a      	sxth	r2, r3
 800d47a:	79bb      	ldrb	r3, [r7, #6]
 800d47c:	b21b      	sxth	r3, r3
 800d47e:	4313      	orrs	r3, r2
 800d480:	b21b      	sxth	r3, r3
 800d482:	b29a      	uxth	r2, r3
 800d484:	4b4f      	ldr	r3, [pc, #316]	; (800d5c4 <read_status_registers+0x600>)
 800d486:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*IBUTTON_COMPLETE_7_REG, &status_reg_temp_h);
 800d488:	1dfb      	adds	r3, r7, #7
 800d48a:	4619      	mov	r1, r3
 800d48c:	f242 0038 	movw	r0, #8248	; 0x2038
 800d490:	f7fe faaa 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_7_REG+1, &status_reg_temp_l);
 800d494:	1dbb      	adds	r3, r7, #6
 800d496:	4619      	mov	r1, r3
 800d498:	f242 0039 	movw	r0, #8249	; 0x2039
 800d49c:	f7fe faa4 	bl	800b9e8 <fm25v02_read>
	status_registers.ibutton_complite_7_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d4a0:	79fb      	ldrb	r3, [r7, #7]
 800d4a2:	021b      	lsls	r3, r3, #8
 800d4a4:	b21a      	sxth	r2, r3
 800d4a6:	79bb      	ldrb	r3, [r7, #6]
 800d4a8:	b21b      	sxth	r3, r3
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	b21b      	sxth	r3, r3
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	4b44      	ldr	r3, [pc, #272]	; (800d5c4 <read_status_registers+0x600>)
 800d4b2:	871a      	strh	r2, [r3, #56]	; 0x38

	//fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG, &status_reg_temp_h);
	//fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG+1, &status_reg_temp_l);
	//status_registers.ce303_tarif5_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;

	fm25v02_read(2*SIGNAL_LEVEL_REG, &status_reg_temp_h);
 800d4b4:	1dfb      	adds	r3, r7, #7
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	f242 00a6 	movw	r0, #8358	; 0x20a6
 800d4bc:	f7fe fa94 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*SIGNAL_LEVEL_REG+1, &status_reg_temp_l);
 800d4c0:	1dbb      	adds	r3, r7, #6
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	f242 00a7 	movw	r0, #8359	; 0x20a7
 800d4c8:	f7fe fa8e 	bl	800b9e8 <fm25v02_read>
	status_registers.signal_level_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d4cc:	79fb      	ldrb	r3, [r7, #7]
 800d4ce:	021b      	lsls	r3, r3, #8
 800d4d0:	b21a      	sxth	r2, r3
 800d4d2:	79bb      	ldrb	r3, [r7, #6]
 800d4d4:	b21b      	sxth	r3, r3
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	b21b      	sxth	r3, r3
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	4b39      	ldr	r3, [pc, #228]	; (800d5c4 <read_status_registers+0x600>)
 800d4de:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6

	//fm25v02_read(2*ADDITIONAL_INPUT_REG2, &status_reg_temp_h);
	//fm25v02_read(2*ADDITIONAL_INPUT_REG2+1, &status_reg_temp_l);
	//status_registers.additional_input_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;

	fm25v02_read(2*ICCID_NUMBER_REG1, &status_reg_temp_h);
 800d4e2:	1dfb      	adds	r3, r7, #7
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	f242 00b0 	movw	r0, #8368	; 0x20b0
 800d4ea:	f7fe fa7d 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG1+1, &status_reg_temp_l);
 800d4ee:	1dbb      	adds	r3, r7, #6
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	f242 00b1 	movw	r0, #8369	; 0x20b1
 800d4f6:	f7fe fa77 	bl	800b9e8 <fm25v02_read>
	status_registers.iccid_number_reg1 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d4fa:	79fb      	ldrb	r3, [r7, #7]
 800d4fc:	021b      	lsls	r3, r3, #8
 800d4fe:	b21a      	sxth	r2, r3
 800d500:	79bb      	ldrb	r3, [r7, #6]
 800d502:	b21b      	sxth	r3, r3
 800d504:	4313      	orrs	r3, r2
 800d506:	b21b      	sxth	r3, r3
 800d508:	b29a      	uxth	r2, r3
 800d50a:	4b2e      	ldr	r3, [pc, #184]	; (800d5c4 <read_status_registers+0x600>)
 800d50c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	fm25v02_read(2*ICCID_NUMBER_REG2, &status_reg_temp_h);
 800d510:	1dfb      	adds	r3, r7, #7
 800d512:	4619      	mov	r1, r3
 800d514:	f242 00b2 	movw	r0, #8370	; 0x20b2
 800d518:	f7fe fa66 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG2+1, &status_reg_temp_l);
 800d51c:	1dbb      	adds	r3, r7, #6
 800d51e:	4619      	mov	r1, r3
 800d520:	f242 00b3 	movw	r0, #8371	; 0x20b3
 800d524:	f7fe fa60 	bl	800b9e8 <fm25v02_read>
	status_registers.iccid_number_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d528:	79fb      	ldrb	r3, [r7, #7]
 800d52a:	021b      	lsls	r3, r3, #8
 800d52c:	b21a      	sxth	r2, r3
 800d52e:	79bb      	ldrb	r3, [r7, #6]
 800d530:	b21b      	sxth	r3, r3
 800d532:	4313      	orrs	r3, r2
 800d534:	b21b      	sxth	r3, r3
 800d536:	b29a      	uxth	r2, r3
 800d538:	4b22      	ldr	r3, [pc, #136]	; (800d5c4 <read_status_registers+0x600>)
 800d53a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

	fm25v02_read(2*ICCID_NUMBER_REG3, &status_reg_temp_h);
 800d53e:	1dfb      	adds	r3, r7, #7
 800d540:	4619      	mov	r1, r3
 800d542:	f242 00b4 	movw	r0, #8372	; 0x20b4
 800d546:	f7fe fa4f 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG3+1, &status_reg_temp_l);
 800d54a:	1dbb      	adds	r3, r7, #6
 800d54c:	4619      	mov	r1, r3
 800d54e:	f242 00b5 	movw	r0, #8373	; 0x20b5
 800d552:	f7fe fa49 	bl	800b9e8 <fm25v02_read>
	status_registers.iccid_number_reg3 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d556:	79fb      	ldrb	r3, [r7, #7]
 800d558:	021b      	lsls	r3, r3, #8
 800d55a:	b21a      	sxth	r2, r3
 800d55c:	79bb      	ldrb	r3, [r7, #6]
 800d55e:	b21b      	sxth	r3, r3
 800d560:	4313      	orrs	r3, r2
 800d562:	b21b      	sxth	r3, r3
 800d564:	b29a      	uxth	r2, r3
 800d566:	4b17      	ldr	r3, [pc, #92]	; (800d5c4 <read_status_registers+0x600>)
 800d568:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	fm25v02_read(2*ICCID_NUMBER_REG4, &status_reg_temp_h);
 800d56c:	1dfb      	adds	r3, r7, #7
 800d56e:	4619      	mov	r1, r3
 800d570:	f242 00b6 	movw	r0, #8374	; 0x20b6
 800d574:	f7fe fa38 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG4+1, &status_reg_temp_l);
 800d578:	1dbb      	adds	r3, r7, #6
 800d57a:	4619      	mov	r1, r3
 800d57c:	f242 00b7 	movw	r0, #8375	; 0x20b7
 800d580:	f7fe fa32 	bl	800b9e8 <fm25v02_read>
	status_registers.iccid_number_reg4 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d584:	79fb      	ldrb	r3, [r7, #7]
 800d586:	021b      	lsls	r3, r3, #8
 800d588:	b21a      	sxth	r2, r3
 800d58a:	79bb      	ldrb	r3, [r7, #6]
 800d58c:	b21b      	sxth	r3, r3
 800d58e:	4313      	orrs	r3, r2
 800d590:	b21b      	sxth	r3, r3
 800d592:	b29a      	uxth	r2, r3
 800d594:	4b0b      	ldr	r3, [pc, #44]	; (800d5c4 <read_status_registers+0x600>)
 800d596:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

	fm25v02_read(2*ICCID_NUMBER_REG5, &status_reg_temp_h);
 800d59a:	1dfb      	adds	r3, r7, #7
 800d59c:	4619      	mov	r1, r3
 800d59e:	f242 00b8 	movw	r0, #8376	; 0x20b8
 800d5a2:	f7fe fa21 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG5+1, &status_reg_temp_l);
 800d5a6:	1dbb      	adds	r3, r7, #6
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	f242 00b9 	movw	r0, #8377	; 0x20b9
 800d5ae:	f7fe fa1b 	bl	800b9e8 <fm25v02_read>
	status_registers.iccid_number_reg5 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d5b2:	79fb      	ldrb	r3, [r7, #7]
 800d5b4:	021b      	lsls	r3, r3, #8
 800d5b6:	b21a      	sxth	r2, r3
 800d5b8:	79bb      	ldrb	r3, [r7, #6]
 800d5ba:	b21b      	sxth	r3, r3
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	b21b      	sxth	r3, r3
 800d5c0:	e002      	b.n	800d5c8 <read_status_registers+0x604>
 800d5c2:	bf00      	nop
 800d5c4:	200189fc 	.word	0x200189fc
 800d5c8:	b29a      	uxth	r2, r3
 800d5ca:	4b28      	ldr	r3, [pc, #160]	; (800d66c <read_status_registers+0x6a8>)
 800d5cc:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

	fm25v02_read(2*ICCID_NUMBER_REG6, &status_reg_temp_h);
 800d5d0:	1dfb      	adds	r3, r7, #7
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	f242 00ba 	movw	r0, #8378	; 0x20ba
 800d5d8:	f7fe fa06 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG6+1, &status_reg_temp_l);
 800d5dc:	1dbb      	adds	r3, r7, #6
 800d5de:	4619      	mov	r1, r3
 800d5e0:	f242 00bb 	movw	r0, #8379	; 0x20bb
 800d5e4:	f7fe fa00 	bl	800b9e8 <fm25v02_read>
	status_registers.iccid_number_reg6 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	021b      	lsls	r3, r3, #8
 800d5ec:	b21a      	sxth	r2, r3
 800d5ee:	79bb      	ldrb	r3, [r7, #6]
 800d5f0:	b21b      	sxth	r3, r3
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	b21b      	sxth	r3, r3
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	4b1c      	ldr	r3, [pc, #112]	; (800d66c <read_status_registers+0x6a8>)
 800d5fa:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

	fm25v02_read(2*ICCID_NUMBER_REG7, &status_reg_temp_h);
 800d5fe:	1dfb      	adds	r3, r7, #7
 800d600:	4619      	mov	r1, r3
 800d602:	f242 00bc 	movw	r0, #8380	; 0x20bc
 800d606:	f7fe f9ef 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG7+1, &status_reg_temp_l);
 800d60a:	1dbb      	adds	r3, r7, #6
 800d60c:	4619      	mov	r1, r3
 800d60e:	f242 00bd 	movw	r0, #8381	; 0x20bd
 800d612:	f7fe f9e9 	bl	800b9e8 <fm25v02_read>
	status_registers.iccid_number_reg7 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d616:	79fb      	ldrb	r3, [r7, #7]
 800d618:	021b      	lsls	r3, r3, #8
 800d61a:	b21a      	sxth	r2, r3
 800d61c:	79bb      	ldrb	r3, [r7, #6]
 800d61e:	b21b      	sxth	r3, r3
 800d620:	4313      	orrs	r3, r2
 800d622:	b21b      	sxth	r3, r3
 800d624:	b29a      	uxth	r2, r3
 800d626:	4b11      	ldr	r3, [pc, #68]	; (800d66c <read_status_registers+0x6a8>)
 800d628:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	fm25v02_read(2*ICCID_NUMBER_REG8, &status_reg_temp_h);
 800d62c:	1dfb      	adds	r3, r7, #7
 800d62e:	4619      	mov	r1, r3
 800d630:	f242 00be 	movw	r0, #8382	; 0x20be
 800d634:	f7fe f9d8 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG8+1, &status_reg_temp_l);
 800d638:	1dbb      	adds	r3, r7, #6
 800d63a:	4619      	mov	r1, r3
 800d63c:	f242 00bf 	movw	r0, #8383	; 0x20bf
 800d640:	f7fe f9d2 	bl	800b9e8 <fm25v02_read>
	status_registers.iccid_number_reg8 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d644:	79fb      	ldrb	r3, [r7, #7]
 800d646:	021b      	lsls	r3, r3, #8
 800d648:	b21a      	sxth	r2, r3
 800d64a:	79bb      	ldrb	r3, [r7, #6]
 800d64c:	b21b      	sxth	r3, r3
 800d64e:	4313      	orrs	r3, r2
 800d650:	b21b      	sxth	r3, r3
 800d652:	b29a      	uxth	r2, r3
 800d654:	4b05      	ldr	r3, [pc, #20]	; (800d66c <read_status_registers+0x6a8>)
 800d656:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc

	osMutexRelease(Fm25v02MutexHandle);
 800d65a:	4b05      	ldr	r3, [pc, #20]	; (800d670 <read_status_registers+0x6ac>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4618      	mov	r0, r3
 800d660:	f7f8 ffca 	bl	80065f8 <osMutexRelease>
}
 800d664:	bf00      	nop
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	200189fc 	.word	0x200189fc
 800d670:	20016c3c 	.word	0x20016c3c

0800d674 <read_control_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти управляющих регистров--------------
void read_control_registers(void)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d67a:	4bbc      	ldr	r3, [pc, #752]	; (800d96c <read_control_registers+0x2f8>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f04f 31ff 	mov.w	r1, #4294967295
 800d682:	4618      	mov	r0, r3
 800d684:	f7f8 ff6a 	bl	800655c <osMutexWait>

	fm25v02_read(2*SECURITY_CONTROL_REG, &status_reg_temp_h);
 800d688:	1dfb      	adds	r3, r7, #7
 800d68a:	4619      	mov	r1, r3
 800d68c:	f242 1020 	movw	r0, #8480	; 0x2120
 800d690:	f7fe f9aa 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*SECURITY_CONTROL_REG+1, &status_reg_temp_l);
 800d694:	1dbb      	adds	r3, r7, #6
 800d696:	4619      	mov	r1, r3
 800d698:	f242 1021 	movw	r0, #8481	; 0x2121
 800d69c:	f7fe f9a4 	bl	800b9e8 <fm25v02_read>
	control_registers.security_control_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d6a0:	79fb      	ldrb	r3, [r7, #7]
 800d6a2:	021b      	lsls	r3, r3, #8
 800d6a4:	b21a      	sxth	r2, r3
 800d6a6:	79bb      	ldrb	r3, [r7, #6]
 800d6a8:	b21b      	sxth	r3, r3
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	b21b      	sxth	r3, r3
 800d6ae:	b29a      	uxth	r2, r3
 800d6b0:	4baf      	ldr	r3, [pc, #700]	; (800d970 <read_control_registers+0x2fc>)
 800d6b2:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*CONTROL_LOOP_REG, &status_reg_temp_h);
 800d6b4:	1dfb      	adds	r3, r7, #7
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	f242 1022 	movw	r0, #8482	; 0x2122
 800d6bc:	f7fe f994 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CONTROL_LOOP_REG+1, &status_reg_temp_l);
 800d6c0:	1dbb      	adds	r3, r7, #6
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	f242 1023 	movw	r0, #8483	; 0x2123
 800d6c8:	f7fe f98e 	bl	800b9e8 <fm25v02_read>
	control_registers.control_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d6cc:	79fb      	ldrb	r3, [r7, #7]
 800d6ce:	021b      	lsls	r3, r3, #8
 800d6d0:	b21a      	sxth	r2, r3
 800d6d2:	79bb      	ldrb	r3, [r7, #6]
 800d6d4:	b21b      	sxth	r3, r3
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	b21b      	sxth	r3, r3
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	4ba4      	ldr	r3, [pc, #656]	; (800d970 <read_control_registers+0x2fc>)
 800d6de:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*FILTER_TIME_LOOP_REG, &status_reg_temp_h);
 800d6e0:	1dfb      	adds	r3, r7, #7
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	f242 1024 	movw	r0, #8484	; 0x2124
 800d6e8:	f7fe f97e 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*FILTER_TIME_LOOP_REG+1, &status_reg_temp_l);
 800d6ec:	1dbb      	adds	r3, r7, #6
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	f242 1025 	movw	r0, #8485	; 0x2125
 800d6f4:	f7fe f978 	bl	800b9e8 <fm25v02_read>
	control_registers.filter_time_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d6f8:	79fb      	ldrb	r3, [r7, #7]
 800d6fa:	021b      	lsls	r3, r3, #8
 800d6fc:	b21a      	sxth	r2, r3
 800d6fe:	79bb      	ldrb	r3, [r7, #6]
 800d700:	b21b      	sxth	r3, r3
 800d702:	4313      	orrs	r3, r2
 800d704:	b21b      	sxth	r3, r3
 800d706:	b29a      	uxth	r2, r3
 800d708:	4b99      	ldr	r3, [pc, #612]	; (800d970 <read_control_registers+0x2fc>)
 800d70a:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG, &status_reg_temp_h);
 800d70c:	1dfb      	adds	r3, r7, #7
 800d70e:	4619      	mov	r1, r3
 800d710:	f242 1026 	movw	r0, #8486	; 0x2126
 800d714:	f7fe f968 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG+1, &status_reg_temp_l);
 800d718:	1dbb      	adds	r3, r7, #6
 800d71a:	4619      	mov	r1, r3
 800d71c:	f242 1027 	movw	r0, #8487	; 0x2127
 800d720:	f7fe f962 	bl	800b9e8 <fm25v02_read>
	control_registers.quantity_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d724:	79fb      	ldrb	r3, [r7, #7]
 800d726:	021b      	lsls	r3, r3, #8
 800d728:	b21a      	sxth	r2, r3
 800d72a:	79bb      	ldrb	r3, [r7, #6]
 800d72c:	b21b      	sxth	r3, r3
 800d72e:	4313      	orrs	r3, r2
 800d730:	b21b      	sxth	r3, r3
 800d732:	b29a      	uxth	r2, r3
 800d734:	4b8e      	ldr	r3, [pc, #568]	; (800d970 <read_control_registers+0x2fc>)
 800d736:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*TIME_FALSE_LOOP_REG, &status_reg_temp_h);
 800d738:	1dfb      	adds	r3, r7, #7
 800d73a:	4619      	mov	r1, r3
 800d73c:	f242 1028 	movw	r0, #8488	; 0x2128
 800d740:	f7fe f952 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_FALSE_LOOP_REG+1, &status_reg_temp_l);
 800d744:	1dbb      	adds	r3, r7, #6
 800d746:	4619      	mov	r1, r3
 800d748:	f242 1029 	movw	r0, #8489	; 0x2129
 800d74c:	f7fe f94c 	bl	800b9e8 <fm25v02_read>
	control_registers.time_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d750:	79fb      	ldrb	r3, [r7, #7]
 800d752:	021b      	lsls	r3, r3, #8
 800d754:	b21a      	sxth	r2, r3
 800d756:	79bb      	ldrb	r3, [r7, #6]
 800d758:	b21b      	sxth	r3, r3
 800d75a:	4313      	orrs	r3, r2
 800d75c:	b21b      	sxth	r3, r3
 800d75e:	b29a      	uxth	r2, r3
 800d760:	4b83      	ldr	r3, [pc, #524]	; (800d970 <read_control_registers+0x2fc>)
 800d762:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*ALARM_LOOP_CLEAR_REG, &status_reg_temp_h);
 800d764:	1dfb      	adds	r3, r7, #7
 800d766:	4619      	mov	r1, r3
 800d768:	f242 102a 	movw	r0, #8490	; 0x212a
 800d76c:	f7fe f93c 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 800d770:	1dbb      	adds	r3, r7, #6
 800d772:	4619      	mov	r1, r3
 800d774:	f242 102b 	movw	r0, #8491	; 0x212b
 800d778:	f7fe f936 	bl	800b9e8 <fm25v02_read>
	control_registers.alarm_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d77c:	79fb      	ldrb	r3, [r7, #7]
 800d77e:	021b      	lsls	r3, r3, #8
 800d780:	b21a      	sxth	r2, r3
 800d782:	79bb      	ldrb	r3, [r7, #6]
 800d784:	b21b      	sxth	r3, r3
 800d786:	4313      	orrs	r3, r2
 800d788:	b21b      	sxth	r3, r3
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	4b78      	ldr	r3, [pc, #480]	; (800d970 <read_control_registers+0x2fc>)
 800d78e:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*FALSE_LOOP_CLEAR_REG, &status_reg_temp_h);
 800d790:	1dfb      	adds	r3, r7, #7
 800d792:	4619      	mov	r1, r3
 800d794:	f242 102c 	movw	r0, #8492	; 0x212c
 800d798:	f7fe f926 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*FALSE_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 800d79c:	1dbb      	adds	r3, r7, #6
 800d79e:	4619      	mov	r1, r3
 800d7a0:	f242 102d 	movw	r0, #8493	; 0x212d
 800d7a4:	f7fe f920 	bl	800b9e8 <fm25v02_read>
	control_registers.false_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d7a8:	79fb      	ldrb	r3, [r7, #7]
 800d7aa:	021b      	lsls	r3, r3, #8
 800d7ac:	b21a      	sxth	r2, r3
 800d7ae:	79bb      	ldrb	r3, [r7, #6]
 800d7b0:	b21b      	sxth	r3, r3
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	b21b      	sxth	r3, r3
 800d7b6:	b29a      	uxth	r2, r3
 800d7b8:	4b6d      	ldr	r3, [pc, #436]	; (800d970 <read_control_registers+0x2fc>)
 800d7ba:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*SECURITY_TIME_MAX_REG, &status_reg_temp_h);
 800d7bc:	1dfb      	adds	r3, r7, #7
 800d7be:	4619      	mov	r1, r3
 800d7c0:	f242 102e 	movw	r0, #8494	; 0x212e
 800d7c4:	f7fe f910 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*SECURITY_TIME_MAX_REG+1, &status_reg_temp_l);
 800d7c8:	1dbb      	adds	r3, r7, #6
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	f242 102f 	movw	r0, #8495	; 0x212f
 800d7d0:	f7fe f90a 	bl	800b9e8 <fm25v02_read>
	control_registers.security_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d7d4:	79fb      	ldrb	r3, [r7, #7]
 800d7d6:	021b      	lsls	r3, r3, #8
 800d7d8:	b21a      	sxth	r2, r3
 800d7da:	79bb      	ldrb	r3, [r7, #6]
 800d7dc:	b21b      	sxth	r3, r3
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	b21b      	sxth	r3, r3
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	4b62      	ldr	r3, [pc, #392]	; (800d970 <read_control_registers+0x2fc>)
 800d7e6:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_UPDATE_REG, &status_reg_temp_h);
 800d7e8:	1dfb      	adds	r3, r7, #7
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	f242 1030 	movw	r0, #8496	; 0x2130
 800d7f0:	f7fe f8fa 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_UPDATE_REG+1, &status_reg_temp_l);
 800d7f4:	1dbb      	adds	r3, r7, #6
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	f242 1031 	movw	r0, #8497	; 0x2131
 800d7fc:	f7fe f8f4 	bl	800b9e8 <fm25v02_read>
	control_registers.time_update_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d800:	79fb      	ldrb	r3, [r7, #7]
 800d802:	021b      	lsls	r3, r3, #8
 800d804:	b21a      	sxth	r2, r3
 800d806:	79bb      	ldrb	r3, [r7, #6]
 800d808:	b21b      	sxth	r3, r3
 800d80a:	4313      	orrs	r3, r2
 800d80c:	b21b      	sxth	r3, r3
 800d80e:	b29a      	uxth	r2, r3
 800d810:	4b57      	ldr	r3, [pc, #348]	; (800d970 <read_control_registers+0x2fc>)
 800d812:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_YEAR_REG, &status_reg_temp_h);
 800d814:	1dfb      	adds	r3, r7, #7
 800d816:	4619      	mov	r1, r3
 800d818:	f242 1032 	movw	r0, #8498	; 0x2132
 800d81c:	f7fe f8e4 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_YEAR_REG+1, &status_reg_temp_l);
 800d820:	1dbb      	adds	r3, r7, #6
 800d822:	4619      	mov	r1, r3
 800d824:	f242 1033 	movw	r0, #8499	; 0x2133
 800d828:	f7fe f8de 	bl	800b9e8 <fm25v02_read>
	control_registers.time_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d82c:	79fb      	ldrb	r3, [r7, #7]
 800d82e:	021b      	lsls	r3, r3, #8
 800d830:	b21a      	sxth	r2, r3
 800d832:	79bb      	ldrb	r3, [r7, #6]
 800d834:	b21b      	sxth	r3, r3
 800d836:	4313      	orrs	r3, r2
 800d838:	b21b      	sxth	r3, r3
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	4b4c      	ldr	r3, [pc, #304]	; (800d970 <read_control_registers+0x2fc>)
 800d83e:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_MONTH_REG, &status_reg_temp_h);
 800d840:	1dfb      	adds	r3, r7, #7
 800d842:	4619      	mov	r1, r3
 800d844:	f242 1034 	movw	r0, #8500	; 0x2134
 800d848:	f7fe f8ce 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_MONTH_REG+1, &status_reg_temp_l);
 800d84c:	1dbb      	adds	r3, r7, #6
 800d84e:	4619      	mov	r1, r3
 800d850:	f242 1035 	movw	r0, #8501	; 0x2135
 800d854:	f7fe f8c8 	bl	800b9e8 <fm25v02_read>
	control_registers.time_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d858:	79fb      	ldrb	r3, [r7, #7]
 800d85a:	021b      	lsls	r3, r3, #8
 800d85c:	b21a      	sxth	r2, r3
 800d85e:	79bb      	ldrb	r3, [r7, #6]
 800d860:	b21b      	sxth	r3, r3
 800d862:	4313      	orrs	r3, r2
 800d864:	b21b      	sxth	r3, r3
 800d866:	b29a      	uxth	r2, r3
 800d868:	4b41      	ldr	r3, [pc, #260]	; (800d970 <read_control_registers+0x2fc>)
 800d86a:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_DAY_REG, &status_reg_temp_h);
 800d86c:	1dfb      	adds	r3, r7, #7
 800d86e:	4619      	mov	r1, r3
 800d870:	f242 1036 	movw	r0, #8502	; 0x2136
 800d874:	f7fe f8b8 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_DAY_REG+1, &status_reg_temp_l);
 800d878:	1dbb      	adds	r3, r7, #6
 800d87a:	4619      	mov	r1, r3
 800d87c:	f242 1037 	movw	r0, #8503	; 0x2137
 800d880:	f7fe f8b2 	bl	800b9e8 <fm25v02_read>
	control_registers.time_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d884:	79fb      	ldrb	r3, [r7, #7]
 800d886:	021b      	lsls	r3, r3, #8
 800d888:	b21a      	sxth	r2, r3
 800d88a:	79bb      	ldrb	r3, [r7, #6]
 800d88c:	b21b      	sxth	r3, r3
 800d88e:	4313      	orrs	r3, r2
 800d890:	b21b      	sxth	r3, r3
 800d892:	b29a      	uxth	r2, r3
 800d894:	4b36      	ldr	r3, [pc, #216]	; (800d970 <read_control_registers+0x2fc>)
 800d896:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*TIME_HOUR_REG, &status_reg_temp_h);
 800d898:	1dfb      	adds	r3, r7, #7
 800d89a:	4619      	mov	r1, r3
 800d89c:	f242 1038 	movw	r0, #8504	; 0x2138
 800d8a0:	f7fe f8a2 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_HOUR_REG+1, &status_reg_temp_l);
 800d8a4:	1dbb      	adds	r3, r7, #6
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	f242 1039 	movw	r0, #8505	; 0x2139
 800d8ac:	f7fe f89c 	bl	800b9e8 <fm25v02_read>
	control_registers.time_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d8b0:	79fb      	ldrb	r3, [r7, #7]
 800d8b2:	021b      	lsls	r3, r3, #8
 800d8b4:	b21a      	sxth	r2, r3
 800d8b6:	79bb      	ldrb	r3, [r7, #6]
 800d8b8:	b21b      	sxth	r3, r3
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	b21b      	sxth	r3, r3
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	4b2b      	ldr	r3, [pc, #172]	; (800d970 <read_control_registers+0x2fc>)
 800d8c2:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*TIME_MINUTE_REG, &status_reg_temp_h);
 800d8c4:	1dfb      	adds	r3, r7, #7
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	f242 103a 	movw	r0, #8506	; 0x213a
 800d8cc:	f7fe f88c 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_MINUTE_REG+1, &status_reg_temp_l);
 800d8d0:	1dbb      	adds	r3, r7, #6
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	f242 103b 	movw	r0, #8507	; 0x213b
 800d8d8:	f7fe f886 	bl	800b9e8 <fm25v02_read>
	control_registers.time_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d8dc:	79fb      	ldrb	r3, [r7, #7]
 800d8de:	021b      	lsls	r3, r3, #8
 800d8e0:	b21a      	sxth	r2, r3
 800d8e2:	79bb      	ldrb	r3, [r7, #6]
 800d8e4:	b21b      	sxth	r3, r3
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	b21b      	sxth	r3, r3
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	4b20      	ldr	r3, [pc, #128]	; (800d970 <read_control_registers+0x2fc>)
 800d8ee:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*TIME_SECONDS_REG, &status_reg_temp_h);
 800d8f0:	1dfb      	adds	r3, r7, #7
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	f242 103c 	movw	r0, #8508	; 0x213c
 800d8f8:	f7fe f876 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_SECONDS_REG+1, &status_reg_temp_l);
 800d8fc:	1dbb      	adds	r3, r7, #6
 800d8fe:	4619      	mov	r1, r3
 800d900:	f242 103d 	movw	r0, #8509	; 0x213d
 800d904:	f7fe f870 	bl	800b9e8 <fm25v02_read>
	control_registers.time_seconds_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d908:	79fb      	ldrb	r3, [r7, #7]
 800d90a:	021b      	lsls	r3, r3, #8
 800d90c:	b21a      	sxth	r2, r3
 800d90e:	79bb      	ldrb	r3, [r7, #6]
 800d910:	b21b      	sxth	r3, r3
 800d912:	4313      	orrs	r3, r2
 800d914:	b21b      	sxth	r3, r3
 800d916:	b29a      	uxth	r2, r3
 800d918:	4b15      	ldr	r3, [pc, #84]	; (800d970 <read_control_registers+0x2fc>)
 800d91a:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*TIME_WEEKDAY_REG, &status_reg_temp_h);
 800d91c:	1dfb      	adds	r3, r7, #7
 800d91e:	4619      	mov	r1, r3
 800d920:	f242 103e 	movw	r0, #8510	; 0x213e
 800d924:	f7fe f860 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_WEEKDAY_REG+1, &status_reg_temp_l);
 800d928:	1dbb      	adds	r3, r7, #6
 800d92a:	4619      	mov	r1, r3
 800d92c:	f242 103f 	movw	r0, #8511	; 0x213f
 800d930:	f7fe f85a 	bl	800b9e8 <fm25v02_read>
	control_registers.time_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d934:	79fb      	ldrb	r3, [r7, #7]
 800d936:	021b      	lsls	r3, r3, #8
 800d938:	b21a      	sxth	r2, r3
 800d93a:	79bb      	ldrb	r3, [r7, #6]
 800d93c:	b21b      	sxth	r3, r3
 800d93e:	4313      	orrs	r3, r2
 800d940:	b21b      	sxth	r3, r3
 800d942:	b29a      	uxth	r2, r3
 800d944:	4b0a      	ldr	r3, [pc, #40]	; (800d970 <read_control_registers+0x2fc>)
 800d946:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG, &status_reg_temp_h);
 800d948:	1dfb      	adds	r3, r7, #7
 800d94a:	4619      	mov	r1, r3
 800d94c:	f44f 5005 	mov.w	r0, #8512	; 0x2140
 800d950:	f7fe f84a 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG+1, &status_reg_temp_l);
 800d954:	1dbb      	adds	r3, r7, #6
 800d956:	4619      	mov	r1, r3
 800d958:	f242 1041 	movw	r0, #8513	; 0x2141
 800d95c:	f7fe f844 	bl	800b9e8 <fm25v02_read>
	control_registers.modbus_idle_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d960:	79fb      	ldrb	r3, [r7, #7]
 800d962:	021b      	lsls	r3, r3, #8
 800d964:	b21a      	sxth	r2, r3
 800d966:	79bb      	ldrb	r3, [r7, #6]
 800d968:	e004      	b.n	800d974 <read_control_registers+0x300>
 800d96a:	bf00      	nop
 800d96c:	20016c3c 	.word	0x20016c3c
 800d970:	20018abc 	.word	0x20018abc
 800d974:	b21b      	sxth	r3, r3
 800d976:	4313      	orrs	r3, r2
 800d978:	b21b      	sxth	r3, r3
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	4bbb      	ldr	r3, [pc, #748]	; (800dc6c <read_control_registers+0x5f8>)
 800d97e:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*TIME_CONNECTION_TEST_REG, &status_reg_temp_h);
 800d980:	1dfb      	adds	r3, r7, #7
 800d982:	4619      	mov	r1, r3
 800d984:	f242 1042 	movw	r0, #8514	; 0x2142
 800d988:	f7fe f82e 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*TIME_CONNECTION_TEST_REG+1, &status_reg_temp_l);
 800d98c:	1dbb      	adds	r3, r7, #6
 800d98e:	4619      	mov	r1, r3
 800d990:	f242 1043 	movw	r0, #8515	; 0x2143
 800d994:	f7fe f828 	bl	800b9e8 <fm25v02_read>
	control_registers.time_connection_test_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d998:	79fb      	ldrb	r3, [r7, #7]
 800d99a:	021b      	lsls	r3, r3, #8
 800d99c:	b21a      	sxth	r2, r3
 800d99e:	79bb      	ldrb	r3, [r7, #6]
 800d9a0:	b21b      	sxth	r3, r3
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	b21b      	sxth	r3, r3
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	4bb0      	ldr	r3, [pc, #704]	; (800dc6c <read_control_registers+0x5f8>)
 800d9aa:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*EVENT_READ_REG, &status_reg_temp_h);
 800d9ac:	1dfb      	adds	r3, r7, #7
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	f242 1044 	movw	r0, #8516	; 0x2144
 800d9b4:	f7fe f818 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*EVENT_READ_REG+1, &status_reg_temp_l);
 800d9b8:	1dbb      	adds	r3, r7, #6
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	f242 1045 	movw	r0, #8517	; 0x2145
 800d9c0:	f7fe f812 	bl	800b9e8 <fm25v02_read>
	control_registers.event_read_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d9c4:	79fb      	ldrb	r3, [r7, #7]
 800d9c6:	021b      	lsls	r3, r3, #8
 800d9c8:	b21a      	sxth	r2, r3
 800d9ca:	79bb      	ldrb	r3, [r7, #6]
 800d9cc:	b21b      	sxth	r3, r3
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	b21b      	sxth	r3, r3
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	4ba5      	ldr	r3, [pc, #660]	; (800dc6c <read_control_registers+0x5f8>)
 800d9d6:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG, &status_reg_temp_h);
 800d9d8:	1dfb      	adds	r3, r7, #7
 800d9da:	4619      	mov	r1, r3
 800d9dc:	f242 1046 	movw	r0, #8518	; 0x2146
 800d9e0:	f7fe f802 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG+1, &status_reg_temp_l);
 800d9e4:	1dbb      	adds	r3, r7, #6
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	f242 1047 	movw	r0, #8519	; 0x2147
 800d9ec:	f7fd fffc 	bl	800b9e8 <fm25v02_read>
	control_registers.event_address_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d9f0:	79fb      	ldrb	r3, [r7, #7]
 800d9f2:	021b      	lsls	r3, r3, #8
 800d9f4:	b21a      	sxth	r2, r3
 800d9f6:	79bb      	ldrb	r3, [r7, #6]
 800d9f8:	b21b      	sxth	r3, r3
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	b21b      	sxth	r3, r3
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	4b9a      	ldr	r3, [pc, #616]	; (800dc6c <read_control_registers+0x5f8>)
 800da02:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*EVENT_ADDRESS_LOW_REG, &status_reg_temp_h);
 800da04:	1dfb      	adds	r3, r7, #7
 800da06:	4619      	mov	r1, r3
 800da08:	f242 1048 	movw	r0, #8520	; 0x2148
 800da0c:	f7fd ffec 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_LOW_REG+1, &status_reg_temp_l);
 800da10:	1dbb      	adds	r3, r7, #6
 800da12:	4619      	mov	r1, r3
 800da14:	f242 1049 	movw	r0, #8521	; 0x2149
 800da18:	f7fd ffe6 	bl	800b9e8 <fm25v02_read>
	control_registers.event_address_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800da1c:	79fb      	ldrb	r3, [r7, #7]
 800da1e:	021b      	lsls	r3, r3, #8
 800da20:	b21a      	sxth	r2, r3
 800da22:	79bb      	ldrb	r3, [r7, #6]
 800da24:	b21b      	sxth	r3, r3
 800da26:	4313      	orrs	r3, r2
 800da28:	b21b      	sxth	r3, r3
 800da2a:	b29a      	uxth	r2, r3
 800da2c:	4b8f      	ldr	r3, [pc, #572]	; (800dc6c <read_control_registers+0x5f8>)
 800da2e:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG, &status_reg_temp_h);
 800da30:	1dfb      	adds	r3, r7, #7
 800da32:	4619      	mov	r1, r3
 800da34:	f242 104a 	movw	r0, #8522	; 0x214a
 800da38:	f7fd ffd6 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG+1, &status_reg_temp_l);
 800da3c:	1dbb      	adds	r3, r7, #6
 800da3e:	4619      	mov	r1, r3
 800da40:	f242 104b 	movw	r0, #8523	; 0x214b
 800da44:	f7fd ffd0 	bl	800b9e8 <fm25v02_read>
	control_registers.modem_ring_try_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800da48:	79fb      	ldrb	r3, [r7, #7]
 800da4a:	021b      	lsls	r3, r3, #8
 800da4c:	b21a      	sxth	r2, r3
 800da4e:	79bb      	ldrb	r3, [r7, #6]
 800da50:	b21b      	sxth	r3, r3
 800da52:	4313      	orrs	r3, r2
 800da54:	b21b      	sxth	r3, r3
 800da56:	b29a      	uxth	r2, r3
 800da58:	4b84      	ldr	r3, [pc, #528]	; (800dc6c <read_control_registers+0x5f8>)
 800da5a:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG, &status_reg_temp_h);
 800da5c:	1dfb      	adds	r3, r7, #7
 800da5e:	4619      	mov	r1, r3
 800da60:	f242 104c 	movw	r0, #8524	; 0x214c
 800da64:	f7fd ffc0 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG+1, &status_reg_temp_l);
 800da68:	1dbb      	adds	r3, r7, #6
 800da6a:	4619      	mov	r1, r3
 800da6c:	f242 104d 	movw	r0, #8525	; 0x214d
 800da70:	f7fd ffba 	bl	800b9e8 <fm25v02_read>
	control_registers.modem_ring_pause_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800da74:	79fb      	ldrb	r3, [r7, #7]
 800da76:	021b      	lsls	r3, r3, #8
 800da78:	b21a      	sxth	r2, r3
 800da7a:	79bb      	ldrb	r3, [r7, #6]
 800da7c:	b21b      	sxth	r3, r3
 800da7e:	4313      	orrs	r3, r2
 800da80:	b21b      	sxth	r3, r3
 800da82:	b29a      	uxth	r2, r3
 800da84:	4b79      	ldr	r3, [pc, #484]	; (800dc6c <read_control_registers+0x5f8>)
 800da86:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG, &status_reg_temp_h);
 800da88:	1dfb      	adds	r3, r7, #7
 800da8a:	4619      	mov	r1, r3
 800da8c:	f242 104e 	movw	r0, #8526	; 0x214e
 800da90:	f7fd ffaa 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG+1, &status_reg_temp_l);
 800da94:	1dbb      	adds	r3, r7, #6
 800da96:	4619      	mov	r1, r3
 800da98:	f242 104f 	movw	r0, #8527	; 0x214f
 800da9c:	f7fd ffa4 	bl	800b9e8 <fm25v02_read>
	control_registers.modem_ring_pause2_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800daa0:	79fb      	ldrb	r3, [r7, #7]
 800daa2:	021b      	lsls	r3, r3, #8
 800daa4:	b21a      	sxth	r2, r3
 800daa6:	79bb      	ldrb	r3, [r7, #6]
 800daa8:	b21b      	sxth	r3, r3
 800daaa:	4313      	orrs	r3, r2
 800daac:	b21b      	sxth	r3, r3
 800daae:	b29a      	uxth	r2, r3
 800dab0:	4b6e      	ldr	r3, [pc, #440]	; (800dc6c <read_control_registers+0x5f8>)
 800dab2:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*RING_MINUTE_TIME_REG, &status_reg_temp_h);
 800dab4:	1dfb      	adds	r3, r7, #7
 800dab6:	4619      	mov	r1, r3
 800dab8:	f242 1050 	movw	r0, #8528	; 0x2150
 800dabc:	f7fd ff94 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*RING_MINUTE_TIME_REG+1, &status_reg_temp_l);
 800dac0:	1dbb      	adds	r3, r7, #6
 800dac2:	4619      	mov	r1, r3
 800dac4:	f242 1051 	movw	r0, #8529	; 0x2151
 800dac8:	f7fd ff8e 	bl	800b9e8 <fm25v02_read>
	control_registers.ring_minute_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	021b      	lsls	r3, r3, #8
 800dad0:	b21a      	sxth	r2, r3
 800dad2:	79bb      	ldrb	r3, [r7, #6]
 800dad4:	b21b      	sxth	r3, r3
 800dad6:	4313      	orrs	r3, r2
 800dad8:	b21b      	sxth	r3, r3
 800dada:	b29a      	uxth	r2, r3
 800dadc:	4b63      	ldr	r3, [pc, #396]	; (800dc6c <read_control_registers+0x5f8>)
 800dade:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*RING_HOUR_TIME_REG, &status_reg_temp_h);
 800dae0:	1dfb      	adds	r3, r7, #7
 800dae2:	4619      	mov	r1, r3
 800dae4:	f242 1052 	movw	r0, #8530	; 0x2152
 800dae8:	f7fd ff7e 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*RING_HOUR_TIME_REG+1, &status_reg_temp_l);
 800daec:	1dbb      	adds	r3, r7, #6
 800daee:	4619      	mov	r1, r3
 800daf0:	f242 1053 	movw	r0, #8531	; 0x2153
 800daf4:	f7fd ff78 	bl	800b9e8 <fm25v02_read>
	control_registers.ring_hour_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800daf8:	79fb      	ldrb	r3, [r7, #7]
 800dafa:	021b      	lsls	r3, r3, #8
 800dafc:	b21a      	sxth	r2, r3
 800dafe:	79bb      	ldrb	r3, [r7, #6]
 800db00:	b21b      	sxth	r3, r3
 800db02:	4313      	orrs	r3, r2
 800db04:	b21b      	sxth	r3, r3
 800db06:	b29a      	uxth	r2, r3
 800db08:	4b58      	ldr	r3, [pc, #352]	; (800dc6c <read_control_registers+0x5f8>)
 800db0a:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*ID_HIGH_REG, &status_reg_temp_h);
 800db0c:	1dfb      	adds	r3, r7, #7
 800db0e:	4619      	mov	r1, r3
 800db10:	f242 1056 	movw	r0, #8534	; 0x2156
 800db14:	f7fd ff68 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ID_HIGH_REG+1, &status_reg_temp_l);
 800db18:	1dbb      	adds	r3, r7, #6
 800db1a:	4619      	mov	r1, r3
 800db1c:	f242 1057 	movw	r0, #8535	; 0x2157
 800db20:	f7fd ff62 	bl	800b9e8 <fm25v02_read>
	control_registers.id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800db24:	79fb      	ldrb	r3, [r7, #7]
 800db26:	021b      	lsls	r3, r3, #8
 800db28:	b21a      	sxth	r2, r3
 800db2a:	79bb      	ldrb	r3, [r7, #6]
 800db2c:	b21b      	sxth	r3, r3
 800db2e:	4313      	orrs	r3, r2
 800db30:	b21b      	sxth	r3, r3
 800db32:	b29a      	uxth	r2, r3
 800db34:	4b4d      	ldr	r3, [pc, #308]	; (800dc6c <read_control_registers+0x5f8>)
 800db36:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ID_LOW_REG, &status_reg_temp_h);
 800db38:	1dfb      	adds	r3, r7, #7
 800db3a:	4619      	mov	r1, r3
 800db3c:	f242 1058 	movw	r0, #8536	; 0x2158
 800db40:	f7fd ff52 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ID_LOW_REG+1, &status_reg_temp_l);
 800db44:	1dbb      	adds	r3, r7, #6
 800db46:	4619      	mov	r1, r3
 800db48:	f242 1059 	movw	r0, #8537	; 0x2159
 800db4c:	f7fd ff4c 	bl	800b9e8 <fm25v02_read>
	control_registers.id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800db50:	79fb      	ldrb	r3, [r7, #7]
 800db52:	021b      	lsls	r3, r3, #8
 800db54:	b21a      	sxth	r2, r3
 800db56:	79bb      	ldrb	r3, [r7, #6]
 800db58:	b21b      	sxth	r3, r3
 800db5a:	4313      	orrs	r3, r2
 800db5c:	b21b      	sxth	r3, r3
 800db5e:	b29a      	uxth	r2, r3
 800db60:	4b42      	ldr	r3, [pc, #264]	; (800dc6c <read_control_registers+0x5f8>)
 800db62:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*RESET_CONTROL_REG, &status_reg_temp_h);
 800db64:	1dfb      	adds	r3, r7, #7
 800db66:	4619      	mov	r1, r3
 800db68:	f242 105a 	movw	r0, #8538	; 0x215a
 800db6c:	f7fd ff3c 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*RESET_CONTROL_REG+1, &status_reg_temp_l);
 800db70:	1dbb      	adds	r3, r7, #6
 800db72:	4619      	mov	r1, r3
 800db74:	f242 105b 	movw	r0, #8539	; 0x215b
 800db78:	f7fd ff36 	bl	800b9e8 <fm25v02_read>
	control_registers.reset_control_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800db7c:	79fb      	ldrb	r3, [r7, #7]
 800db7e:	021b      	lsls	r3, r3, #8
 800db80:	b21a      	sxth	r2, r3
 800db82:	79bb      	ldrb	r3, [r7, #6]
 800db84:	b21b      	sxth	r3, r3
 800db86:	4313      	orrs	r3, r2
 800db88:	b21b      	sxth	r3, r3
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	4b37      	ldr	r3, [pc, #220]	; (800dc6c <read_control_registers+0x5f8>)
 800db8e:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*METER_POLLING_REG, &status_reg_temp_h);
 800db90:	1dfb      	adds	r3, r7, #7
 800db92:	4619      	mov	r1, r3
 800db94:	f242 105c 	movw	r0, #8540	; 0x215c
 800db98:	f7fd ff26 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*METER_POLLING_REG+1, &status_reg_temp_l);
 800db9c:	1dbb      	adds	r3, r7, #6
 800db9e:	4619      	mov	r1, r3
 800dba0:	f242 105d 	movw	r0, #8541	; 0x215d
 800dba4:	f7fd ff20 	bl	800b9e8 <fm25v02_read>
	control_registers.meter_polling_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800dba8:	79fb      	ldrb	r3, [r7, #7]
 800dbaa:	021b      	lsls	r3, r3, #8
 800dbac:	b21a      	sxth	r2, r3
 800dbae:	79bb      	ldrb	r3, [r7, #6]
 800dbb0:	b21b      	sxth	r3, r3
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	b21b      	sxth	r3, r3
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	4b2c      	ldr	r3, [pc, #176]	; (800dc6c <read_control_registers+0x5f8>)
 800dbba:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*IP_1_REG, &status_reg_temp_h);
 800dbbc:	1dfb      	adds	r3, r7, #7
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	f242 105e 	movw	r0, #8542	; 0x215e
 800dbc4:	f7fd ff10 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IP_1_REG+1, &status_reg_temp_l);
 800dbc8:	1dbb      	adds	r3, r7, #6
 800dbca:	4619      	mov	r1, r3
 800dbcc:	f242 105f 	movw	r0, #8543	; 0x215f
 800dbd0:	f7fd ff0a 	bl	800b9e8 <fm25v02_read>
	control_registers.ip1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800dbd4:	79fb      	ldrb	r3, [r7, #7]
 800dbd6:	021b      	lsls	r3, r3, #8
 800dbd8:	b21a      	sxth	r2, r3
 800dbda:	79bb      	ldrb	r3, [r7, #6]
 800dbdc:	b21b      	sxth	r3, r3
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	b21b      	sxth	r3, r3
 800dbe2:	b29a      	uxth	r2, r3
 800dbe4:	4b21      	ldr	r3, [pc, #132]	; (800dc6c <read_control_registers+0x5f8>)
 800dbe6:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*IP_2_REG, &status_reg_temp_h);
 800dbe8:	1dfb      	adds	r3, r7, #7
 800dbea:	4619      	mov	r1, r3
 800dbec:	f242 1060 	movw	r0, #8544	; 0x2160
 800dbf0:	f7fd fefa 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IP_2_REG+1, &status_reg_temp_l);
 800dbf4:	1dbb      	adds	r3, r7, #6
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	f242 1061 	movw	r0, #8545	; 0x2161
 800dbfc:	f7fd fef4 	bl	800b9e8 <fm25v02_read>
	control_registers.ip2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800dc00:	79fb      	ldrb	r3, [r7, #7]
 800dc02:	021b      	lsls	r3, r3, #8
 800dc04:	b21a      	sxth	r2, r3
 800dc06:	79bb      	ldrb	r3, [r7, #6]
 800dc08:	b21b      	sxth	r3, r3
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	b21b      	sxth	r3, r3
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	4b16      	ldr	r3, [pc, #88]	; (800dc6c <read_control_registers+0x5f8>)
 800dc12:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*IP_3_REG, &status_reg_temp_h);
 800dc14:	1dfb      	adds	r3, r7, #7
 800dc16:	4619      	mov	r1, r3
 800dc18:	f242 1062 	movw	r0, #8546	; 0x2162
 800dc1c:	f7fd fee4 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IP_3_REG+1, &status_reg_temp_l);
 800dc20:	1dbb      	adds	r3, r7, #6
 800dc22:	4619      	mov	r1, r3
 800dc24:	f242 1063 	movw	r0, #8547	; 0x2163
 800dc28:	f7fd fede 	bl	800b9e8 <fm25v02_read>
	control_registers.ip3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800dc2c:	79fb      	ldrb	r3, [r7, #7]
 800dc2e:	021b      	lsls	r3, r3, #8
 800dc30:	b21a      	sxth	r2, r3
 800dc32:	79bb      	ldrb	r3, [r7, #6]
 800dc34:	b21b      	sxth	r3, r3
 800dc36:	4313      	orrs	r3, r2
 800dc38:	b21b      	sxth	r3, r3
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	4b0b      	ldr	r3, [pc, #44]	; (800dc6c <read_control_registers+0x5f8>)
 800dc3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*IP_4_REG, &status_reg_temp_h);
 800dc42:	1dfb      	adds	r3, r7, #7
 800dc44:	4619      	mov	r1, r3
 800dc46:	f242 1064 	movw	r0, #8548	; 0x2164
 800dc4a:	f7fd fecd 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*IP_4_REG+1, &status_reg_temp_l);
 800dc4e:	1dbb      	adds	r3, r7, #6
 800dc50:	4619      	mov	r1, r3
 800dc52:	f242 1065 	movw	r0, #8549	; 0x2165
 800dc56:	f7fd fec7 	bl	800b9e8 <fm25v02_read>
	control_registers.ip4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800dc5a:	79fb      	ldrb	r3, [r7, #7]
 800dc5c:	021b      	lsls	r3, r3, #8
 800dc5e:	b21a      	sxth	r2, r3
 800dc60:	79bb      	ldrb	r3, [r7, #6]
 800dc62:	b21b      	sxth	r3, r3
 800dc64:	4313      	orrs	r3, r2
 800dc66:	b21b      	sxth	r3, r3
 800dc68:	e002      	b.n	800dc70 <read_control_registers+0x5fc>
 800dc6a:	bf00      	nop
 800dc6c:	20018abc 	.word	0x20018abc
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	4b3f      	ldr	r3, [pc, #252]	; (800dd70 <read_control_registers+0x6fc>)
 800dc74:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PORT_HIGH_REG, &status_reg_temp_h);
 800dc78:	1dfb      	adds	r3, r7, #7
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	f242 1066 	movw	r0, #8550	; 0x2166
 800dc80:	f7fd feb2 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PORT_HIGH_REG+1, &status_reg_temp_l);
 800dc84:	1dbb      	adds	r3, r7, #6
 800dc86:	4619      	mov	r1, r3
 800dc88:	f242 1067 	movw	r0, #8551	; 0x2167
 800dc8c:	f7fd feac 	bl	800b9e8 <fm25v02_read>
	control_registers.port_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800dc90:	79fb      	ldrb	r3, [r7, #7]
 800dc92:	021b      	lsls	r3, r3, #8
 800dc94:	b21a      	sxth	r2, r3
 800dc96:	79bb      	ldrb	r3, [r7, #6]
 800dc98:	b21b      	sxth	r3, r3
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	b21b      	sxth	r3, r3
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	4b33      	ldr	r3, [pc, #204]	; (800dd70 <read_control_registers+0x6fc>)
 800dca2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PORT_LOW_REG, &status_reg_temp_h);
 800dca6:	1dfb      	adds	r3, r7, #7
 800dca8:	4619      	mov	r1, r3
 800dcaa:	f242 1068 	movw	r0, #8552	; 0x2168
 800dcae:	f7fd fe9b 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PORT_LOW_REG+1, &status_reg_temp_l);
 800dcb2:	1dbb      	adds	r3, r7, #6
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	f242 1069 	movw	r0, #8553	; 0x2169
 800dcba:	f7fd fe95 	bl	800b9e8 <fm25v02_read>
	control_registers.port_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800dcbe:	79fb      	ldrb	r3, [r7, #7]
 800dcc0:	021b      	lsls	r3, r3, #8
 800dcc2:	b21a      	sxth	r2, r3
 800dcc4:	79bb      	ldrb	r3, [r7, #6]
 800dcc6:	b21b      	sxth	r3, r3
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	b21b      	sxth	r3, r3
 800dccc:	b29a      	uxth	r2, r3
 800dcce:	4b28      	ldr	r3, [pc, #160]	; (800dd70 <read_control_registers+0x6fc>)
 800dcd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*METER_ID_HIGH_REG, &status_reg_temp_h);
 800dcd4:	1dfb      	adds	r3, r7, #7
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	f242 106a 	movw	r0, #8554	; 0x216a
 800dcdc:	f7fd fe84 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*METER_ID_HIGH_REG+1, &status_reg_temp_l);
 800dce0:	1dbb      	adds	r3, r7, #6
 800dce2:	4619      	mov	r1, r3
 800dce4:	f242 106b 	movw	r0, #8555	; 0x216b
 800dce8:	f7fd fe7e 	bl	800b9e8 <fm25v02_read>
	control_registers.meter_id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800dcec:	79fb      	ldrb	r3, [r7, #7]
 800dcee:	021b      	lsls	r3, r3, #8
 800dcf0:	b21a      	sxth	r2, r3
 800dcf2:	79bb      	ldrb	r3, [r7, #6]
 800dcf4:	b21b      	sxth	r3, r3
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	b21b      	sxth	r3, r3
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	4b1c      	ldr	r3, [pc, #112]	; (800dd70 <read_control_registers+0x6fc>)
 800dcfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	fm25v02_read(2*METER_ID_LOW_REG, &status_reg_temp_h);
 800dd02:	1dfb      	adds	r3, r7, #7
 800dd04:	4619      	mov	r1, r3
 800dd06:	f242 106c 	movw	r0, #8556	; 0x216c
 800dd0a:	f7fd fe6d 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*METER_ID_LOW_REG+1, &status_reg_temp_l);
 800dd0e:	1dbb      	adds	r3, r7, #6
 800dd10:	4619      	mov	r1, r3
 800dd12:	f242 106d 	movw	r0, #8557	; 0x216d
 800dd16:	f7fd fe67 	bl	800b9e8 <fm25v02_read>
	control_registers.meter_id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800dd1a:	79fb      	ldrb	r3, [r7, #7]
 800dd1c:	021b      	lsls	r3, r3, #8
 800dd1e:	b21a      	sxth	r2, r3
 800dd20:	79bb      	ldrb	r3, [r7, #6]
 800dd22:	b21b      	sxth	r3, r3
 800dd24:	4313      	orrs	r3, r2
 800dd26:	b21b      	sxth	r3, r3
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	4b11      	ldr	r3, [pc, #68]	; (800dd70 <read_control_registers+0x6fc>)
 800dd2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	fm25v02_read(2*GPRS_CALL_REG, &status_reg_temp_h);
 800dd30:	1dfb      	adds	r3, r7, #7
 800dd32:	4619      	mov	r1, r3
 800dd34:	f242 106e 	movw	r0, #8558	; 0x216e
 800dd38:	f7fd fe56 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*GPRS_CALL_REG+1, &status_reg_temp_l);
 800dd3c:	1dbb      	adds	r3, r7, #6
 800dd3e:	4619      	mov	r1, r3
 800dd40:	f242 106f 	movw	r0, #8559	; 0x216f
 800dd44:	f7fd fe50 	bl	800b9e8 <fm25v02_read>
	control_registers.gprs_call_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800dd48:	79fb      	ldrb	r3, [r7, #7]
 800dd4a:	021b      	lsls	r3, r3, #8
 800dd4c:	b21a      	sxth	r2, r3
 800dd4e:	79bb      	ldrb	r3, [r7, #6]
 800dd50:	b21b      	sxth	r3, r3
 800dd52:	4313      	orrs	r3, r2
 800dd54:	b21b      	sxth	r3, r3
 800dd56:	b29a      	uxth	r2, r3
 800dd58:	4b05      	ldr	r3, [pc, #20]	; (800dd70 <read_control_registers+0x6fc>)
 800dd5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//fm25v02_read(2*ALARM_SWITCHING_REG, &status_reg_temp_h);
	//fm25v02_read(2*ALARM_SWITCHING_REG+1, &status_reg_temp_l);
	//control_registers.alarm_switching_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;

	osMutexRelease(Fm25v02MutexHandle);
 800dd5e:	4b05      	ldr	r3, [pc, #20]	; (800dd74 <read_control_registers+0x700>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7f8 fc48 	bl	80065f8 <osMutexRelease>

}
 800dd68:	bf00      	nop
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	20018abc 	.word	0x20018abc
 800dd74:	20016c3c 	.word	0x20016c3c

0800dd78 <read_bootloader_registers>:


//----Функция чтения из памяти регистров бутлоадера---------------

void read_bootloader_registers(void)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dd7e:	4bbc      	ldr	r3, [pc, #752]	; (800e070 <read_bootloader_registers+0x2f8>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f04f 31ff 	mov.w	r1, #4294967295
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7f8 fbe8 	bl	800655c <osMutexWait>

	fm25v02_read(2*BOOTLOADER_VERSION_REG, &status_reg_temp_h);
 800dd8c:	1dfb      	adds	r3, r7, #7
 800dd8e:	4619      	mov	r1, r3
 800dd90:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dd94:	f7fd fe28 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*BOOTLOADER_VERSION_REG+1, &status_reg_temp_l);
 800dd98:	1dbb      	adds	r3, r7, #6
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	f240 2001 	movw	r0, #513	; 0x201
 800dda0:	f7fd fe22 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.bootloader_version_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dda4:	79fb      	ldrb	r3, [r7, #7]
 800dda6:	021b      	lsls	r3, r3, #8
 800dda8:	b21a      	sxth	r2, r3
 800ddaa:	79bb      	ldrb	r3, [r7, #6]
 800ddac:	b21b      	sxth	r3, r3
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	b21b      	sxth	r3, r3
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	4baf      	ldr	r3, [pc, #700]	; (800e074 <read_bootloader_registers+0x2fc>)
 800ddb6:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800ddb8:	1dfb      	adds	r3, r7, #7
 800ddba:	4619      	mov	r1, r3
 800ddbc:	f44f 7001 	mov.w	r0, #516	; 0x204
 800ddc0:	f7fd fe12 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800ddc4:	1dbb      	adds	r3, r7, #6
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	f240 2005 	movw	r0, #517	; 0x205
 800ddcc:	f7fd fe0c 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.start_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ddd0:	79fb      	ldrb	r3, [r7, #7]
 800ddd2:	021b      	lsls	r3, r3, #8
 800ddd4:	b21a      	sxth	r2, r3
 800ddd6:	79bb      	ldrb	r3, [r7, #6]
 800ddd8:	b21b      	sxth	r3, r3
 800ddda:	4313      	orrs	r3, r2
 800dddc:	b21b      	sxth	r3, r3
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	4ba4      	ldr	r3, [pc, #656]	; (800e074 <read_bootloader_registers+0x2fc>)
 800dde2:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800dde4:	1dfb      	adds	r3, r7, #7
 800dde6:	4619      	mov	r1, r3
 800dde8:	f240 2006 	movw	r0, #518	; 0x206
 800ddec:	f7fd fdfc 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800ddf0:	1dbb      	adds	r3, r7, #6
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	f240 2007 	movw	r0, #519	; 0x207
 800ddf8:	f7fd fdf6 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.start_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ddfc:	79fb      	ldrb	r3, [r7, #7]
 800ddfe:	021b      	lsls	r3, r3, #8
 800de00:	b21a      	sxth	r2, r3
 800de02:	79bb      	ldrb	r3, [r7, #6]
 800de04:	b21b      	sxth	r3, r3
 800de06:	4313      	orrs	r3, r2
 800de08:	b21b      	sxth	r3, r3
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	4b99      	ldr	r3, [pc, #612]	; (800e074 <read_bootloader_registers+0x2fc>)
 800de0e:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800de10:	1dfb      	adds	r3, r7, #7
 800de12:	4619      	mov	r1, r3
 800de14:	f44f 7002 	mov.w	r0, #520	; 0x208
 800de18:	f7fd fde6 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800de1c:	1dbb      	adds	r3, r7, #6
 800de1e:	4619      	mov	r1, r3
 800de20:	f240 2009 	movw	r0, #521	; 0x209
 800de24:	f7fd fde0 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.start_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800de28:	79fb      	ldrb	r3, [r7, #7]
 800de2a:	021b      	lsls	r3, r3, #8
 800de2c:	b21a      	sxth	r2, r3
 800de2e:	79bb      	ldrb	r3, [r7, #6]
 800de30:	b21b      	sxth	r3, r3
 800de32:	4313      	orrs	r3, r2
 800de34:	b21b      	sxth	r3, r3
 800de36:	b29a      	uxth	r2, r3
 800de38:	4b8e      	ldr	r3, [pc, #568]	; (800e074 <read_bootloader_registers+0x2fc>)
 800de3a:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800de3c:	1dfb      	adds	r3, r7, #7
 800de3e:	4619      	mov	r1, r3
 800de40:	f240 200a 	movw	r0, #522	; 0x20a
 800de44:	f7fd fdd0 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800de48:	1dbb      	adds	r3, r7, #6
 800de4a:	4619      	mov	r1, r3
 800de4c:	f240 200b 	movw	r0, #523	; 0x20b
 800de50:	f7fd fdca 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.start_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800de54:	79fb      	ldrb	r3, [r7, #7]
 800de56:	021b      	lsls	r3, r3, #8
 800de58:	b21a      	sxth	r2, r3
 800de5a:	79bb      	ldrb	r3, [r7, #6]
 800de5c:	b21b      	sxth	r3, r3
 800de5e:	4313      	orrs	r3, r2
 800de60:	b21b      	sxth	r3, r3
 800de62:	b29a      	uxth	r2, r3
 800de64:	4b83      	ldr	r3, [pc, #524]	; (800e074 <read_bootloader_registers+0x2fc>)
 800de66:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800de68:	1dfb      	adds	r3, r7, #7
 800de6a:	4619      	mov	r1, r3
 800de6c:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800de70:	f7fd fdba 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800de74:	1dbb      	adds	r3, r7, #6
 800de76:	4619      	mov	r1, r3
 800de78:	f240 200d 	movw	r0, #525	; 0x20d
 800de7c:	f7fd fdb4 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.end_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800de80:	79fb      	ldrb	r3, [r7, #7]
 800de82:	021b      	lsls	r3, r3, #8
 800de84:	b21a      	sxth	r2, r3
 800de86:	79bb      	ldrb	r3, [r7, #6]
 800de88:	b21b      	sxth	r3, r3
 800de8a:	4313      	orrs	r3, r2
 800de8c:	b21b      	sxth	r3, r3
 800de8e:	b29a      	uxth	r2, r3
 800de90:	4b78      	ldr	r3, [pc, #480]	; (800e074 <read_bootloader_registers+0x2fc>)
 800de92:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800de94:	1dfb      	adds	r3, r7, #7
 800de96:	4619      	mov	r1, r3
 800de98:	f240 200e 	movw	r0, #526	; 0x20e
 800de9c:	f7fd fda4 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800dea0:	1dbb      	adds	r3, r7, #6
 800dea2:	4619      	mov	r1, r3
 800dea4:	f240 200f 	movw	r0, #527	; 0x20f
 800dea8:	f7fd fd9e 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.end_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800deac:	79fb      	ldrb	r3, [r7, #7]
 800deae:	021b      	lsls	r3, r3, #8
 800deb0:	b21a      	sxth	r2, r3
 800deb2:	79bb      	ldrb	r3, [r7, #6]
 800deb4:	b21b      	sxth	r3, r3
 800deb6:	4313      	orrs	r3, r2
 800deb8:	b21b      	sxth	r3, r3
 800deba:	b29a      	uxth	r2, r3
 800debc:	4b6d      	ldr	r3, [pc, #436]	; (800e074 <read_bootloader_registers+0x2fc>)
 800debe:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800dec0:	1dfb      	adds	r3, r7, #7
 800dec2:	4619      	mov	r1, r3
 800dec4:	f44f 7004 	mov.w	r0, #528	; 0x210
 800dec8:	f7fd fd8e 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800decc:	1dbb      	adds	r3, r7, #6
 800dece:	4619      	mov	r1, r3
 800ded0:	f240 2011 	movw	r0, #529	; 0x211
 800ded4:	f7fd fd88 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.crc_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ded8:	79fb      	ldrb	r3, [r7, #7]
 800deda:	021b      	lsls	r3, r3, #8
 800dedc:	b21a      	sxth	r2, r3
 800dede:	79bb      	ldrb	r3, [r7, #6]
 800dee0:	b21b      	sxth	r3, r3
 800dee2:	4313      	orrs	r3, r2
 800dee4:	b21b      	sxth	r3, r3
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	4b62      	ldr	r3, [pc, #392]	; (800e074 <read_bootloader_registers+0x2fc>)
 800deea:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CRC_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800deec:	1dfb      	adds	r3, r7, #7
 800deee:	4619      	mov	r1, r3
 800def0:	f240 2012 	movw	r0, #530	; 0x212
 800def4:	f7fd fd78 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800def8:	1dbb      	adds	r3, r7, #6
 800defa:	4619      	mov	r1, r3
 800defc:	f240 2013 	movw	r0, #531	; 0x213
 800df00:	f7fd fd72 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.crc_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800df04:	79fb      	ldrb	r3, [r7, #7]
 800df06:	021b      	lsls	r3, r3, #8
 800df08:	b21a      	sxth	r2, r3
 800df0a:	79bb      	ldrb	r3, [r7, #6]
 800df0c:	b21b      	sxth	r3, r3
 800df0e:	4313      	orrs	r3, r2
 800df10:	b21b      	sxth	r3, r3
 800df12:	b29a      	uxth	r2, r3
 800df14:	4b57      	ldr	r3, [pc, #348]	; (800e074 <read_bootloader_registers+0x2fc>)
 800df16:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*JUMP_VECTOR_HIGH_REG, &status_reg_temp_h);
 800df18:	1dfb      	adds	r3, r7, #7
 800df1a:	4619      	mov	r1, r3
 800df1c:	f44f 7005 	mov.w	r0, #532	; 0x214
 800df20:	f7fd fd62 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_HIGH_REG+1, &status_reg_temp_l);
 800df24:	1dbb      	adds	r3, r7, #6
 800df26:	4619      	mov	r1, r3
 800df28:	f240 2015 	movw	r0, #533	; 0x215
 800df2c:	f7fd fd5c 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.jump_vector_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800df30:	79fb      	ldrb	r3, [r7, #7]
 800df32:	021b      	lsls	r3, r3, #8
 800df34:	b21a      	sxth	r2, r3
 800df36:	79bb      	ldrb	r3, [r7, #6]
 800df38:	b21b      	sxth	r3, r3
 800df3a:	4313      	orrs	r3, r2
 800df3c:	b21b      	sxth	r3, r3
 800df3e:	b29a      	uxth	r2, r3
 800df40:	4b4c      	ldr	r3, [pc, #304]	; (800e074 <read_bootloader_registers+0x2fc>)
 800df42:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*JUMP_VECTOR_2_REG, &status_reg_temp_h);
 800df44:	1dfb      	adds	r3, r7, #7
 800df46:	4619      	mov	r1, r3
 800df48:	f240 2016 	movw	r0, #534	; 0x216
 800df4c:	f7fd fd4c 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_2_REG+1, &status_reg_temp_l);
 800df50:	1dbb      	adds	r3, r7, #6
 800df52:	4619      	mov	r1, r3
 800df54:	f240 2017 	movw	r0, #535	; 0x217
 800df58:	f7fd fd46 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.jump_vector_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800df5c:	79fb      	ldrb	r3, [r7, #7]
 800df5e:	021b      	lsls	r3, r3, #8
 800df60:	b21a      	sxth	r2, r3
 800df62:	79bb      	ldrb	r3, [r7, #6]
 800df64:	b21b      	sxth	r3, r3
 800df66:	4313      	orrs	r3, r2
 800df68:	b21b      	sxth	r3, r3
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	4b41      	ldr	r3, [pc, #260]	; (800e074 <read_bootloader_registers+0x2fc>)
 800df6e:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*JUMP_VECTOR_3_REG, &status_reg_temp_h);
 800df70:	1dfb      	adds	r3, r7, #7
 800df72:	4619      	mov	r1, r3
 800df74:	f44f 7006 	mov.w	r0, #536	; 0x218
 800df78:	f7fd fd36 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_3_REG+1, &status_reg_temp_l);
 800df7c:	1dbb      	adds	r3, r7, #6
 800df7e:	4619      	mov	r1, r3
 800df80:	f240 2019 	movw	r0, #537	; 0x219
 800df84:	f7fd fd30 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.jump_vector_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800df88:	79fb      	ldrb	r3, [r7, #7]
 800df8a:	021b      	lsls	r3, r3, #8
 800df8c:	b21a      	sxth	r2, r3
 800df8e:	79bb      	ldrb	r3, [r7, #6]
 800df90:	b21b      	sxth	r3, r3
 800df92:	4313      	orrs	r3, r2
 800df94:	b21b      	sxth	r3, r3
 800df96:	b29a      	uxth	r2, r3
 800df98:	4b36      	ldr	r3, [pc, #216]	; (800e074 <read_bootloader_registers+0x2fc>)
 800df9a:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*JUMP_VECTOR_LOW_REG, &status_reg_temp_h);
 800df9c:	1dfb      	adds	r3, r7, #7
 800df9e:	4619      	mov	r1, r3
 800dfa0:	f240 201a 	movw	r0, #538	; 0x21a
 800dfa4:	f7fd fd20 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_LOW_REG+1, &status_reg_temp_l);
 800dfa8:	1dbb      	adds	r3, r7, #6
 800dfaa:	4619      	mov	r1, r3
 800dfac:	f240 201b 	movw	r0, #539	; 0x21b
 800dfb0:	f7fd fd1a 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.jump_vector_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	021b      	lsls	r3, r3, #8
 800dfb8:	b21a      	sxth	r2, r3
 800dfba:	79bb      	ldrb	r3, [r7, #6]
 800dfbc:	b21b      	sxth	r3, r3
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	b21b      	sxth	r3, r3
 800dfc2:	b29a      	uxth	r2, r3
 800dfc4:	4b2b      	ldr	r3, [pc, #172]	; (800e074 <read_bootloader_registers+0x2fc>)
 800dfc6:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG, &status_reg_temp_h);
 800dfc8:	1dfb      	adds	r3, r7, #7
 800dfca:	4619      	mov	r1, r3
 800dfcc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dfd0:	f7fd fd0a 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG+1, &status_reg_temp_l);
 800dfd4:	1dbb      	adds	r3, r7, #6
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	f240 201d 	movw	r0, #541	; 0x21d
 800dfdc:	f7fd fd04 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.firmware_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dfe0:	79fb      	ldrb	r3, [r7, #7]
 800dfe2:	021b      	lsls	r3, r3, #8
 800dfe4:	b21a      	sxth	r2, r3
 800dfe6:	79bb      	ldrb	r3, [r7, #6]
 800dfe8:	b21b      	sxth	r3, r3
 800dfea:	4313      	orrs	r3, r2
 800dfec:	b21b      	sxth	r3, r3
 800dfee:	b29a      	uxth	r2, r3
 800dff0:	4b20      	ldr	r3, [pc, #128]	; (800e074 <read_bootloader_registers+0x2fc>)
 800dff2:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*WORKING_MODE_REG, &status_reg_temp_h);
 800dff4:	1dfb      	adds	r3, r7, #7
 800dff6:	4619      	mov	r1, r3
 800dff8:	f240 201e 	movw	r0, #542	; 0x21e
 800dffc:	f7fd fcf4 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*WORKING_MODE_REG+1, &status_reg_temp_l);
 800e000:	1dbb      	adds	r3, r7, #6
 800e002:	4619      	mov	r1, r3
 800e004:	f240 201f 	movw	r0, #543	; 0x21f
 800e008:	f7fd fcee 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.working_mode_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e00c:	79fb      	ldrb	r3, [r7, #7]
 800e00e:	021b      	lsls	r3, r3, #8
 800e010:	b21a      	sxth	r2, r3
 800e012:	79bb      	ldrb	r3, [r7, #6]
 800e014:	b21b      	sxth	r3, r3
 800e016:	4313      	orrs	r3, r2
 800e018:	b21b      	sxth	r3, r3
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	4b15      	ldr	r3, [pc, #84]	; (800e074 <read_bootloader_registers+0x2fc>)
 800e01e:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*READY_DOWNLOAD_REG, &status_reg_temp_h);
 800e020:	1dfb      	adds	r3, r7, #7
 800e022:	4619      	mov	r1, r3
 800e024:	f44f 7008 	mov.w	r0, #544	; 0x220
 800e028:	f7fd fcde 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*READY_DOWNLOAD_REG+1, &status_reg_temp_l);
 800e02c:	1dbb      	adds	r3, r7, #6
 800e02e:	4619      	mov	r1, r3
 800e030:	f240 2021 	movw	r0, #545	; 0x221
 800e034:	f7fd fcd8 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.ready_download_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e038:	79fb      	ldrb	r3, [r7, #7]
 800e03a:	021b      	lsls	r3, r3, #8
 800e03c:	b21a      	sxth	r2, r3
 800e03e:	79bb      	ldrb	r3, [r7, #6]
 800e040:	b21b      	sxth	r3, r3
 800e042:	4313      	orrs	r3, r2
 800e044:	b21b      	sxth	r3, r3
 800e046:	b29a      	uxth	r2, r3
 800e048:	4b0a      	ldr	r3, [pc, #40]	; (800e074 <read_bootloader_registers+0x2fc>)
 800e04a:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG, &status_reg_temp_h);
 800e04c:	1dfb      	adds	r3, r7, #7
 800e04e:	4619      	mov	r1, r3
 800e050:	f240 2022 	movw	r0, #546	; 0x222
 800e054:	f7fd fcc8 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG+1, &status_reg_temp_l);
 800e058:	1dbb      	adds	r3, r7, #6
 800e05a:	4619      	mov	r1, r3
 800e05c:	f240 2023 	movw	r0, #547	; 0x223
 800e060:	f7fd fcc2 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.download_timeout_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e064:	79fb      	ldrb	r3, [r7, #7]
 800e066:	021b      	lsls	r3, r3, #8
 800e068:	b21a      	sxth	r2, r3
 800e06a:	79bb      	ldrb	r3, [r7, #6]
 800e06c:	e004      	b.n	800e078 <read_bootloader_registers+0x300>
 800e06e:	bf00      	nop
 800e070:	20016c3c 	.word	0x20016c3c
 800e074:	20018990 	.word	0x20018990
 800e078:	b21b      	sxth	r3, r3
 800e07a:	4313      	orrs	r3, r2
 800e07c:	b21b      	sxth	r3, r3
 800e07e:	b29a      	uxth	r2, r3
 800e080:	4bbb      	ldr	r3, [pc, #748]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e082:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800e084:	1dfb      	adds	r3, r7, #7
 800e086:	4619      	mov	r1, r3
 800e088:	f44f 7009 	mov.w	r0, #548	; 0x224
 800e08c:	f7fd fcac 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800e090:	1dbb      	adds	r3, r7, #6
 800e092:	4619      	mov	r1, r3
 800e094:	f240 2025 	movw	r0, #549	; 0x225
 800e098:	f7fd fca6 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e09c:	79fb      	ldrb	r3, [r7, #7]
 800e09e:	021b      	lsls	r3, r3, #8
 800e0a0:	b21a      	sxth	r2, r3
 800e0a2:	79bb      	ldrb	r3, [r7, #6]
 800e0a4:	b21b      	sxth	r3, r3
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	b21b      	sxth	r3, r3
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	4bb0      	ldr	r3, [pc, #704]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e0ae:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800e0b0:	1dfb      	adds	r3, r7, #7
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	f240 2026 	movw	r0, #550	; 0x226
 800e0b8:	f7fd fc96 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800e0bc:	1dbb      	adds	r3, r7, #6
 800e0be:	4619      	mov	r1, r3
 800e0c0:	f240 2027 	movw	r0, #551	; 0x227
 800e0c4:	f7fd fc90 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.max_jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e0c8:	79fb      	ldrb	r3, [r7, #7]
 800e0ca:	021b      	lsls	r3, r3, #8
 800e0cc:	b21a      	sxth	r2, r3
 800e0ce:	79bb      	ldrb	r3, [r7, #6]
 800e0d0:	b21b      	sxth	r3, r3
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	b21b      	sxth	r3, r3
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	4ba5      	ldr	r3, [pc, #660]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e0da:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800e0dc:	1dfb      	adds	r3, r7, #7
 800e0de:	4619      	mov	r1, r3
 800e0e0:	f44f 700a 	mov.w	r0, #552	; 0x228
 800e0e4:	f7fd fc80 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800e0e8:	1dbb      	adds	r3, r7, #6
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	f240 2029 	movw	r0, #553	; 0x229
 800e0f0:	f7fd fc7a 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.end_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	021b      	lsls	r3, r3, #8
 800e0f8:	b21a      	sxth	r2, r3
 800e0fa:	79bb      	ldrb	r3, [r7, #6]
 800e0fc:	b21b      	sxth	r3, r3
 800e0fe:	4313      	orrs	r3, r2
 800e100:	b21b      	sxth	r3, r3
 800e102:	b29a      	uxth	r2, r3
 800e104:	4b9a      	ldr	r3, [pc, #616]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e106:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800e108:	1dfb      	adds	r3, r7, #7
 800e10a:	4619      	mov	r1, r3
 800e10c:	f240 202a 	movw	r0, #554	; 0x22a
 800e110:	f7fd fc6a 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800e114:	1dbb      	adds	r3, r7, #6
 800e116:	4619      	mov	r1, r3
 800e118:	f240 202b 	movw	r0, #555	; 0x22b
 800e11c:	f7fd fc64 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.end_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e120:	79fb      	ldrb	r3, [r7, #7]
 800e122:	021b      	lsls	r3, r3, #8
 800e124:	b21a      	sxth	r2, r3
 800e126:	79bb      	ldrb	r3, [r7, #6]
 800e128:	b21b      	sxth	r3, r3
 800e12a:	4313      	orrs	r3, r2
 800e12c:	b21b      	sxth	r3, r3
 800e12e:	b29a      	uxth	r2, r3
 800e130:	4b8f      	ldr	r3, [pc, #572]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e132:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 800e134:	1dfb      	adds	r3, r7, #7
 800e136:	4619      	mov	r1, r3
 800e138:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800e13c:	f7fd fc54 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 800e140:	1dbb      	adds	r3, r7, #6
 800e142:	4619      	mov	r1, r3
 800e144:	f240 202d 	movw	r0, #557	; 0x22d
 800e148:	f7fd fc4e 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e14c:	79fb      	ldrb	r3, [r7, #7]
 800e14e:	021b      	lsls	r3, r3, #8
 800e150:	b21a      	sxth	r2, r3
 800e152:	79bb      	ldrb	r3, [r7, #6]
 800e154:	b21b      	sxth	r3, r3
 800e156:	4313      	orrs	r3, r2
 800e158:	b21b      	sxth	r3, r3
 800e15a:	b29a      	uxth	r2, r3
 800e15c:	4b84      	ldr	r3, [pc, #528]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e15e:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 800e160:	1dfb      	adds	r3, r7, #7
 800e162:	4619      	mov	r1, r3
 800e164:	f240 202e 	movw	r0, #558	; 0x22e
 800e168:	f7fd fc3e 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 800e16c:	1dbb      	adds	r3, r7, #6
 800e16e:	4619      	mov	r1, r3
 800e170:	f240 202f 	movw	r0, #559	; 0x22f
 800e174:	f7fd fc38 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e178:	79fb      	ldrb	r3, [r7, #7]
 800e17a:	021b      	lsls	r3, r3, #8
 800e17c:	b21a      	sxth	r2, r3
 800e17e:	79bb      	ldrb	r3, [r7, #6]
 800e180:	b21b      	sxth	r3, r3
 800e182:	4313      	orrs	r3, r2
 800e184:	b21b      	sxth	r3, r3
 800e186:	b29a      	uxth	r2, r3
 800e188:	4b79      	ldr	r3, [pc, #484]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e18a:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &status_reg_temp_h);
 800e18c:	1dfb      	adds	r3, r7, #7
 800e18e:	4619      	mov	r1, r3
 800e190:	f240 203e 	movw	r0, #574	; 0x23e
 800e194:	f7fd fc28 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &status_reg_temp_l);
 800e198:	1dbb      	adds	r3, r7, #6
 800e19a:	4619      	mov	r1, r3
 800e19c:	f240 203f 	movw	r0, #575	; 0x23f
 800e1a0:	f7fd fc22 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.clear_page_number_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e1a4:	79fb      	ldrb	r3, [r7, #7]
 800e1a6:	021b      	lsls	r3, r3, #8
 800e1a8:	b21a      	sxth	r2, r3
 800e1aa:	79bb      	ldrb	r3, [r7, #6]
 800e1ac:	b21b      	sxth	r3, r3
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	b21b      	sxth	r3, r3
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	4b6e      	ldr	r3, [pc, #440]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e1b6:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &status_reg_temp_h);
 800e1b8:	1dfb      	adds	r3, r7, #7
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	f44f 7010 	mov.w	r0, #576	; 0x240
 800e1c0:	f7fd fc12 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &status_reg_temp_l);
 800e1c4:	1dbb      	adds	r3, r7, #6
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	f240 2041 	movw	r0, #577	; 0x241
 800e1cc:	f7fd fc0c 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.clear_page_on_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e1d0:	79fb      	ldrb	r3, [r7, #7]
 800e1d2:	021b      	lsls	r3, r3, #8
 800e1d4:	b21a      	sxth	r2, r3
 800e1d6:	79bb      	ldrb	r3, [r7, #6]
 800e1d8:	b21b      	sxth	r3, r3
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	b21b      	sxth	r3, r3
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	4b63      	ldr	r3, [pc, #396]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e1e2:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &status_reg_temp_h);
 800e1e4:	1dfb      	adds	r3, r7, #7
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	f240 2042 	movw	r0, #578	; 0x242
 800e1ec:	f7fd fbfc 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &status_reg_temp_l);
 800e1f0:	1dbb      	adds	r3, r7, #6
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	f240 2043 	movw	r0, #579	; 0x243
 800e1f8:	f7fd fbf6 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.write_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e1fc:	79fb      	ldrb	r3, [r7, #7]
 800e1fe:	021b      	lsls	r3, r3, #8
 800e200:	b21a      	sxth	r2, r3
 800e202:	79bb      	ldrb	r3, [r7, #6]
 800e204:	b21b      	sxth	r3, r3
 800e206:	4313      	orrs	r3, r2
 800e208:	b21b      	sxth	r3, r3
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	4b58      	ldr	r3, [pc, #352]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e20e:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &status_reg_temp_h);
 800e210:	1dfb      	adds	r3, r7, #7
 800e212:	4619      	mov	r1, r3
 800e214:	f44f 7011 	mov.w	r0, #580	; 0x244
 800e218:	f7fd fbe6 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &status_reg_temp_l);
 800e21c:	1dbb      	adds	r3, r7, #6
 800e21e:	4619      	mov	r1, r3
 800e220:	f240 2045 	movw	r0, #581	; 0x245
 800e224:	f7fd fbe0 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.read_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e228:	79fb      	ldrb	r3, [r7, #7]
 800e22a:	021b      	lsls	r3, r3, #8
 800e22c:	b21a      	sxth	r2, r3
 800e22e:	79bb      	ldrb	r3, [r7, #6]
 800e230:	b21b      	sxth	r3, r3
 800e232:	4313      	orrs	r3, r2
 800e234:	b21b      	sxth	r3, r3
 800e236:	b29a      	uxth	r2, r3
 800e238:	4b4d      	ldr	r3, [pc, #308]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e23a:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &status_reg_temp_h);
 800e23c:	1dfb      	adds	r3, r7, #7
 800e23e:	4619      	mov	r1, r3
 800e240:	f240 2046 	movw	r0, #582	; 0x246
 800e244:	f7fd fbd0 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &status_reg_temp_l);
 800e248:	1dbb      	adds	r3, r7, #6
 800e24a:	4619      	mov	r1, r3
 800e24c:	f240 2047 	movw	r0, #583	; 0x247
 800e250:	f7fd fbca 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.address_to_write_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e254:	79fb      	ldrb	r3, [r7, #7]
 800e256:	021b      	lsls	r3, r3, #8
 800e258:	b21a      	sxth	r2, r3
 800e25a:	79bb      	ldrb	r3, [r7, #6]
 800e25c:	b21b      	sxth	r3, r3
 800e25e:	4313      	orrs	r3, r2
 800e260:	b21b      	sxth	r3, r3
 800e262:	b29a      	uxth	r2, r3
 800e264:	4b42      	ldr	r3, [pc, #264]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e266:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &status_reg_temp_h);
 800e268:	1dfb      	adds	r3, r7, #7
 800e26a:	4619      	mov	r1, r3
 800e26c:	f44f 7012 	mov.w	r0, #584	; 0x248
 800e270:	f7fd fbba 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &status_reg_temp_l);
 800e274:	1dbb      	adds	r3, r7, #6
 800e276:	4619      	mov	r1, r3
 800e278:	f240 2049 	movw	r0, #585	; 0x249
 800e27c:	f7fd fbb4 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.address_to_write_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e280:	79fb      	ldrb	r3, [r7, #7]
 800e282:	021b      	lsls	r3, r3, #8
 800e284:	b21a      	sxth	r2, r3
 800e286:	79bb      	ldrb	r3, [r7, #6]
 800e288:	b21b      	sxth	r3, r3
 800e28a:	4313      	orrs	r3, r2
 800e28c:	b21b      	sxth	r3, r3
 800e28e:	b29a      	uxth	r2, r3
 800e290:	4b37      	ldr	r3, [pc, #220]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e292:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*BYTE_QUANTITY_REG, &status_reg_temp_h);
 800e294:	1dfb      	adds	r3, r7, #7
 800e296:	4619      	mov	r1, r3
 800e298:	f240 204a 	movw	r0, #586	; 0x24a
 800e29c:	f7fd fba4 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*BYTE_QUANTITY_REG+1, &status_reg_temp_l);
 800e2a0:	1dbb      	adds	r3, r7, #6
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	f240 204b 	movw	r0, #587	; 0x24b
 800e2a8:	f7fd fb9e 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.byte_quantity_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e2ac:	79fb      	ldrb	r3, [r7, #7]
 800e2ae:	021b      	lsls	r3, r3, #8
 800e2b0:	b21a      	sxth	r2, r3
 800e2b2:	79bb      	ldrb	r3, [r7, #6]
 800e2b4:	b21b      	sxth	r3, r3
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	b21b      	sxth	r3, r3
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	4b2c      	ldr	r3, [pc, #176]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e2be:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*PACKET_CRC_HIGH_REG, &status_reg_temp_h);
 800e2c0:	1dfb      	adds	r3, r7, #7
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800e2c8:	f7fd fb8e 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &status_reg_temp_l);
 800e2cc:	1dbb      	adds	r3, r7, #6
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	f240 204d 	movw	r0, #589	; 0x24d
 800e2d4:	f7fd fb88 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e2d8:	79fb      	ldrb	r3, [r7, #7]
 800e2da:	021b      	lsls	r3, r3, #8
 800e2dc:	b21a      	sxth	r2, r3
 800e2de:	79bb      	ldrb	r3, [r7, #6]
 800e2e0:	b21b      	sxth	r3, r3
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	b21b      	sxth	r3, r3
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	4b21      	ldr	r3, [pc, #132]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e2ea:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*PACKET_CRC_LOW_REG, &status_reg_temp_h);
 800e2ec:	1dfb      	adds	r3, r7, #7
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	f240 204e 	movw	r0, #590	; 0x24e
 800e2f4:	f7fd fb78 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_LOW_REG+1, &status_reg_temp_l);
 800e2f8:	1dbb      	adds	r3, r7, #6
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	f240 204f 	movw	r0, #591	; 0x24f
 800e300:	f7fd fb72 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e304:	79fb      	ldrb	r3, [r7, #7]
 800e306:	021b      	lsls	r3, r3, #8
 800e308:	b21a      	sxth	r2, r3
 800e30a:	79bb      	ldrb	r3, [r7, #6]
 800e30c:	b21b      	sxth	r3, r3
 800e30e:	4313      	orrs	r3, r2
 800e310:	b21b      	sxth	r3, r3
 800e312:	b29a      	uxth	r2, r3
 800e314:	4b16      	ldr	r3, [pc, #88]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e316:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*PACKET_DATA_0_REG, &status_reg_temp_h);
 800e318:	1dfb      	adds	r3, r7, #7
 800e31a:	4619      	mov	r1, r3
 800e31c:	f44f 7014 	mov.w	r0, #592	; 0x250
 800e320:	f7fd fb62 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_0_REG+1, &status_reg_temp_l);
 800e324:	1dbb      	adds	r3, r7, #6
 800e326:	4619      	mov	r1, r3
 800e328:	f240 2051 	movw	r0, #593	; 0x251
 800e32c:	f7fd fb5c 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_data_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	021b      	lsls	r3, r3, #8
 800e334:	b21a      	sxth	r2, r3
 800e336:	79bb      	ldrb	r3, [r7, #6]
 800e338:	b21b      	sxth	r3, r3
 800e33a:	4313      	orrs	r3, r2
 800e33c:	b21b      	sxth	r3, r3
 800e33e:	b29a      	uxth	r2, r3
 800e340:	4b0b      	ldr	r3, [pc, #44]	; (800e370 <read_bootloader_registers+0x5f8>)
 800e342:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*PACKET_DATA_1_REG, &status_reg_temp_h);
 800e346:	1dfb      	adds	r3, r7, #7
 800e348:	4619      	mov	r1, r3
 800e34a:	f240 2052 	movw	r0, #594	; 0x252
 800e34e:	f7fd fb4b 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_1_REG+1, &status_reg_temp_l);
 800e352:	1dbb      	adds	r3, r7, #6
 800e354:	4619      	mov	r1, r3
 800e356:	f240 2053 	movw	r0, #595	; 0x253
 800e35a:	f7fd fb45 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_data_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e35e:	79fb      	ldrb	r3, [r7, #7]
 800e360:	021b      	lsls	r3, r3, #8
 800e362:	b21a      	sxth	r2, r3
 800e364:	79bb      	ldrb	r3, [r7, #6]
 800e366:	b21b      	sxth	r3, r3
 800e368:	4313      	orrs	r3, r2
 800e36a:	b21b      	sxth	r3, r3
 800e36c:	e002      	b.n	800e374 <read_bootloader_registers+0x5fc>
 800e36e:	bf00      	nop
 800e370:	20018990 	.word	0x20018990
 800e374:	b29a      	uxth	r2, r3
 800e376:	4b28      	ldr	r3, [pc, #160]	; (800e418 <read_bootloader_registers+0x6a0>)
 800e378:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PACKET_DATA_2_REG, &status_reg_temp_h);
 800e37c:	1dfb      	adds	r3, r7, #7
 800e37e:	4619      	mov	r1, r3
 800e380:	f44f 7015 	mov.w	r0, #596	; 0x254
 800e384:	f7fd fb30 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_2_REG+1, &status_reg_temp_l);
 800e388:	1dbb      	adds	r3, r7, #6
 800e38a:	4619      	mov	r1, r3
 800e38c:	f240 2055 	movw	r0, #597	; 0x255
 800e390:	f7fd fb2a 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_data_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e394:	79fb      	ldrb	r3, [r7, #7]
 800e396:	021b      	lsls	r3, r3, #8
 800e398:	b21a      	sxth	r2, r3
 800e39a:	79bb      	ldrb	r3, [r7, #6]
 800e39c:	b21b      	sxth	r3, r3
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	b21b      	sxth	r3, r3
 800e3a2:	b29a      	uxth	r2, r3
 800e3a4:	4b1c      	ldr	r3, [pc, #112]	; (800e418 <read_bootloader_registers+0x6a0>)
 800e3a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PACKET_DATA_3_REG, &status_reg_temp_h);
 800e3aa:	1dfb      	adds	r3, r7, #7
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	f240 2056 	movw	r0, #598	; 0x256
 800e3b2:	f7fd fb19 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_3_REG+1, &status_reg_temp_l);
 800e3b6:	1dbb      	adds	r3, r7, #6
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	f240 2057 	movw	r0, #599	; 0x257
 800e3be:	f7fd fb13 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_data_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e3c2:	79fb      	ldrb	r3, [r7, #7]
 800e3c4:	021b      	lsls	r3, r3, #8
 800e3c6:	b21a      	sxth	r2, r3
 800e3c8:	79bb      	ldrb	r3, [r7, #6]
 800e3ca:	b21b      	sxth	r3, r3
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	b21b      	sxth	r3, r3
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	4b11      	ldr	r3, [pc, #68]	; (800e418 <read_bootloader_registers+0x6a0>)
 800e3d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*PACKET_DATA_4_REG, &status_reg_temp_h);
 800e3d8:	1dfb      	adds	r3, r7, #7
 800e3da:	4619      	mov	r1, r3
 800e3dc:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e3e0:	f7fd fb02 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_4_REG+1, &status_reg_temp_l);
 800e3e4:	1dbb      	adds	r3, r7, #6
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	f240 2059 	movw	r0, #601	; 0x259
 800e3ec:	f7fd fafc 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_data_4_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e3f0:	79fb      	ldrb	r3, [r7, #7]
 800e3f2:	021b      	lsls	r3, r3, #8
 800e3f4:	b21a      	sxth	r2, r3
 800e3f6:	79bb      	ldrb	r3, [r7, #6]
 800e3f8:	b21b      	sxth	r3, r3
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	b21b      	sxth	r3, r3
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	4b05      	ldr	r3, [pc, #20]	; (800e418 <read_bootloader_registers+0x6a0>)
 800e402:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	osMutexRelease(Fm25v02MutexHandle);
 800e406:	4b05      	ldr	r3, [pc, #20]	; (800e41c <read_bootloader_registers+0x6a4>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7f8 f8f4 	bl	80065f8 <osMutexRelease>

}
 800e410:	bf00      	nop
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	20018990 	.word	0x20018990
 800e41c:	20016c3c 	.word	0x20016c3c

0800e420 <read_bootloader_registers_no_rtos>:
//----------------------------------------------------------------

//----Функция чтения из памяти регистров бутлоадера без запуска операционной системы---------------

void read_bootloader_registers_no_rtos(void)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	fm25v02_read(2*BOOTLOADER_VERSION_REG, &status_reg_temp_h);
 800e426:	1dfb      	adds	r3, r7, #7
 800e428:	4619      	mov	r1, r3
 800e42a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e42e:	f7fd fadb 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*BOOTLOADER_VERSION_REG+1, &status_reg_temp_l);
 800e432:	1dbb      	adds	r3, r7, #6
 800e434:	4619      	mov	r1, r3
 800e436:	f240 2001 	movw	r0, #513	; 0x201
 800e43a:	f7fd fad5 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.bootloader_version_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e43e:	79fb      	ldrb	r3, [r7, #7]
 800e440:	021b      	lsls	r3, r3, #8
 800e442:	b21a      	sxth	r2, r3
 800e444:	79bb      	ldrb	r3, [r7, #6]
 800e446:	b21b      	sxth	r3, r3
 800e448:	4313      	orrs	r3, r2
 800e44a:	b21b      	sxth	r3, r3
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	4bbb      	ldr	r3, [pc, #748]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e450:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800e452:	1dfb      	adds	r3, r7, #7
 800e454:	4619      	mov	r1, r3
 800e456:	f44f 7001 	mov.w	r0, #516	; 0x204
 800e45a:	f7fd fac5 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800e45e:	1dbb      	adds	r3, r7, #6
 800e460:	4619      	mov	r1, r3
 800e462:	f240 2005 	movw	r0, #517	; 0x205
 800e466:	f7fd fabf 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.start_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e46a:	79fb      	ldrb	r3, [r7, #7]
 800e46c:	021b      	lsls	r3, r3, #8
 800e46e:	b21a      	sxth	r2, r3
 800e470:	79bb      	ldrb	r3, [r7, #6]
 800e472:	b21b      	sxth	r3, r3
 800e474:	4313      	orrs	r3, r2
 800e476:	b21b      	sxth	r3, r3
 800e478:	b29a      	uxth	r2, r3
 800e47a:	4bb0      	ldr	r3, [pc, #704]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e47c:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800e47e:	1dfb      	adds	r3, r7, #7
 800e480:	4619      	mov	r1, r3
 800e482:	f240 2006 	movw	r0, #518	; 0x206
 800e486:	f7fd faaf 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800e48a:	1dbb      	adds	r3, r7, #6
 800e48c:	4619      	mov	r1, r3
 800e48e:	f240 2007 	movw	r0, #519	; 0x207
 800e492:	f7fd faa9 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.start_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e496:	79fb      	ldrb	r3, [r7, #7]
 800e498:	021b      	lsls	r3, r3, #8
 800e49a:	b21a      	sxth	r2, r3
 800e49c:	79bb      	ldrb	r3, [r7, #6]
 800e49e:	b21b      	sxth	r3, r3
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	b21b      	sxth	r3, r3
 800e4a4:	b29a      	uxth	r2, r3
 800e4a6:	4ba5      	ldr	r3, [pc, #660]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e4a8:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800e4aa:	1dfb      	adds	r3, r7, #7
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	f44f 7002 	mov.w	r0, #520	; 0x208
 800e4b2:	f7fd fa99 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800e4b6:	1dbb      	adds	r3, r7, #6
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	f240 2009 	movw	r0, #521	; 0x209
 800e4be:	f7fd fa93 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.start_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e4c2:	79fb      	ldrb	r3, [r7, #7]
 800e4c4:	021b      	lsls	r3, r3, #8
 800e4c6:	b21a      	sxth	r2, r3
 800e4c8:	79bb      	ldrb	r3, [r7, #6]
 800e4ca:	b21b      	sxth	r3, r3
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	b21b      	sxth	r3, r3
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	4b9a      	ldr	r3, [pc, #616]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e4d4:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800e4d6:	1dfb      	adds	r3, r7, #7
 800e4d8:	4619      	mov	r1, r3
 800e4da:	f240 200a 	movw	r0, #522	; 0x20a
 800e4de:	f7fd fa83 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800e4e2:	1dbb      	adds	r3, r7, #6
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	f240 200b 	movw	r0, #523	; 0x20b
 800e4ea:	f7fd fa7d 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.start_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e4ee:	79fb      	ldrb	r3, [r7, #7]
 800e4f0:	021b      	lsls	r3, r3, #8
 800e4f2:	b21a      	sxth	r2, r3
 800e4f4:	79bb      	ldrb	r3, [r7, #6]
 800e4f6:	b21b      	sxth	r3, r3
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	b21b      	sxth	r3, r3
 800e4fc:	b29a      	uxth	r2, r3
 800e4fe:	4b8f      	ldr	r3, [pc, #572]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e500:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800e502:	1dfb      	adds	r3, r7, #7
 800e504:	4619      	mov	r1, r3
 800e506:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800e50a:	f7fd fa6d 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800e50e:	1dbb      	adds	r3, r7, #6
 800e510:	4619      	mov	r1, r3
 800e512:	f240 200d 	movw	r0, #525	; 0x20d
 800e516:	f7fd fa67 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.end_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e51a:	79fb      	ldrb	r3, [r7, #7]
 800e51c:	021b      	lsls	r3, r3, #8
 800e51e:	b21a      	sxth	r2, r3
 800e520:	79bb      	ldrb	r3, [r7, #6]
 800e522:	b21b      	sxth	r3, r3
 800e524:	4313      	orrs	r3, r2
 800e526:	b21b      	sxth	r3, r3
 800e528:	b29a      	uxth	r2, r3
 800e52a:	4b84      	ldr	r3, [pc, #528]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e52c:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800e52e:	1dfb      	adds	r3, r7, #7
 800e530:	4619      	mov	r1, r3
 800e532:	f240 200e 	movw	r0, #526	; 0x20e
 800e536:	f7fd fa57 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800e53a:	1dbb      	adds	r3, r7, #6
 800e53c:	4619      	mov	r1, r3
 800e53e:	f240 200f 	movw	r0, #527	; 0x20f
 800e542:	f7fd fa51 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.end_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e546:	79fb      	ldrb	r3, [r7, #7]
 800e548:	021b      	lsls	r3, r3, #8
 800e54a:	b21a      	sxth	r2, r3
 800e54c:	79bb      	ldrb	r3, [r7, #6]
 800e54e:	b21b      	sxth	r3, r3
 800e550:	4313      	orrs	r3, r2
 800e552:	b21b      	sxth	r3, r3
 800e554:	b29a      	uxth	r2, r3
 800e556:	4b79      	ldr	r3, [pc, #484]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e558:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800e55a:	1dfb      	adds	r3, r7, #7
 800e55c:	4619      	mov	r1, r3
 800e55e:	f44f 7004 	mov.w	r0, #528	; 0x210
 800e562:	f7fd fa41 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800e566:	1dbb      	adds	r3, r7, #6
 800e568:	4619      	mov	r1, r3
 800e56a:	f240 2011 	movw	r0, #529	; 0x211
 800e56e:	f7fd fa3b 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.crc_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e572:	79fb      	ldrb	r3, [r7, #7]
 800e574:	021b      	lsls	r3, r3, #8
 800e576:	b21a      	sxth	r2, r3
 800e578:	79bb      	ldrb	r3, [r7, #6]
 800e57a:	b21b      	sxth	r3, r3
 800e57c:	4313      	orrs	r3, r2
 800e57e:	b21b      	sxth	r3, r3
 800e580:	b29a      	uxth	r2, r3
 800e582:	4b6e      	ldr	r3, [pc, #440]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e584:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CRC_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800e586:	1dfb      	adds	r3, r7, #7
 800e588:	4619      	mov	r1, r3
 800e58a:	f240 2012 	movw	r0, #530	; 0x212
 800e58e:	f7fd fa2b 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800e592:	1dbb      	adds	r3, r7, #6
 800e594:	4619      	mov	r1, r3
 800e596:	f240 2013 	movw	r0, #531	; 0x213
 800e59a:	f7fd fa25 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.crc_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e59e:	79fb      	ldrb	r3, [r7, #7]
 800e5a0:	021b      	lsls	r3, r3, #8
 800e5a2:	b21a      	sxth	r2, r3
 800e5a4:	79bb      	ldrb	r3, [r7, #6]
 800e5a6:	b21b      	sxth	r3, r3
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	b21b      	sxth	r3, r3
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	4b63      	ldr	r3, [pc, #396]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e5b0:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*JUMP_VECTOR_HIGH_REG, &status_reg_temp_h);
 800e5b2:	1dfb      	adds	r3, r7, #7
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	f44f 7005 	mov.w	r0, #532	; 0x214
 800e5ba:	f7fd fa15 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_HIGH_REG+1, &status_reg_temp_l);
 800e5be:	1dbb      	adds	r3, r7, #6
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	f240 2015 	movw	r0, #533	; 0x215
 800e5c6:	f7fd fa0f 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.jump_vector_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e5ca:	79fb      	ldrb	r3, [r7, #7]
 800e5cc:	021b      	lsls	r3, r3, #8
 800e5ce:	b21a      	sxth	r2, r3
 800e5d0:	79bb      	ldrb	r3, [r7, #6]
 800e5d2:	b21b      	sxth	r3, r3
 800e5d4:	4313      	orrs	r3, r2
 800e5d6:	b21b      	sxth	r3, r3
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	4b58      	ldr	r3, [pc, #352]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e5dc:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*JUMP_VECTOR_2_REG, &status_reg_temp_h);
 800e5de:	1dfb      	adds	r3, r7, #7
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	f240 2016 	movw	r0, #534	; 0x216
 800e5e6:	f7fd f9ff 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_2_REG+1, &status_reg_temp_l);
 800e5ea:	1dbb      	adds	r3, r7, #6
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	f240 2017 	movw	r0, #535	; 0x217
 800e5f2:	f7fd f9f9 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.jump_vector_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e5f6:	79fb      	ldrb	r3, [r7, #7]
 800e5f8:	021b      	lsls	r3, r3, #8
 800e5fa:	b21a      	sxth	r2, r3
 800e5fc:	79bb      	ldrb	r3, [r7, #6]
 800e5fe:	b21b      	sxth	r3, r3
 800e600:	4313      	orrs	r3, r2
 800e602:	b21b      	sxth	r3, r3
 800e604:	b29a      	uxth	r2, r3
 800e606:	4b4d      	ldr	r3, [pc, #308]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e608:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*JUMP_VECTOR_3_REG, &status_reg_temp_h);
 800e60a:	1dfb      	adds	r3, r7, #7
 800e60c:	4619      	mov	r1, r3
 800e60e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e612:	f7fd f9e9 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_3_REG+1, &status_reg_temp_l);
 800e616:	1dbb      	adds	r3, r7, #6
 800e618:	4619      	mov	r1, r3
 800e61a:	f240 2019 	movw	r0, #537	; 0x219
 800e61e:	f7fd f9e3 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.jump_vector_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e622:	79fb      	ldrb	r3, [r7, #7]
 800e624:	021b      	lsls	r3, r3, #8
 800e626:	b21a      	sxth	r2, r3
 800e628:	79bb      	ldrb	r3, [r7, #6]
 800e62a:	b21b      	sxth	r3, r3
 800e62c:	4313      	orrs	r3, r2
 800e62e:	b21b      	sxth	r3, r3
 800e630:	b29a      	uxth	r2, r3
 800e632:	4b42      	ldr	r3, [pc, #264]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e634:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*JUMP_VECTOR_LOW_REG, &status_reg_temp_h);
 800e636:	1dfb      	adds	r3, r7, #7
 800e638:	4619      	mov	r1, r3
 800e63a:	f240 201a 	movw	r0, #538	; 0x21a
 800e63e:	f7fd f9d3 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_LOW_REG+1, &status_reg_temp_l);
 800e642:	1dbb      	adds	r3, r7, #6
 800e644:	4619      	mov	r1, r3
 800e646:	f240 201b 	movw	r0, #539	; 0x21b
 800e64a:	f7fd f9cd 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.jump_vector_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e64e:	79fb      	ldrb	r3, [r7, #7]
 800e650:	021b      	lsls	r3, r3, #8
 800e652:	b21a      	sxth	r2, r3
 800e654:	79bb      	ldrb	r3, [r7, #6]
 800e656:	b21b      	sxth	r3, r3
 800e658:	4313      	orrs	r3, r2
 800e65a:	b21b      	sxth	r3, r3
 800e65c:	b29a      	uxth	r2, r3
 800e65e:	4b37      	ldr	r3, [pc, #220]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e660:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG, &status_reg_temp_h);
 800e662:	1dfb      	adds	r3, r7, #7
 800e664:	4619      	mov	r1, r3
 800e666:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e66a:	f7fd f9bd 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG+1, &status_reg_temp_l);
 800e66e:	1dbb      	adds	r3, r7, #6
 800e670:	4619      	mov	r1, r3
 800e672:	f240 201d 	movw	r0, #541	; 0x21d
 800e676:	f7fd f9b7 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.firmware_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e67a:	79fb      	ldrb	r3, [r7, #7]
 800e67c:	021b      	lsls	r3, r3, #8
 800e67e:	b21a      	sxth	r2, r3
 800e680:	79bb      	ldrb	r3, [r7, #6]
 800e682:	b21b      	sxth	r3, r3
 800e684:	4313      	orrs	r3, r2
 800e686:	b21b      	sxth	r3, r3
 800e688:	b29a      	uxth	r2, r3
 800e68a:	4b2c      	ldr	r3, [pc, #176]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e68c:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*WORKING_MODE_REG, &status_reg_temp_h);
 800e68e:	1dfb      	adds	r3, r7, #7
 800e690:	4619      	mov	r1, r3
 800e692:	f240 201e 	movw	r0, #542	; 0x21e
 800e696:	f7fd f9a7 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*WORKING_MODE_REG+1, &status_reg_temp_l);
 800e69a:	1dbb      	adds	r3, r7, #6
 800e69c:	4619      	mov	r1, r3
 800e69e:	f240 201f 	movw	r0, #543	; 0x21f
 800e6a2:	f7fd f9a1 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.working_mode_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e6a6:	79fb      	ldrb	r3, [r7, #7]
 800e6a8:	021b      	lsls	r3, r3, #8
 800e6aa:	b21a      	sxth	r2, r3
 800e6ac:	79bb      	ldrb	r3, [r7, #6]
 800e6ae:	b21b      	sxth	r3, r3
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	b21b      	sxth	r3, r3
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	4b21      	ldr	r3, [pc, #132]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e6b8:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*READY_DOWNLOAD_REG, &status_reg_temp_h);
 800e6ba:	1dfb      	adds	r3, r7, #7
 800e6bc:	4619      	mov	r1, r3
 800e6be:	f44f 7008 	mov.w	r0, #544	; 0x220
 800e6c2:	f7fd f991 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*READY_DOWNLOAD_REG+1, &status_reg_temp_l);
 800e6c6:	1dbb      	adds	r3, r7, #6
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	f240 2021 	movw	r0, #545	; 0x221
 800e6ce:	f7fd f98b 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.ready_download_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e6d2:	79fb      	ldrb	r3, [r7, #7]
 800e6d4:	021b      	lsls	r3, r3, #8
 800e6d6:	b21a      	sxth	r2, r3
 800e6d8:	79bb      	ldrb	r3, [r7, #6]
 800e6da:	b21b      	sxth	r3, r3
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	b21b      	sxth	r3, r3
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	4b16      	ldr	r3, [pc, #88]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e6e4:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG, &status_reg_temp_h);
 800e6e6:	1dfb      	adds	r3, r7, #7
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	f240 2022 	movw	r0, #546	; 0x222
 800e6ee:	f7fd f97b 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG+1, &status_reg_temp_l);
 800e6f2:	1dbb      	adds	r3, r7, #6
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	f240 2023 	movw	r0, #547	; 0x223
 800e6fa:	f7fd f975 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.download_timeout_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e6fe:	79fb      	ldrb	r3, [r7, #7]
 800e700:	021b      	lsls	r3, r3, #8
 800e702:	b21a      	sxth	r2, r3
 800e704:	79bb      	ldrb	r3, [r7, #6]
 800e706:	b21b      	sxth	r3, r3
 800e708:	4313      	orrs	r3, r2
 800e70a:	b21b      	sxth	r3, r3
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	4b0b      	ldr	r3, [pc, #44]	; (800e73c <read_bootloader_registers_no_rtos+0x31c>)
 800e710:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800e712:	1dfb      	adds	r3, r7, #7
 800e714:	4619      	mov	r1, r3
 800e716:	f44f 7009 	mov.w	r0, #548	; 0x224
 800e71a:	f7fd f965 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800e71e:	1dbb      	adds	r3, r7, #6
 800e720:	4619      	mov	r1, r3
 800e722:	f240 2025 	movw	r0, #549	; 0x225
 800e726:	f7fd f95f 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e72a:	79fb      	ldrb	r3, [r7, #7]
 800e72c:	021b      	lsls	r3, r3, #8
 800e72e:	b21a      	sxth	r2, r3
 800e730:	79bb      	ldrb	r3, [r7, #6]
 800e732:	b21b      	sxth	r3, r3
 800e734:	4313      	orrs	r3, r2
 800e736:	b21b      	sxth	r3, r3
 800e738:	e002      	b.n	800e740 <read_bootloader_registers_no_rtos+0x320>
 800e73a:	bf00      	nop
 800e73c:	20018990 	.word	0x20018990
 800e740:	b29a      	uxth	r2, r3
 800e742:	4bbc      	ldr	r3, [pc, #752]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e744:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800e746:	1dfb      	adds	r3, r7, #7
 800e748:	4619      	mov	r1, r3
 800e74a:	f240 2026 	movw	r0, #550	; 0x226
 800e74e:	f7fd f94b 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800e752:	1dbb      	adds	r3, r7, #6
 800e754:	4619      	mov	r1, r3
 800e756:	f240 2027 	movw	r0, #551	; 0x227
 800e75a:	f7fd f945 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.max_jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e75e:	79fb      	ldrb	r3, [r7, #7]
 800e760:	021b      	lsls	r3, r3, #8
 800e762:	b21a      	sxth	r2, r3
 800e764:	79bb      	ldrb	r3, [r7, #6]
 800e766:	b21b      	sxth	r3, r3
 800e768:	4313      	orrs	r3, r2
 800e76a:	b21b      	sxth	r3, r3
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	4bb1      	ldr	r3, [pc, #708]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e770:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800e772:	1dfb      	adds	r3, r7, #7
 800e774:	4619      	mov	r1, r3
 800e776:	f44f 700a 	mov.w	r0, #552	; 0x228
 800e77a:	f7fd f935 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800e77e:	1dbb      	adds	r3, r7, #6
 800e780:	4619      	mov	r1, r3
 800e782:	f240 2029 	movw	r0, #553	; 0x229
 800e786:	f7fd f92f 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.end_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e78a:	79fb      	ldrb	r3, [r7, #7]
 800e78c:	021b      	lsls	r3, r3, #8
 800e78e:	b21a      	sxth	r2, r3
 800e790:	79bb      	ldrb	r3, [r7, #6]
 800e792:	b21b      	sxth	r3, r3
 800e794:	4313      	orrs	r3, r2
 800e796:	b21b      	sxth	r3, r3
 800e798:	b29a      	uxth	r2, r3
 800e79a:	4ba6      	ldr	r3, [pc, #664]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e79c:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800e79e:	1dfb      	adds	r3, r7, #7
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	f240 202a 	movw	r0, #554	; 0x22a
 800e7a6:	f7fd f91f 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800e7aa:	1dbb      	adds	r3, r7, #6
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	f240 202b 	movw	r0, #555	; 0x22b
 800e7b2:	f7fd f919 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.end_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e7b6:	79fb      	ldrb	r3, [r7, #7]
 800e7b8:	021b      	lsls	r3, r3, #8
 800e7ba:	b21a      	sxth	r2, r3
 800e7bc:	79bb      	ldrb	r3, [r7, #6]
 800e7be:	b21b      	sxth	r3, r3
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	b21b      	sxth	r3, r3
 800e7c4:	b29a      	uxth	r2, r3
 800e7c6:	4b9b      	ldr	r3, [pc, #620]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e7c8:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 800e7ca:	1dfb      	adds	r3, r7, #7
 800e7cc:	4619      	mov	r1, r3
 800e7ce:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800e7d2:	f7fd f909 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 800e7d6:	1dbb      	adds	r3, r7, #6
 800e7d8:	4619      	mov	r1, r3
 800e7da:	f240 202d 	movw	r0, #557	; 0x22d
 800e7de:	f7fd f903 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e7e2:	79fb      	ldrb	r3, [r7, #7]
 800e7e4:	021b      	lsls	r3, r3, #8
 800e7e6:	b21a      	sxth	r2, r3
 800e7e8:	79bb      	ldrb	r3, [r7, #6]
 800e7ea:	b21b      	sxth	r3, r3
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	b21b      	sxth	r3, r3
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	4b90      	ldr	r3, [pc, #576]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e7f4:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 800e7f6:	1dfb      	adds	r3, r7, #7
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	f240 202e 	movw	r0, #558	; 0x22e
 800e7fe:	f7fd f8f3 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 800e802:	1dbb      	adds	r3, r7, #6
 800e804:	4619      	mov	r1, r3
 800e806:	f240 202f 	movw	r0, #559	; 0x22f
 800e80a:	f7fd f8ed 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e80e:	79fb      	ldrb	r3, [r7, #7]
 800e810:	021b      	lsls	r3, r3, #8
 800e812:	b21a      	sxth	r2, r3
 800e814:	79bb      	ldrb	r3, [r7, #6]
 800e816:	b21b      	sxth	r3, r3
 800e818:	4313      	orrs	r3, r2
 800e81a:	b21b      	sxth	r3, r3
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	4b85      	ldr	r3, [pc, #532]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e820:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &status_reg_temp_h);
 800e822:	1dfb      	adds	r3, r7, #7
 800e824:	4619      	mov	r1, r3
 800e826:	f240 203e 	movw	r0, #574	; 0x23e
 800e82a:	f7fd f8dd 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &status_reg_temp_l);
 800e82e:	1dbb      	adds	r3, r7, #6
 800e830:	4619      	mov	r1, r3
 800e832:	f240 203f 	movw	r0, #575	; 0x23f
 800e836:	f7fd f8d7 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.clear_page_number_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e83a:	79fb      	ldrb	r3, [r7, #7]
 800e83c:	021b      	lsls	r3, r3, #8
 800e83e:	b21a      	sxth	r2, r3
 800e840:	79bb      	ldrb	r3, [r7, #6]
 800e842:	b21b      	sxth	r3, r3
 800e844:	4313      	orrs	r3, r2
 800e846:	b21b      	sxth	r3, r3
 800e848:	b29a      	uxth	r2, r3
 800e84a:	4b7a      	ldr	r3, [pc, #488]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e84c:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &status_reg_temp_h);
 800e84e:	1dfb      	adds	r3, r7, #7
 800e850:	4619      	mov	r1, r3
 800e852:	f44f 7010 	mov.w	r0, #576	; 0x240
 800e856:	f7fd f8c7 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &status_reg_temp_l);
 800e85a:	1dbb      	adds	r3, r7, #6
 800e85c:	4619      	mov	r1, r3
 800e85e:	f240 2041 	movw	r0, #577	; 0x241
 800e862:	f7fd f8c1 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.clear_page_on_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e866:	79fb      	ldrb	r3, [r7, #7]
 800e868:	021b      	lsls	r3, r3, #8
 800e86a:	b21a      	sxth	r2, r3
 800e86c:	79bb      	ldrb	r3, [r7, #6]
 800e86e:	b21b      	sxth	r3, r3
 800e870:	4313      	orrs	r3, r2
 800e872:	b21b      	sxth	r3, r3
 800e874:	b29a      	uxth	r2, r3
 800e876:	4b6f      	ldr	r3, [pc, #444]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e878:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &status_reg_temp_h);
 800e87a:	1dfb      	adds	r3, r7, #7
 800e87c:	4619      	mov	r1, r3
 800e87e:	f240 2042 	movw	r0, #578	; 0x242
 800e882:	f7fd f8b1 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &status_reg_temp_l);
 800e886:	1dbb      	adds	r3, r7, #6
 800e888:	4619      	mov	r1, r3
 800e88a:	f240 2043 	movw	r0, #579	; 0x243
 800e88e:	f7fd f8ab 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.write_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e892:	79fb      	ldrb	r3, [r7, #7]
 800e894:	021b      	lsls	r3, r3, #8
 800e896:	b21a      	sxth	r2, r3
 800e898:	79bb      	ldrb	r3, [r7, #6]
 800e89a:	b21b      	sxth	r3, r3
 800e89c:	4313      	orrs	r3, r2
 800e89e:	b21b      	sxth	r3, r3
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	4b64      	ldr	r3, [pc, #400]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e8a4:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &status_reg_temp_h);
 800e8a6:	1dfb      	adds	r3, r7, #7
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	f44f 7011 	mov.w	r0, #580	; 0x244
 800e8ae:	f7fd f89b 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &status_reg_temp_l);
 800e8b2:	1dbb      	adds	r3, r7, #6
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	f240 2045 	movw	r0, #581	; 0x245
 800e8ba:	f7fd f895 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.read_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e8be:	79fb      	ldrb	r3, [r7, #7]
 800e8c0:	021b      	lsls	r3, r3, #8
 800e8c2:	b21a      	sxth	r2, r3
 800e8c4:	79bb      	ldrb	r3, [r7, #6]
 800e8c6:	b21b      	sxth	r3, r3
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	b21b      	sxth	r3, r3
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	4b59      	ldr	r3, [pc, #356]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e8d0:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &status_reg_temp_h);
 800e8d2:	1dfb      	adds	r3, r7, #7
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	f240 2046 	movw	r0, #582	; 0x246
 800e8da:	f7fd f885 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &status_reg_temp_l);
 800e8de:	1dbb      	adds	r3, r7, #6
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	f240 2047 	movw	r0, #583	; 0x247
 800e8e6:	f7fd f87f 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.address_to_write_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e8ea:	79fb      	ldrb	r3, [r7, #7]
 800e8ec:	021b      	lsls	r3, r3, #8
 800e8ee:	b21a      	sxth	r2, r3
 800e8f0:	79bb      	ldrb	r3, [r7, #6]
 800e8f2:	b21b      	sxth	r3, r3
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	b21b      	sxth	r3, r3
 800e8f8:	b29a      	uxth	r2, r3
 800e8fa:	4b4e      	ldr	r3, [pc, #312]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e8fc:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &status_reg_temp_h);
 800e8fe:	1dfb      	adds	r3, r7, #7
 800e900:	4619      	mov	r1, r3
 800e902:	f44f 7012 	mov.w	r0, #584	; 0x248
 800e906:	f7fd f86f 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &status_reg_temp_l);
 800e90a:	1dbb      	adds	r3, r7, #6
 800e90c:	4619      	mov	r1, r3
 800e90e:	f240 2049 	movw	r0, #585	; 0x249
 800e912:	f7fd f869 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.address_to_write_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e916:	79fb      	ldrb	r3, [r7, #7]
 800e918:	021b      	lsls	r3, r3, #8
 800e91a:	b21a      	sxth	r2, r3
 800e91c:	79bb      	ldrb	r3, [r7, #6]
 800e91e:	b21b      	sxth	r3, r3
 800e920:	4313      	orrs	r3, r2
 800e922:	b21b      	sxth	r3, r3
 800e924:	b29a      	uxth	r2, r3
 800e926:	4b43      	ldr	r3, [pc, #268]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e928:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*BYTE_QUANTITY_REG, &status_reg_temp_h);
 800e92a:	1dfb      	adds	r3, r7, #7
 800e92c:	4619      	mov	r1, r3
 800e92e:	f240 204a 	movw	r0, #586	; 0x24a
 800e932:	f7fd f859 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*BYTE_QUANTITY_REG+1, &status_reg_temp_l);
 800e936:	1dbb      	adds	r3, r7, #6
 800e938:	4619      	mov	r1, r3
 800e93a:	f240 204b 	movw	r0, #587	; 0x24b
 800e93e:	f7fd f853 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.byte_quantity_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	021b      	lsls	r3, r3, #8
 800e946:	b21a      	sxth	r2, r3
 800e948:	79bb      	ldrb	r3, [r7, #6]
 800e94a:	b21b      	sxth	r3, r3
 800e94c:	4313      	orrs	r3, r2
 800e94e:	b21b      	sxth	r3, r3
 800e950:	b29a      	uxth	r2, r3
 800e952:	4b38      	ldr	r3, [pc, #224]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e954:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*PACKET_CRC_HIGH_REG, &status_reg_temp_h);
 800e956:	1dfb      	adds	r3, r7, #7
 800e958:	4619      	mov	r1, r3
 800e95a:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800e95e:	f7fd f843 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &status_reg_temp_l);
 800e962:	1dbb      	adds	r3, r7, #6
 800e964:	4619      	mov	r1, r3
 800e966:	f240 204d 	movw	r0, #589	; 0x24d
 800e96a:	f7fd f83d 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e96e:	79fb      	ldrb	r3, [r7, #7]
 800e970:	021b      	lsls	r3, r3, #8
 800e972:	b21a      	sxth	r2, r3
 800e974:	79bb      	ldrb	r3, [r7, #6]
 800e976:	b21b      	sxth	r3, r3
 800e978:	4313      	orrs	r3, r2
 800e97a:	b21b      	sxth	r3, r3
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	4b2d      	ldr	r3, [pc, #180]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e980:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*PACKET_CRC_LOW_REG, &status_reg_temp_h);
 800e982:	1dfb      	adds	r3, r7, #7
 800e984:	4619      	mov	r1, r3
 800e986:	f240 204e 	movw	r0, #590	; 0x24e
 800e98a:	f7fd f82d 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_LOW_REG+1, &status_reg_temp_l);
 800e98e:	1dbb      	adds	r3, r7, #6
 800e990:	4619      	mov	r1, r3
 800e992:	f240 204f 	movw	r0, #591	; 0x24f
 800e996:	f7fd f827 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e99a:	79fb      	ldrb	r3, [r7, #7]
 800e99c:	021b      	lsls	r3, r3, #8
 800e99e:	b21a      	sxth	r2, r3
 800e9a0:	79bb      	ldrb	r3, [r7, #6]
 800e9a2:	b21b      	sxth	r3, r3
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	b21b      	sxth	r3, r3
 800e9a8:	b29a      	uxth	r2, r3
 800e9aa:	4b22      	ldr	r3, [pc, #136]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e9ac:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*PACKET_DATA_0_REG, &status_reg_temp_h);
 800e9ae:	1dfb      	adds	r3, r7, #7
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	f44f 7014 	mov.w	r0, #592	; 0x250
 800e9b6:	f7fd f817 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_0_REG+1, &status_reg_temp_l);
 800e9ba:	1dbb      	adds	r3, r7, #6
 800e9bc:	4619      	mov	r1, r3
 800e9be:	f240 2051 	movw	r0, #593	; 0x251
 800e9c2:	f7fd f811 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_data_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e9c6:	79fb      	ldrb	r3, [r7, #7]
 800e9c8:	021b      	lsls	r3, r3, #8
 800e9ca:	b21a      	sxth	r2, r3
 800e9cc:	79bb      	ldrb	r3, [r7, #6]
 800e9ce:	b21b      	sxth	r3, r3
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	b21b      	sxth	r3, r3
 800e9d4:	b29a      	uxth	r2, r3
 800e9d6:	4b17      	ldr	r3, [pc, #92]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800e9d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*PACKET_DATA_1_REG, &status_reg_temp_h);
 800e9dc:	1dfb      	adds	r3, r7, #7
 800e9de:	4619      	mov	r1, r3
 800e9e0:	f240 2052 	movw	r0, #594	; 0x252
 800e9e4:	f7fd f800 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_1_REG+1, &status_reg_temp_l);
 800e9e8:	1dbb      	adds	r3, r7, #6
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	f240 2053 	movw	r0, #595	; 0x253
 800e9f0:	f7fc fffa 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_data_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e9f4:	79fb      	ldrb	r3, [r7, #7]
 800e9f6:	021b      	lsls	r3, r3, #8
 800e9f8:	b21a      	sxth	r2, r3
 800e9fa:	79bb      	ldrb	r3, [r7, #6]
 800e9fc:	b21b      	sxth	r3, r3
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	b21b      	sxth	r3, r3
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	4b0b      	ldr	r3, [pc, #44]	; (800ea34 <read_bootloader_registers_no_rtos+0x614>)
 800ea06:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PACKET_DATA_2_REG, &status_reg_temp_h);
 800ea0a:	1dfb      	adds	r3, r7, #7
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	f44f 7015 	mov.w	r0, #596	; 0x254
 800ea12:	f7fc ffe9 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_2_REG+1, &status_reg_temp_l);
 800ea16:	1dbb      	adds	r3, r7, #6
 800ea18:	4619      	mov	r1, r3
 800ea1a:	f240 2055 	movw	r0, #597	; 0x255
 800ea1e:	f7fc ffe3 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_data_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ea22:	79fb      	ldrb	r3, [r7, #7]
 800ea24:	021b      	lsls	r3, r3, #8
 800ea26:	b21a      	sxth	r2, r3
 800ea28:	79bb      	ldrb	r3, [r7, #6]
 800ea2a:	b21b      	sxth	r3, r3
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	b21b      	sxth	r3, r3
 800ea30:	e002      	b.n	800ea38 <read_bootloader_registers_no_rtos+0x618>
 800ea32:	bf00      	nop
 800ea34:	20018990 	.word	0x20018990
 800ea38:	b29a      	uxth	r2, r3
 800ea3a:	4b1a      	ldr	r3, [pc, #104]	; (800eaa4 <read_bootloader_registers_no_rtos+0x684>)
 800ea3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PACKET_DATA_3_REG, &status_reg_temp_h);
 800ea40:	1dfb      	adds	r3, r7, #7
 800ea42:	4619      	mov	r1, r3
 800ea44:	f240 2056 	movw	r0, #598	; 0x256
 800ea48:	f7fc ffce 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_3_REG+1, &status_reg_temp_l);
 800ea4c:	1dbb      	adds	r3, r7, #6
 800ea4e:	4619      	mov	r1, r3
 800ea50:	f240 2057 	movw	r0, #599	; 0x257
 800ea54:	f7fc ffc8 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_data_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ea58:	79fb      	ldrb	r3, [r7, #7]
 800ea5a:	021b      	lsls	r3, r3, #8
 800ea5c:	b21a      	sxth	r2, r3
 800ea5e:	79bb      	ldrb	r3, [r7, #6]
 800ea60:	b21b      	sxth	r3, r3
 800ea62:	4313      	orrs	r3, r2
 800ea64:	b21b      	sxth	r3, r3
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	4b0e      	ldr	r3, [pc, #56]	; (800eaa4 <read_bootloader_registers_no_rtos+0x684>)
 800ea6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*PACKET_DATA_4_REG, &status_reg_temp_h);
 800ea6e:	1dfb      	adds	r3, r7, #7
 800ea70:	4619      	mov	r1, r3
 800ea72:	f44f 7016 	mov.w	r0, #600	; 0x258
 800ea76:	f7fc ffb7 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_4_REG+1, &status_reg_temp_l);
 800ea7a:	1dbb      	adds	r3, r7, #6
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	f240 2059 	movw	r0, #601	; 0x259
 800ea82:	f7fc ffb1 	bl	800b9e8 <fm25v02_read>
	bootloader_registers.packet_data_4_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ea86:	79fb      	ldrb	r3, [r7, #7]
 800ea88:	021b      	lsls	r3, r3, #8
 800ea8a:	b21a      	sxth	r2, r3
 800ea8c:	79bb      	ldrb	r3, [r7, #6]
 800ea8e:	b21b      	sxth	r3, r3
 800ea90:	4313      	orrs	r3, r2
 800ea92:	b21b      	sxth	r3, r3
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	4b03      	ldr	r3, [pc, #12]	; (800eaa4 <read_bootloader_registers_no_rtos+0x684>)
 800ea98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

}
 800ea9c:	bf00      	nop
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	20018990 	.word	0x20018990

0800eaa8 <read_change_boot_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти регистров бутлоадера без запуска операционной системы---------------

void read_change_boot_registers(void)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_3_REG, &status_reg_temp_h);
 800eaae:	1dfb      	adds	r3, r7, #7
 800eab0:	4619      	mov	r1, r3
 800eab2:	2000      	movs	r0, #0
 800eab4:	f7fc ff98 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_3_REG+1, &status_reg_temp_l);
 800eab8:	1dbb      	adds	r3, r7, #6
 800eaba:	4619      	mov	r1, r3
 800eabc:	2001      	movs	r0, #1
 800eabe:	f7fc ff93 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_start_address_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800eac2:	79fb      	ldrb	r3, [r7, #7]
 800eac4:	021b      	lsls	r3, r3, #8
 800eac6:	b21a      	sxth	r2, r3
 800eac8:	79bb      	ldrb	r3, [r7, #6]
 800eaca:	b21b      	sxth	r3, r3
 800eacc:	4313      	orrs	r3, r2
 800eace:	b21b      	sxth	r3, r3
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	4b99      	ldr	r3, [pc, #612]	; (800ed38 <read_change_boot_registers+0x290>)
 800ead4:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_2_REG, &status_reg_temp_h);
 800ead6:	1dfb      	adds	r3, r7, #7
 800ead8:	4619      	mov	r1, r3
 800eada:	2002      	movs	r0, #2
 800eadc:	f7fc ff84 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_2_REG+1, &status_reg_temp_l);
 800eae0:	1dbb      	adds	r3, r7, #6
 800eae2:	4619      	mov	r1, r3
 800eae4:	2003      	movs	r0, #3
 800eae6:	f7fc ff7f 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_start_address_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800eaea:	79fb      	ldrb	r3, [r7, #7]
 800eaec:	021b      	lsls	r3, r3, #8
 800eaee:	b21a      	sxth	r2, r3
 800eaf0:	79bb      	ldrb	r3, [r7, #6]
 800eaf2:	b21b      	sxth	r3, r3
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	b21b      	sxth	r3, r3
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	4b8f      	ldr	r3, [pc, #572]	; (800ed38 <read_change_boot_registers+0x290>)
 800eafc:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_1_REG, &status_reg_temp_h);
 800eafe:	1dfb      	adds	r3, r7, #7
 800eb00:	4619      	mov	r1, r3
 800eb02:	2004      	movs	r0, #4
 800eb04:	f7fc ff70 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_1_REG+1, &status_reg_temp_l);
 800eb08:	1dbb      	adds	r3, r7, #6
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	2005      	movs	r0, #5
 800eb0e:	f7fc ff6b 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_start_address_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800eb12:	79fb      	ldrb	r3, [r7, #7]
 800eb14:	021b      	lsls	r3, r3, #8
 800eb16:	b21a      	sxth	r2, r3
 800eb18:	79bb      	ldrb	r3, [r7, #6]
 800eb1a:	b21b      	sxth	r3, r3
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	b21b      	sxth	r3, r3
 800eb20:	b29a      	uxth	r2, r3
 800eb22:	4b85      	ldr	r3, [pc, #532]	; (800ed38 <read_change_boot_registers+0x290>)
 800eb24:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_0_REG, &status_reg_temp_h);
 800eb26:	1dfb      	adds	r3, r7, #7
 800eb28:	4619      	mov	r1, r3
 800eb2a:	2006      	movs	r0, #6
 800eb2c:	f7fc ff5c 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_0_REG+1, &status_reg_temp_l);
 800eb30:	1dbb      	adds	r3, r7, #6
 800eb32:	4619      	mov	r1, r3
 800eb34:	2007      	movs	r0, #7
 800eb36:	f7fc ff57 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_start_address_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800eb3a:	79fb      	ldrb	r3, [r7, #7]
 800eb3c:	021b      	lsls	r3, r3, #8
 800eb3e:	b21a      	sxth	r2, r3
 800eb40:	79bb      	ldrb	r3, [r7, #6]
 800eb42:	b21b      	sxth	r3, r3
 800eb44:	4313      	orrs	r3, r2
 800eb46:	b21b      	sxth	r3, r3
 800eb48:	b29a      	uxth	r2, r3
 800eb4a:	4b7b      	ldr	r3, [pc, #492]	; (800ed38 <read_change_boot_registers+0x290>)
 800eb4c:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_3_REG, &status_reg_temp_h);
 800eb4e:	1dfb      	adds	r3, r7, #7
 800eb50:	4619      	mov	r1, r3
 800eb52:	2008      	movs	r0, #8
 800eb54:	f7fc ff48 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_3_REG+1, &status_reg_temp_l);
 800eb58:	1dbb      	adds	r3, r7, #6
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	2009      	movs	r0, #9
 800eb5e:	f7fc ff43 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_end_address_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	021b      	lsls	r3, r3, #8
 800eb66:	b21a      	sxth	r2, r3
 800eb68:	79bb      	ldrb	r3, [r7, #6]
 800eb6a:	b21b      	sxth	r3, r3
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	b21b      	sxth	r3, r3
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	4b71      	ldr	r3, [pc, #452]	; (800ed38 <read_change_boot_registers+0x290>)
 800eb74:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_2_REG, &status_reg_temp_h);
 800eb76:	1dfb      	adds	r3, r7, #7
 800eb78:	4619      	mov	r1, r3
 800eb7a:	200a      	movs	r0, #10
 800eb7c:	f7fc ff34 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_2_REG+1, &status_reg_temp_l);
 800eb80:	1dbb      	adds	r3, r7, #6
 800eb82:	4619      	mov	r1, r3
 800eb84:	200b      	movs	r0, #11
 800eb86:	f7fc ff2f 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_end_address_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800eb8a:	79fb      	ldrb	r3, [r7, #7]
 800eb8c:	021b      	lsls	r3, r3, #8
 800eb8e:	b21a      	sxth	r2, r3
 800eb90:	79bb      	ldrb	r3, [r7, #6]
 800eb92:	b21b      	sxth	r3, r3
 800eb94:	4313      	orrs	r3, r2
 800eb96:	b21b      	sxth	r3, r3
 800eb98:	b29a      	uxth	r2, r3
 800eb9a:	4b67      	ldr	r3, [pc, #412]	; (800ed38 <read_change_boot_registers+0x290>)
 800eb9c:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_1_REG, &status_reg_temp_h);
 800eb9e:	1dfb      	adds	r3, r7, #7
 800eba0:	4619      	mov	r1, r3
 800eba2:	200c      	movs	r0, #12
 800eba4:	f7fc ff20 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_1_REG+1, &status_reg_temp_l);
 800eba8:	1dbb      	adds	r3, r7, #6
 800ebaa:	4619      	mov	r1, r3
 800ebac:	200d      	movs	r0, #13
 800ebae:	f7fc ff1b 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_end_address_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ebb2:	79fb      	ldrb	r3, [r7, #7]
 800ebb4:	021b      	lsls	r3, r3, #8
 800ebb6:	b21a      	sxth	r2, r3
 800ebb8:	79bb      	ldrb	r3, [r7, #6]
 800ebba:	b21b      	sxth	r3, r3
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	b21b      	sxth	r3, r3
 800ebc0:	b29a      	uxth	r2, r3
 800ebc2:	4b5d      	ldr	r3, [pc, #372]	; (800ed38 <read_change_boot_registers+0x290>)
 800ebc4:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_0_REG, &status_reg_temp_h);
 800ebc6:	1dfb      	adds	r3, r7, #7
 800ebc8:	4619      	mov	r1, r3
 800ebca:	200e      	movs	r0, #14
 800ebcc:	f7fc ff0c 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_0_REG+1, &status_reg_temp_l);
 800ebd0:	1dbb      	adds	r3, r7, #6
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	200f      	movs	r0, #15
 800ebd6:	f7fc ff07 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_end_address_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ebda:	79fb      	ldrb	r3, [r7, #7]
 800ebdc:	021b      	lsls	r3, r3, #8
 800ebde:	b21a      	sxth	r2, r3
 800ebe0:	79bb      	ldrb	r3, [r7, #6]
 800ebe2:	b21b      	sxth	r3, r3
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	b21b      	sxth	r3, r3
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	4b53      	ldr	r3, [pc, #332]	; (800ed38 <read_change_boot_registers+0x290>)
 800ebec:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CHANGE_BOOT_CRC_HIGH_REG, &status_reg_temp_h);
 800ebee:	1dfb      	adds	r3, r7, #7
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	2010      	movs	r0, #16
 800ebf4:	f7fc fef8 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_CRC_HIGH_REG+1, &status_reg_temp_l);
 800ebf8:	1dbb      	adds	r3, r7, #6
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	2011      	movs	r0, #17
 800ebfe:	f7fc fef3 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ec02:	79fb      	ldrb	r3, [r7, #7]
 800ec04:	021b      	lsls	r3, r3, #8
 800ec06:	b21a      	sxth	r2, r3
 800ec08:	79bb      	ldrb	r3, [r7, #6]
 800ec0a:	b21b      	sxth	r3, r3
 800ec0c:	4313      	orrs	r3, r2
 800ec0e:	b21b      	sxth	r3, r3
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	4b49      	ldr	r3, [pc, #292]	; (800ed38 <read_change_boot_registers+0x290>)
 800ec14:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*CHANGE_BOOT_CRC_LOW_REG, &status_reg_temp_h);
 800ec16:	1dfb      	adds	r3, r7, #7
 800ec18:	4619      	mov	r1, r3
 800ec1a:	2012      	movs	r0, #18
 800ec1c:	f7fc fee4 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_CRC_LOW_REG+1, &status_reg_temp_l);
 800ec20:	1dbb      	adds	r3, r7, #6
 800ec22:	4619      	mov	r1, r3
 800ec24:	2013      	movs	r0, #19
 800ec26:	f7fc fedf 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ec2a:	79fb      	ldrb	r3, [r7, #7]
 800ec2c:	021b      	lsls	r3, r3, #8
 800ec2e:	b21a      	sxth	r2, r3
 800ec30:	79bb      	ldrb	r3, [r7, #6]
 800ec32:	b21b      	sxth	r3, r3
 800ec34:	4313      	orrs	r3, r2
 800ec36:	b21b      	sxth	r3, r3
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	4b3f      	ldr	r3, [pc, #252]	; (800ed38 <read_change_boot_registers+0x290>)
 800ec3c:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 800ec3e:	1dfb      	adds	r3, r7, #7
 800ec40:	4619      	mov	r1, r3
 800ec42:	2014      	movs	r0, #20
 800ec44:	f7fc fed0 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 800ec48:	1dbb      	adds	r3, r7, #6
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	2015      	movs	r0, #21
 800ec4e:	f7fc fecb 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ec52:	79fb      	ldrb	r3, [r7, #7]
 800ec54:	021b      	lsls	r3, r3, #8
 800ec56:	b21a      	sxth	r2, r3
 800ec58:	79bb      	ldrb	r3, [r7, #6]
 800ec5a:	b21b      	sxth	r3, r3
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	b21b      	sxth	r3, r3
 800ec60:	b29a      	uxth	r2, r3
 800ec62:	4b35      	ldr	r3, [pc, #212]	; (800ed38 <read_change_boot_registers+0x290>)
 800ec64:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 800ec66:	1dfb      	adds	r3, r7, #7
 800ec68:	4619      	mov	r1, r3
 800ec6a:	2016      	movs	r0, #22
 800ec6c:	f7fc febc 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 800ec70:	1dbb      	adds	r3, r7, #6
 800ec72:	4619      	mov	r1, r3
 800ec74:	2017      	movs	r0, #23
 800ec76:	f7fc feb7 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ec7a:	79fb      	ldrb	r3, [r7, #7]
 800ec7c:	021b      	lsls	r3, r3, #8
 800ec7e:	b21a      	sxth	r2, r3
 800ec80:	79bb      	ldrb	r3, [r7, #6]
 800ec82:	b21b      	sxth	r3, r3
 800ec84:	4313      	orrs	r3, r2
 800ec86:	b21b      	sxth	r3, r3
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	4b2b      	ldr	r3, [pc, #172]	; (800ed38 <read_change_boot_registers+0x290>)
 800ec8c:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_1_REG, &status_reg_temp_h);
 800ec8e:	1dfb      	adds	r3, r7, #7
 800ec90:	4619      	mov	r1, r3
 800ec92:	2018      	movs	r0, #24
 800ec94:	f7fc fea8 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_1_REG+1, &status_reg_temp_l);
 800ec98:	1dbb      	adds	r3, r7, #6
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	2019      	movs	r0, #25
 800ec9e:	f7fc fea3 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800eca2:	79fb      	ldrb	r3, [r7, #7]
 800eca4:	021b      	lsls	r3, r3, #8
 800eca6:	b21a      	sxth	r2, r3
 800eca8:	79bb      	ldrb	r3, [r7, #6]
 800ecaa:	b21b      	sxth	r3, r3
 800ecac:	4313      	orrs	r3, r2
 800ecae:	b21b      	sxth	r3, r3
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	4b21      	ldr	r3, [pc, #132]	; (800ed38 <read_change_boot_registers+0x290>)
 800ecb4:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_0_REG, &status_reg_temp_h);
 800ecb6:	1dfb      	adds	r3, r7, #7
 800ecb8:	4619      	mov	r1, r3
 800ecba:	201a      	movs	r0, #26
 800ecbc:	f7fc fe94 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_0_REG+1, &status_reg_temp_l);
 800ecc0:	1dbb      	adds	r3, r7, #6
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	201b      	movs	r0, #27
 800ecc6:	f7fc fe8f 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ecca:	79fb      	ldrb	r3, [r7, #7]
 800eccc:	021b      	lsls	r3, r3, #8
 800ecce:	b21a      	sxth	r2, r3
 800ecd0:	79bb      	ldrb	r3, [r7, #6]
 800ecd2:	b21b      	sxth	r3, r3
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	b21b      	sxth	r3, r3
 800ecd8:	b29a      	uxth	r2, r3
 800ecda:	4b17      	ldr	r3, [pc, #92]	; (800ed38 <read_change_boot_registers+0x290>)
 800ecdc:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*CHANGE_BOOT_CRC_CORRECTNESS_REG, &status_reg_temp_h);
 800ecde:	1dfb      	adds	r3, r7, #7
 800ece0:	4619      	mov	r1, r3
 800ece2:	201c      	movs	r0, #28
 800ece4:	f7fc fe80 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_CRC_CORRECTNESS_REG+1, &status_reg_temp_l);
 800ece8:	1dbb      	adds	r3, r7, #6
 800ecea:	4619      	mov	r1, r3
 800ecec:	201d      	movs	r0, #29
 800ecee:	f7fc fe7b 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_crc_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ecf2:	79fb      	ldrb	r3, [r7, #7]
 800ecf4:	021b      	lsls	r3, r3, #8
 800ecf6:	b21a      	sxth	r2, r3
 800ecf8:	79bb      	ldrb	r3, [r7, #6]
 800ecfa:	b21b      	sxth	r3, r3
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	b21b      	sxth	r3, r3
 800ed00:	b29a      	uxth	r2, r3
 800ed02:	4b0d      	ldr	r3, [pc, #52]	; (800ed38 <read_change_boot_registers+0x290>)
 800ed04:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*CHANGE_BOOT_WRITE_REG, &status_reg_temp_h);
 800ed06:	1dfb      	adds	r3, r7, #7
 800ed08:	4619      	mov	r1, r3
 800ed0a:	201e      	movs	r0, #30
 800ed0c:	f7fc fe6c 	bl	800b9e8 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_WRITE_REG+1, &status_reg_temp_l);
 800ed10:	1dbb      	adds	r3, r7, #6
 800ed12:	4619      	mov	r1, r3
 800ed14:	201f      	movs	r0, #31
 800ed16:	f7fc fe67 	bl	800b9e8 <fm25v02_read>
	change_boot_registers.change_boot_write_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ed1a:	79fb      	ldrb	r3, [r7, #7]
 800ed1c:	021b      	lsls	r3, r3, #8
 800ed1e:	b21a      	sxth	r2, r3
 800ed20:	79bb      	ldrb	r3, [r7, #6]
 800ed22:	b21b      	sxth	r3, r3
 800ed24:	4313      	orrs	r3, r2
 800ed26:	b21b      	sxth	r3, r3
 800ed28:	b29a      	uxth	r2, r3
 800ed2a:	4b03      	ldr	r3, [pc, #12]	; (800ed38 <read_change_boot_registers+0x290>)
 800ed2c:	83da      	strh	r2, [r3, #30]

}
 800ed2e:	bf00      	nop
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	200189dc 	.word	0x200189dc

0800ed3c <CRC16>:



//--------------------- Процедура расчета CRC16 -------------------------------------

 unsigned int CRC16( unsigned char * pucFrame, unsigned int usLen ){
 800ed3c:	b480      	push	{r7}
 800ed3e:	b085      	sub	sp, #20
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6039      	str	r1, [r7, #0]
  unsigned char MB_Slave_ucCRCHi = 0xFF;
 800ed46:	23ff      	movs	r3, #255	; 0xff
 800ed48:	73fb      	strb	r3, [r7, #15]
  unsigned char MB_Slave_ucCRCLo = 0xFF;
 800ed4a:	23ff      	movs	r3, #255	; 0xff
 800ed4c:	73bb      	strb	r3, [r7, #14]
  int iIndex;
  //
  while( usLen-- ){
 800ed4e:	e013      	b.n	800ed78 <CRC16+0x3c>
    iIndex = MB_Slave_ucCRCLo ^ *( pucFrame++ );
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	1c5a      	adds	r2, r3, #1
 800ed54:	607a      	str	r2, [r7, #4]
 800ed56:	781a      	ldrb	r2, [r3, #0]
 800ed58:	7bbb      	ldrb	r3, [r7, #14]
 800ed5a:	4053      	eors	r3, r2
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	60bb      	str	r3, [r7, #8]
    MB_Slave_ucCRCLo = MB_Slave_ucCRCHi ^ MB_Slave_aucCRCHi[iIndex];
 800ed60:	4a0d      	ldr	r2, [pc, #52]	; (800ed98 <CRC16+0x5c>)
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	4413      	add	r3, r2
 800ed66:	781a      	ldrb	r2, [r3, #0]
 800ed68:	7bfb      	ldrb	r3, [r7, #15]
 800ed6a:	4053      	eors	r3, r2
 800ed6c:	73bb      	strb	r3, [r7, #14]
    MB_Slave_ucCRCHi = MB_Slave_aucCRCLo[iIndex];
 800ed6e:	4a0b      	ldr	r2, [pc, #44]	; (800ed9c <CRC16+0x60>)
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	4413      	add	r3, r2
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	73fb      	strb	r3, [r7, #15]
  while( usLen-- ){
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	1e5a      	subs	r2, r3, #1
 800ed7c:	603a      	str	r2, [r7, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d1e6      	bne.n	800ed50 <CRC16+0x14>
  }
  return MB_Slave_ucCRCHi << 8 | MB_Slave_ucCRCLo;
 800ed82:	7bfb      	ldrb	r3, [r7, #15]
 800ed84:	021a      	lsls	r2, r3, #8
 800ed86:	7bbb      	ldrb	r3, [r7, #14]
 800ed88:	4313      	orrs	r3, r2
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3714      	adds	r7, #20
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop
 800ed98:	0800fac0 	.word	0x0800fac0
 800ed9c:	0800fbc0 	.word	0x0800fbc0

0800eda0 <__errno>:
 800eda0:	4b01      	ldr	r3, [pc, #4]	; (800eda8 <__errno+0x8>)
 800eda2:	6818      	ldr	r0, [r3, #0]
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	20000024 	.word	0x20000024

0800edac <__libc_init_array>:
 800edac:	b570      	push	{r4, r5, r6, lr}
 800edae:	4d0d      	ldr	r5, [pc, #52]	; (800ede4 <__libc_init_array+0x38>)
 800edb0:	4c0d      	ldr	r4, [pc, #52]	; (800ede8 <__libc_init_array+0x3c>)
 800edb2:	1b64      	subs	r4, r4, r5
 800edb4:	10a4      	asrs	r4, r4, #2
 800edb6:	2600      	movs	r6, #0
 800edb8:	42a6      	cmp	r6, r4
 800edba:	d109      	bne.n	800edd0 <__libc_init_array+0x24>
 800edbc:	4d0b      	ldr	r5, [pc, #44]	; (800edec <__libc_init_array+0x40>)
 800edbe:	4c0c      	ldr	r4, [pc, #48]	; (800edf0 <__libc_init_array+0x44>)
 800edc0:	f000 fcd0 	bl	800f764 <_init>
 800edc4:	1b64      	subs	r4, r4, r5
 800edc6:	10a4      	asrs	r4, r4, #2
 800edc8:	2600      	movs	r6, #0
 800edca:	42a6      	cmp	r6, r4
 800edcc:	d105      	bne.n	800edda <__libc_init_array+0x2e>
 800edce:	bd70      	pop	{r4, r5, r6, pc}
 800edd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800edd4:	4798      	blx	r3
 800edd6:	3601      	adds	r6, #1
 800edd8:	e7ee      	b.n	800edb8 <__libc_init_array+0xc>
 800edda:	f855 3b04 	ldr.w	r3, [r5], #4
 800edde:	4798      	blx	r3
 800ede0:	3601      	adds	r6, #1
 800ede2:	e7f2      	b.n	800edca <__libc_init_array+0x1e>
 800ede4:	0800fd5c 	.word	0x0800fd5c
 800ede8:	0800fd5c 	.word	0x0800fd5c
 800edec:	0800fd5c 	.word	0x0800fd5c
 800edf0:	0800fd60 	.word	0x0800fd60

0800edf4 <__retarget_lock_acquire_recursive>:
 800edf4:	4770      	bx	lr

0800edf6 <__retarget_lock_release_recursive>:
 800edf6:	4770      	bx	lr

0800edf8 <memcpy>:
 800edf8:	440a      	add	r2, r1
 800edfa:	4291      	cmp	r1, r2
 800edfc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee00:	d100      	bne.n	800ee04 <memcpy+0xc>
 800ee02:	4770      	bx	lr
 800ee04:	b510      	push	{r4, lr}
 800ee06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee0e:	4291      	cmp	r1, r2
 800ee10:	d1f9      	bne.n	800ee06 <memcpy+0xe>
 800ee12:	bd10      	pop	{r4, pc}

0800ee14 <memset>:
 800ee14:	4402      	add	r2, r0
 800ee16:	4603      	mov	r3, r0
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d100      	bne.n	800ee1e <memset+0xa>
 800ee1c:	4770      	bx	lr
 800ee1e:	f803 1b01 	strb.w	r1, [r3], #1
 800ee22:	e7f9      	b.n	800ee18 <memset+0x4>

0800ee24 <_malloc_r>:
 800ee24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee26:	1ccd      	adds	r5, r1, #3
 800ee28:	f025 0503 	bic.w	r5, r5, #3
 800ee2c:	3508      	adds	r5, #8
 800ee2e:	2d0c      	cmp	r5, #12
 800ee30:	bf38      	it	cc
 800ee32:	250c      	movcc	r5, #12
 800ee34:	2d00      	cmp	r5, #0
 800ee36:	4606      	mov	r6, r0
 800ee38:	db01      	blt.n	800ee3e <_malloc_r+0x1a>
 800ee3a:	42a9      	cmp	r1, r5
 800ee3c:	d903      	bls.n	800ee46 <_malloc_r+0x22>
 800ee3e:	230c      	movs	r3, #12
 800ee40:	6033      	str	r3, [r6, #0]
 800ee42:	2000      	movs	r0, #0
 800ee44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee46:	f000 f8f9 	bl	800f03c <__malloc_lock>
 800ee4a:	4921      	ldr	r1, [pc, #132]	; (800eed0 <_malloc_r+0xac>)
 800ee4c:	680a      	ldr	r2, [r1, #0]
 800ee4e:	4614      	mov	r4, r2
 800ee50:	b99c      	cbnz	r4, 800ee7a <_malloc_r+0x56>
 800ee52:	4f20      	ldr	r7, [pc, #128]	; (800eed4 <_malloc_r+0xb0>)
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	b923      	cbnz	r3, 800ee62 <_malloc_r+0x3e>
 800ee58:	4621      	mov	r1, r4
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f000 f8a6 	bl	800efac <_sbrk_r>
 800ee60:	6038      	str	r0, [r7, #0]
 800ee62:	4629      	mov	r1, r5
 800ee64:	4630      	mov	r0, r6
 800ee66:	f000 f8a1 	bl	800efac <_sbrk_r>
 800ee6a:	1c43      	adds	r3, r0, #1
 800ee6c:	d123      	bne.n	800eeb6 <_malloc_r+0x92>
 800ee6e:	230c      	movs	r3, #12
 800ee70:	6033      	str	r3, [r6, #0]
 800ee72:	4630      	mov	r0, r6
 800ee74:	f000 f8e8 	bl	800f048 <__malloc_unlock>
 800ee78:	e7e3      	b.n	800ee42 <_malloc_r+0x1e>
 800ee7a:	6823      	ldr	r3, [r4, #0]
 800ee7c:	1b5b      	subs	r3, r3, r5
 800ee7e:	d417      	bmi.n	800eeb0 <_malloc_r+0x8c>
 800ee80:	2b0b      	cmp	r3, #11
 800ee82:	d903      	bls.n	800ee8c <_malloc_r+0x68>
 800ee84:	6023      	str	r3, [r4, #0]
 800ee86:	441c      	add	r4, r3
 800ee88:	6025      	str	r5, [r4, #0]
 800ee8a:	e004      	b.n	800ee96 <_malloc_r+0x72>
 800ee8c:	6863      	ldr	r3, [r4, #4]
 800ee8e:	42a2      	cmp	r2, r4
 800ee90:	bf0c      	ite	eq
 800ee92:	600b      	streq	r3, [r1, #0]
 800ee94:	6053      	strne	r3, [r2, #4]
 800ee96:	4630      	mov	r0, r6
 800ee98:	f000 f8d6 	bl	800f048 <__malloc_unlock>
 800ee9c:	f104 000b 	add.w	r0, r4, #11
 800eea0:	1d23      	adds	r3, r4, #4
 800eea2:	f020 0007 	bic.w	r0, r0, #7
 800eea6:	1ac2      	subs	r2, r0, r3
 800eea8:	d0cc      	beq.n	800ee44 <_malloc_r+0x20>
 800eeaa:	1a1b      	subs	r3, r3, r0
 800eeac:	50a3      	str	r3, [r4, r2]
 800eeae:	e7c9      	b.n	800ee44 <_malloc_r+0x20>
 800eeb0:	4622      	mov	r2, r4
 800eeb2:	6864      	ldr	r4, [r4, #4]
 800eeb4:	e7cc      	b.n	800ee50 <_malloc_r+0x2c>
 800eeb6:	1cc4      	adds	r4, r0, #3
 800eeb8:	f024 0403 	bic.w	r4, r4, #3
 800eebc:	42a0      	cmp	r0, r4
 800eebe:	d0e3      	beq.n	800ee88 <_malloc_r+0x64>
 800eec0:	1a21      	subs	r1, r4, r0
 800eec2:	4630      	mov	r0, r6
 800eec4:	f000 f872 	bl	800efac <_sbrk_r>
 800eec8:	3001      	adds	r0, #1
 800eeca:	d1dd      	bne.n	800ee88 <_malloc_r+0x64>
 800eecc:	e7cf      	b.n	800ee6e <_malloc_r+0x4a>
 800eece:	bf00      	nop
 800eed0:	20007fa4 	.word	0x20007fa4
 800eed4:	20007fa8 	.word	0x20007fa8

0800eed8 <cleanup_glue>:
 800eed8:	b538      	push	{r3, r4, r5, lr}
 800eeda:	460c      	mov	r4, r1
 800eedc:	6809      	ldr	r1, [r1, #0]
 800eede:	4605      	mov	r5, r0
 800eee0:	b109      	cbz	r1, 800eee6 <cleanup_glue+0xe>
 800eee2:	f7ff fff9 	bl	800eed8 <cleanup_glue>
 800eee6:	4621      	mov	r1, r4
 800eee8:	4628      	mov	r0, r5
 800eeea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eeee:	f000 b8b1 	b.w	800f054 <_free_r>
	...

0800eef4 <_reclaim_reent>:
 800eef4:	4b2c      	ldr	r3, [pc, #176]	; (800efa8 <_reclaim_reent+0xb4>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	4283      	cmp	r3, r0
 800eefa:	b570      	push	{r4, r5, r6, lr}
 800eefc:	4604      	mov	r4, r0
 800eefe:	d051      	beq.n	800efa4 <_reclaim_reent+0xb0>
 800ef00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ef02:	b143      	cbz	r3, 800ef16 <_reclaim_reent+0x22>
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d14a      	bne.n	800efa0 <_reclaim_reent+0xac>
 800ef0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef0c:	6819      	ldr	r1, [r3, #0]
 800ef0e:	b111      	cbz	r1, 800ef16 <_reclaim_reent+0x22>
 800ef10:	4620      	mov	r0, r4
 800ef12:	f000 f89f 	bl	800f054 <_free_r>
 800ef16:	6961      	ldr	r1, [r4, #20]
 800ef18:	b111      	cbz	r1, 800ef20 <_reclaim_reent+0x2c>
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f000 f89a 	bl	800f054 <_free_r>
 800ef20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ef22:	b111      	cbz	r1, 800ef2a <_reclaim_reent+0x36>
 800ef24:	4620      	mov	r0, r4
 800ef26:	f000 f895 	bl	800f054 <_free_r>
 800ef2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef2c:	b111      	cbz	r1, 800ef34 <_reclaim_reent+0x40>
 800ef2e:	4620      	mov	r0, r4
 800ef30:	f000 f890 	bl	800f054 <_free_r>
 800ef34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ef36:	b111      	cbz	r1, 800ef3e <_reclaim_reent+0x4a>
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f000 f88b 	bl	800f054 <_free_r>
 800ef3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef40:	b111      	cbz	r1, 800ef48 <_reclaim_reent+0x54>
 800ef42:	4620      	mov	r0, r4
 800ef44:	f000 f886 	bl	800f054 <_free_r>
 800ef48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ef4a:	b111      	cbz	r1, 800ef52 <_reclaim_reent+0x5e>
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	f000 f881 	bl	800f054 <_free_r>
 800ef52:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ef54:	b111      	cbz	r1, 800ef5c <_reclaim_reent+0x68>
 800ef56:	4620      	mov	r0, r4
 800ef58:	f000 f87c 	bl	800f054 <_free_r>
 800ef5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef5e:	b111      	cbz	r1, 800ef66 <_reclaim_reent+0x72>
 800ef60:	4620      	mov	r0, r4
 800ef62:	f000 f877 	bl	800f054 <_free_r>
 800ef66:	69a3      	ldr	r3, [r4, #24]
 800ef68:	b1e3      	cbz	r3, 800efa4 <_reclaim_reent+0xb0>
 800ef6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	4798      	blx	r3
 800ef70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ef72:	b1b9      	cbz	r1, 800efa4 <_reclaim_reent+0xb0>
 800ef74:	4620      	mov	r0, r4
 800ef76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef7a:	f7ff bfad 	b.w	800eed8 <cleanup_glue>
 800ef7e:	5949      	ldr	r1, [r1, r5]
 800ef80:	b941      	cbnz	r1, 800ef94 <_reclaim_reent+0xa0>
 800ef82:	3504      	adds	r5, #4
 800ef84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef86:	2d80      	cmp	r5, #128	; 0x80
 800ef88:	68d9      	ldr	r1, [r3, #12]
 800ef8a:	d1f8      	bne.n	800ef7e <_reclaim_reent+0x8a>
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f000 f861 	bl	800f054 <_free_r>
 800ef92:	e7ba      	b.n	800ef0a <_reclaim_reent+0x16>
 800ef94:	680e      	ldr	r6, [r1, #0]
 800ef96:	4620      	mov	r0, r4
 800ef98:	f000 f85c 	bl	800f054 <_free_r>
 800ef9c:	4631      	mov	r1, r6
 800ef9e:	e7ef      	b.n	800ef80 <_reclaim_reent+0x8c>
 800efa0:	2500      	movs	r5, #0
 800efa2:	e7ef      	b.n	800ef84 <_reclaim_reent+0x90>
 800efa4:	bd70      	pop	{r4, r5, r6, pc}
 800efa6:	bf00      	nop
 800efa8:	20000024 	.word	0x20000024

0800efac <_sbrk_r>:
 800efac:	b538      	push	{r3, r4, r5, lr}
 800efae:	4d06      	ldr	r5, [pc, #24]	; (800efc8 <_sbrk_r+0x1c>)
 800efb0:	2300      	movs	r3, #0
 800efb2:	4604      	mov	r4, r0
 800efb4:	4608      	mov	r0, r1
 800efb6:	602b      	str	r3, [r5, #0]
 800efb8:	f7f2 fc16 	bl	80017e8 <_sbrk>
 800efbc:	1c43      	adds	r3, r0, #1
 800efbe:	d102      	bne.n	800efc6 <_sbrk_r+0x1a>
 800efc0:	682b      	ldr	r3, [r5, #0]
 800efc2:	b103      	cbz	r3, 800efc6 <_sbrk_r+0x1a>
 800efc4:	6023      	str	r3, [r4, #0]
 800efc6:	bd38      	pop	{r3, r4, r5, pc}
 800efc8:	20018b28 	.word	0x20018b28

0800efcc <siprintf>:
 800efcc:	b40e      	push	{r1, r2, r3}
 800efce:	b500      	push	{lr}
 800efd0:	b09c      	sub	sp, #112	; 0x70
 800efd2:	ab1d      	add	r3, sp, #116	; 0x74
 800efd4:	9002      	str	r0, [sp, #8]
 800efd6:	9006      	str	r0, [sp, #24]
 800efd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efdc:	4809      	ldr	r0, [pc, #36]	; (800f004 <siprintf+0x38>)
 800efde:	9107      	str	r1, [sp, #28]
 800efe0:	9104      	str	r1, [sp, #16]
 800efe2:	4909      	ldr	r1, [pc, #36]	; (800f008 <siprintf+0x3c>)
 800efe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800efe8:	9105      	str	r1, [sp, #20]
 800efea:	6800      	ldr	r0, [r0, #0]
 800efec:	9301      	str	r3, [sp, #4]
 800efee:	a902      	add	r1, sp, #8
 800eff0:	f000 f8dc 	bl	800f1ac <_svfiprintf_r>
 800eff4:	9b02      	ldr	r3, [sp, #8]
 800eff6:	2200      	movs	r2, #0
 800eff8:	701a      	strb	r2, [r3, #0]
 800effa:	b01c      	add	sp, #112	; 0x70
 800effc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f000:	b003      	add	sp, #12
 800f002:	4770      	bx	lr
 800f004:	20000024 	.word	0x20000024
 800f008:	ffff0208 	.word	0xffff0208

0800f00c <strstr>:
 800f00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f00e:	780c      	ldrb	r4, [r1, #0]
 800f010:	b164      	cbz	r4, 800f02c <strstr+0x20>
 800f012:	4603      	mov	r3, r0
 800f014:	781a      	ldrb	r2, [r3, #0]
 800f016:	4618      	mov	r0, r3
 800f018:	1c5e      	adds	r6, r3, #1
 800f01a:	b90a      	cbnz	r2, 800f020 <strstr+0x14>
 800f01c:	4610      	mov	r0, r2
 800f01e:	e005      	b.n	800f02c <strstr+0x20>
 800f020:	4294      	cmp	r4, r2
 800f022:	d108      	bne.n	800f036 <strstr+0x2a>
 800f024:	460d      	mov	r5, r1
 800f026:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800f02a:	b902      	cbnz	r2, 800f02e <strstr+0x22>
 800f02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f02e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800f032:	4297      	cmp	r7, r2
 800f034:	d0f7      	beq.n	800f026 <strstr+0x1a>
 800f036:	4633      	mov	r3, r6
 800f038:	e7ec      	b.n	800f014 <strstr+0x8>
	...

0800f03c <__malloc_lock>:
 800f03c:	4801      	ldr	r0, [pc, #4]	; (800f044 <__malloc_lock+0x8>)
 800f03e:	f7ff bed9 	b.w	800edf4 <__retarget_lock_acquire_recursive>
 800f042:	bf00      	nop
 800f044:	20018b20 	.word	0x20018b20

0800f048 <__malloc_unlock>:
 800f048:	4801      	ldr	r0, [pc, #4]	; (800f050 <__malloc_unlock+0x8>)
 800f04a:	f7ff bed4 	b.w	800edf6 <__retarget_lock_release_recursive>
 800f04e:	bf00      	nop
 800f050:	20018b20 	.word	0x20018b20

0800f054 <_free_r>:
 800f054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f056:	2900      	cmp	r1, #0
 800f058:	d048      	beq.n	800f0ec <_free_r+0x98>
 800f05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f05e:	9001      	str	r0, [sp, #4]
 800f060:	2b00      	cmp	r3, #0
 800f062:	f1a1 0404 	sub.w	r4, r1, #4
 800f066:	bfb8      	it	lt
 800f068:	18e4      	addlt	r4, r4, r3
 800f06a:	f7ff ffe7 	bl	800f03c <__malloc_lock>
 800f06e:	4a20      	ldr	r2, [pc, #128]	; (800f0f0 <_free_r+0x9c>)
 800f070:	9801      	ldr	r0, [sp, #4]
 800f072:	6813      	ldr	r3, [r2, #0]
 800f074:	4615      	mov	r5, r2
 800f076:	b933      	cbnz	r3, 800f086 <_free_r+0x32>
 800f078:	6063      	str	r3, [r4, #4]
 800f07a:	6014      	str	r4, [r2, #0]
 800f07c:	b003      	add	sp, #12
 800f07e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f082:	f7ff bfe1 	b.w	800f048 <__malloc_unlock>
 800f086:	42a3      	cmp	r3, r4
 800f088:	d90b      	bls.n	800f0a2 <_free_r+0x4e>
 800f08a:	6821      	ldr	r1, [r4, #0]
 800f08c:	1862      	adds	r2, r4, r1
 800f08e:	4293      	cmp	r3, r2
 800f090:	bf04      	itt	eq
 800f092:	681a      	ldreq	r2, [r3, #0]
 800f094:	685b      	ldreq	r3, [r3, #4]
 800f096:	6063      	str	r3, [r4, #4]
 800f098:	bf04      	itt	eq
 800f09a:	1852      	addeq	r2, r2, r1
 800f09c:	6022      	streq	r2, [r4, #0]
 800f09e:	602c      	str	r4, [r5, #0]
 800f0a0:	e7ec      	b.n	800f07c <_free_r+0x28>
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	b10b      	cbz	r3, 800f0ac <_free_r+0x58>
 800f0a8:	42a3      	cmp	r3, r4
 800f0aa:	d9fa      	bls.n	800f0a2 <_free_r+0x4e>
 800f0ac:	6811      	ldr	r1, [r2, #0]
 800f0ae:	1855      	adds	r5, r2, r1
 800f0b0:	42a5      	cmp	r5, r4
 800f0b2:	d10b      	bne.n	800f0cc <_free_r+0x78>
 800f0b4:	6824      	ldr	r4, [r4, #0]
 800f0b6:	4421      	add	r1, r4
 800f0b8:	1854      	adds	r4, r2, r1
 800f0ba:	42a3      	cmp	r3, r4
 800f0bc:	6011      	str	r1, [r2, #0]
 800f0be:	d1dd      	bne.n	800f07c <_free_r+0x28>
 800f0c0:	681c      	ldr	r4, [r3, #0]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	6053      	str	r3, [r2, #4]
 800f0c6:	4421      	add	r1, r4
 800f0c8:	6011      	str	r1, [r2, #0]
 800f0ca:	e7d7      	b.n	800f07c <_free_r+0x28>
 800f0cc:	d902      	bls.n	800f0d4 <_free_r+0x80>
 800f0ce:	230c      	movs	r3, #12
 800f0d0:	6003      	str	r3, [r0, #0]
 800f0d2:	e7d3      	b.n	800f07c <_free_r+0x28>
 800f0d4:	6825      	ldr	r5, [r4, #0]
 800f0d6:	1961      	adds	r1, r4, r5
 800f0d8:	428b      	cmp	r3, r1
 800f0da:	bf04      	itt	eq
 800f0dc:	6819      	ldreq	r1, [r3, #0]
 800f0de:	685b      	ldreq	r3, [r3, #4]
 800f0e0:	6063      	str	r3, [r4, #4]
 800f0e2:	bf04      	itt	eq
 800f0e4:	1949      	addeq	r1, r1, r5
 800f0e6:	6021      	streq	r1, [r4, #0]
 800f0e8:	6054      	str	r4, [r2, #4]
 800f0ea:	e7c7      	b.n	800f07c <_free_r+0x28>
 800f0ec:	b003      	add	sp, #12
 800f0ee:	bd30      	pop	{r4, r5, pc}
 800f0f0:	20007fa4 	.word	0x20007fa4

0800f0f4 <__ssputs_r>:
 800f0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0f8:	688e      	ldr	r6, [r1, #8]
 800f0fa:	429e      	cmp	r6, r3
 800f0fc:	4682      	mov	sl, r0
 800f0fe:	460c      	mov	r4, r1
 800f100:	4690      	mov	r8, r2
 800f102:	461f      	mov	r7, r3
 800f104:	d838      	bhi.n	800f178 <__ssputs_r+0x84>
 800f106:	898a      	ldrh	r2, [r1, #12]
 800f108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f10c:	d032      	beq.n	800f174 <__ssputs_r+0x80>
 800f10e:	6825      	ldr	r5, [r4, #0]
 800f110:	6909      	ldr	r1, [r1, #16]
 800f112:	eba5 0901 	sub.w	r9, r5, r1
 800f116:	6965      	ldr	r5, [r4, #20]
 800f118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f11c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f120:	3301      	adds	r3, #1
 800f122:	444b      	add	r3, r9
 800f124:	106d      	asrs	r5, r5, #1
 800f126:	429d      	cmp	r5, r3
 800f128:	bf38      	it	cc
 800f12a:	461d      	movcc	r5, r3
 800f12c:	0553      	lsls	r3, r2, #21
 800f12e:	d531      	bpl.n	800f194 <__ssputs_r+0xa0>
 800f130:	4629      	mov	r1, r5
 800f132:	f7ff fe77 	bl	800ee24 <_malloc_r>
 800f136:	4606      	mov	r6, r0
 800f138:	b950      	cbnz	r0, 800f150 <__ssputs_r+0x5c>
 800f13a:	230c      	movs	r3, #12
 800f13c:	f8ca 3000 	str.w	r3, [sl]
 800f140:	89a3      	ldrh	r3, [r4, #12]
 800f142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f146:	81a3      	strh	r3, [r4, #12]
 800f148:	f04f 30ff 	mov.w	r0, #4294967295
 800f14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f150:	6921      	ldr	r1, [r4, #16]
 800f152:	464a      	mov	r2, r9
 800f154:	f7ff fe50 	bl	800edf8 <memcpy>
 800f158:	89a3      	ldrh	r3, [r4, #12]
 800f15a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f162:	81a3      	strh	r3, [r4, #12]
 800f164:	6126      	str	r6, [r4, #16]
 800f166:	6165      	str	r5, [r4, #20]
 800f168:	444e      	add	r6, r9
 800f16a:	eba5 0509 	sub.w	r5, r5, r9
 800f16e:	6026      	str	r6, [r4, #0]
 800f170:	60a5      	str	r5, [r4, #8]
 800f172:	463e      	mov	r6, r7
 800f174:	42be      	cmp	r6, r7
 800f176:	d900      	bls.n	800f17a <__ssputs_r+0x86>
 800f178:	463e      	mov	r6, r7
 800f17a:	4632      	mov	r2, r6
 800f17c:	6820      	ldr	r0, [r4, #0]
 800f17e:	4641      	mov	r1, r8
 800f180:	f000 faa8 	bl	800f6d4 <memmove>
 800f184:	68a3      	ldr	r3, [r4, #8]
 800f186:	6822      	ldr	r2, [r4, #0]
 800f188:	1b9b      	subs	r3, r3, r6
 800f18a:	4432      	add	r2, r6
 800f18c:	60a3      	str	r3, [r4, #8]
 800f18e:	6022      	str	r2, [r4, #0]
 800f190:	2000      	movs	r0, #0
 800f192:	e7db      	b.n	800f14c <__ssputs_r+0x58>
 800f194:	462a      	mov	r2, r5
 800f196:	f000 fab7 	bl	800f708 <_realloc_r>
 800f19a:	4606      	mov	r6, r0
 800f19c:	2800      	cmp	r0, #0
 800f19e:	d1e1      	bne.n	800f164 <__ssputs_r+0x70>
 800f1a0:	6921      	ldr	r1, [r4, #16]
 800f1a2:	4650      	mov	r0, sl
 800f1a4:	f7ff ff56 	bl	800f054 <_free_r>
 800f1a8:	e7c7      	b.n	800f13a <__ssputs_r+0x46>
	...

0800f1ac <_svfiprintf_r>:
 800f1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b0:	4698      	mov	r8, r3
 800f1b2:	898b      	ldrh	r3, [r1, #12]
 800f1b4:	061b      	lsls	r3, r3, #24
 800f1b6:	b09d      	sub	sp, #116	; 0x74
 800f1b8:	4607      	mov	r7, r0
 800f1ba:	460d      	mov	r5, r1
 800f1bc:	4614      	mov	r4, r2
 800f1be:	d50e      	bpl.n	800f1de <_svfiprintf_r+0x32>
 800f1c0:	690b      	ldr	r3, [r1, #16]
 800f1c2:	b963      	cbnz	r3, 800f1de <_svfiprintf_r+0x32>
 800f1c4:	2140      	movs	r1, #64	; 0x40
 800f1c6:	f7ff fe2d 	bl	800ee24 <_malloc_r>
 800f1ca:	6028      	str	r0, [r5, #0]
 800f1cc:	6128      	str	r0, [r5, #16]
 800f1ce:	b920      	cbnz	r0, 800f1da <_svfiprintf_r+0x2e>
 800f1d0:	230c      	movs	r3, #12
 800f1d2:	603b      	str	r3, [r7, #0]
 800f1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d8:	e0d1      	b.n	800f37e <_svfiprintf_r+0x1d2>
 800f1da:	2340      	movs	r3, #64	; 0x40
 800f1dc:	616b      	str	r3, [r5, #20]
 800f1de:	2300      	movs	r3, #0
 800f1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1e2:	2320      	movs	r3, #32
 800f1e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1ec:	2330      	movs	r3, #48	; 0x30
 800f1ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f398 <_svfiprintf_r+0x1ec>
 800f1f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1f6:	f04f 0901 	mov.w	r9, #1
 800f1fa:	4623      	mov	r3, r4
 800f1fc:	469a      	mov	sl, r3
 800f1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f202:	b10a      	cbz	r2, 800f208 <_svfiprintf_r+0x5c>
 800f204:	2a25      	cmp	r2, #37	; 0x25
 800f206:	d1f9      	bne.n	800f1fc <_svfiprintf_r+0x50>
 800f208:	ebba 0b04 	subs.w	fp, sl, r4
 800f20c:	d00b      	beq.n	800f226 <_svfiprintf_r+0x7a>
 800f20e:	465b      	mov	r3, fp
 800f210:	4622      	mov	r2, r4
 800f212:	4629      	mov	r1, r5
 800f214:	4638      	mov	r0, r7
 800f216:	f7ff ff6d 	bl	800f0f4 <__ssputs_r>
 800f21a:	3001      	adds	r0, #1
 800f21c:	f000 80aa 	beq.w	800f374 <_svfiprintf_r+0x1c8>
 800f220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f222:	445a      	add	r2, fp
 800f224:	9209      	str	r2, [sp, #36]	; 0x24
 800f226:	f89a 3000 	ldrb.w	r3, [sl]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	f000 80a2 	beq.w	800f374 <_svfiprintf_r+0x1c8>
 800f230:	2300      	movs	r3, #0
 800f232:	f04f 32ff 	mov.w	r2, #4294967295
 800f236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f23a:	f10a 0a01 	add.w	sl, sl, #1
 800f23e:	9304      	str	r3, [sp, #16]
 800f240:	9307      	str	r3, [sp, #28]
 800f242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f246:	931a      	str	r3, [sp, #104]	; 0x68
 800f248:	4654      	mov	r4, sl
 800f24a:	2205      	movs	r2, #5
 800f24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f250:	4851      	ldr	r0, [pc, #324]	; (800f398 <_svfiprintf_r+0x1ec>)
 800f252:	f7f0 ffc5 	bl	80001e0 <memchr>
 800f256:	9a04      	ldr	r2, [sp, #16]
 800f258:	b9d8      	cbnz	r0, 800f292 <_svfiprintf_r+0xe6>
 800f25a:	06d0      	lsls	r0, r2, #27
 800f25c:	bf44      	itt	mi
 800f25e:	2320      	movmi	r3, #32
 800f260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f264:	0711      	lsls	r1, r2, #28
 800f266:	bf44      	itt	mi
 800f268:	232b      	movmi	r3, #43	; 0x2b
 800f26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f26e:	f89a 3000 	ldrb.w	r3, [sl]
 800f272:	2b2a      	cmp	r3, #42	; 0x2a
 800f274:	d015      	beq.n	800f2a2 <_svfiprintf_r+0xf6>
 800f276:	9a07      	ldr	r2, [sp, #28]
 800f278:	4654      	mov	r4, sl
 800f27a:	2000      	movs	r0, #0
 800f27c:	f04f 0c0a 	mov.w	ip, #10
 800f280:	4621      	mov	r1, r4
 800f282:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f286:	3b30      	subs	r3, #48	; 0x30
 800f288:	2b09      	cmp	r3, #9
 800f28a:	d94e      	bls.n	800f32a <_svfiprintf_r+0x17e>
 800f28c:	b1b0      	cbz	r0, 800f2bc <_svfiprintf_r+0x110>
 800f28e:	9207      	str	r2, [sp, #28]
 800f290:	e014      	b.n	800f2bc <_svfiprintf_r+0x110>
 800f292:	eba0 0308 	sub.w	r3, r0, r8
 800f296:	fa09 f303 	lsl.w	r3, r9, r3
 800f29a:	4313      	orrs	r3, r2
 800f29c:	9304      	str	r3, [sp, #16]
 800f29e:	46a2      	mov	sl, r4
 800f2a0:	e7d2      	b.n	800f248 <_svfiprintf_r+0x9c>
 800f2a2:	9b03      	ldr	r3, [sp, #12]
 800f2a4:	1d19      	adds	r1, r3, #4
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	9103      	str	r1, [sp, #12]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	bfbb      	ittet	lt
 800f2ae:	425b      	neglt	r3, r3
 800f2b0:	f042 0202 	orrlt.w	r2, r2, #2
 800f2b4:	9307      	strge	r3, [sp, #28]
 800f2b6:	9307      	strlt	r3, [sp, #28]
 800f2b8:	bfb8      	it	lt
 800f2ba:	9204      	strlt	r2, [sp, #16]
 800f2bc:	7823      	ldrb	r3, [r4, #0]
 800f2be:	2b2e      	cmp	r3, #46	; 0x2e
 800f2c0:	d10c      	bne.n	800f2dc <_svfiprintf_r+0x130>
 800f2c2:	7863      	ldrb	r3, [r4, #1]
 800f2c4:	2b2a      	cmp	r3, #42	; 0x2a
 800f2c6:	d135      	bne.n	800f334 <_svfiprintf_r+0x188>
 800f2c8:	9b03      	ldr	r3, [sp, #12]
 800f2ca:	1d1a      	adds	r2, r3, #4
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	9203      	str	r2, [sp, #12]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	bfb8      	it	lt
 800f2d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2d8:	3402      	adds	r4, #2
 800f2da:	9305      	str	r3, [sp, #20]
 800f2dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f3a8 <_svfiprintf_r+0x1fc>
 800f2e0:	7821      	ldrb	r1, [r4, #0]
 800f2e2:	2203      	movs	r2, #3
 800f2e4:	4650      	mov	r0, sl
 800f2e6:	f7f0 ff7b 	bl	80001e0 <memchr>
 800f2ea:	b140      	cbz	r0, 800f2fe <_svfiprintf_r+0x152>
 800f2ec:	2340      	movs	r3, #64	; 0x40
 800f2ee:	eba0 000a 	sub.w	r0, r0, sl
 800f2f2:	fa03 f000 	lsl.w	r0, r3, r0
 800f2f6:	9b04      	ldr	r3, [sp, #16]
 800f2f8:	4303      	orrs	r3, r0
 800f2fa:	3401      	adds	r4, #1
 800f2fc:	9304      	str	r3, [sp, #16]
 800f2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f302:	4826      	ldr	r0, [pc, #152]	; (800f39c <_svfiprintf_r+0x1f0>)
 800f304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f308:	2206      	movs	r2, #6
 800f30a:	f7f0 ff69 	bl	80001e0 <memchr>
 800f30e:	2800      	cmp	r0, #0
 800f310:	d038      	beq.n	800f384 <_svfiprintf_r+0x1d8>
 800f312:	4b23      	ldr	r3, [pc, #140]	; (800f3a0 <_svfiprintf_r+0x1f4>)
 800f314:	bb1b      	cbnz	r3, 800f35e <_svfiprintf_r+0x1b2>
 800f316:	9b03      	ldr	r3, [sp, #12]
 800f318:	3307      	adds	r3, #7
 800f31a:	f023 0307 	bic.w	r3, r3, #7
 800f31e:	3308      	adds	r3, #8
 800f320:	9303      	str	r3, [sp, #12]
 800f322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f324:	4433      	add	r3, r6
 800f326:	9309      	str	r3, [sp, #36]	; 0x24
 800f328:	e767      	b.n	800f1fa <_svfiprintf_r+0x4e>
 800f32a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f32e:	460c      	mov	r4, r1
 800f330:	2001      	movs	r0, #1
 800f332:	e7a5      	b.n	800f280 <_svfiprintf_r+0xd4>
 800f334:	2300      	movs	r3, #0
 800f336:	3401      	adds	r4, #1
 800f338:	9305      	str	r3, [sp, #20]
 800f33a:	4619      	mov	r1, r3
 800f33c:	f04f 0c0a 	mov.w	ip, #10
 800f340:	4620      	mov	r0, r4
 800f342:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f346:	3a30      	subs	r2, #48	; 0x30
 800f348:	2a09      	cmp	r2, #9
 800f34a:	d903      	bls.n	800f354 <_svfiprintf_r+0x1a8>
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d0c5      	beq.n	800f2dc <_svfiprintf_r+0x130>
 800f350:	9105      	str	r1, [sp, #20]
 800f352:	e7c3      	b.n	800f2dc <_svfiprintf_r+0x130>
 800f354:	fb0c 2101 	mla	r1, ip, r1, r2
 800f358:	4604      	mov	r4, r0
 800f35a:	2301      	movs	r3, #1
 800f35c:	e7f0      	b.n	800f340 <_svfiprintf_r+0x194>
 800f35e:	ab03      	add	r3, sp, #12
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	462a      	mov	r2, r5
 800f364:	4b0f      	ldr	r3, [pc, #60]	; (800f3a4 <_svfiprintf_r+0x1f8>)
 800f366:	a904      	add	r1, sp, #16
 800f368:	4638      	mov	r0, r7
 800f36a:	f3af 8000 	nop.w
 800f36e:	1c42      	adds	r2, r0, #1
 800f370:	4606      	mov	r6, r0
 800f372:	d1d6      	bne.n	800f322 <_svfiprintf_r+0x176>
 800f374:	89ab      	ldrh	r3, [r5, #12]
 800f376:	065b      	lsls	r3, r3, #25
 800f378:	f53f af2c 	bmi.w	800f1d4 <_svfiprintf_r+0x28>
 800f37c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f37e:	b01d      	add	sp, #116	; 0x74
 800f380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f384:	ab03      	add	r3, sp, #12
 800f386:	9300      	str	r3, [sp, #0]
 800f388:	462a      	mov	r2, r5
 800f38a:	4b06      	ldr	r3, [pc, #24]	; (800f3a4 <_svfiprintf_r+0x1f8>)
 800f38c:	a904      	add	r1, sp, #16
 800f38e:	4638      	mov	r0, r7
 800f390:	f000 f87a 	bl	800f488 <_printf_i>
 800f394:	e7eb      	b.n	800f36e <_svfiprintf_r+0x1c2>
 800f396:	bf00      	nop
 800f398:	0800fd20 	.word	0x0800fd20
 800f39c:	0800fd2a 	.word	0x0800fd2a
 800f3a0:	00000000 	.word	0x00000000
 800f3a4:	0800f0f5 	.word	0x0800f0f5
 800f3a8:	0800fd26 	.word	0x0800fd26

0800f3ac <_printf_common>:
 800f3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3b0:	4616      	mov	r6, r2
 800f3b2:	4699      	mov	r9, r3
 800f3b4:	688a      	ldr	r2, [r1, #8]
 800f3b6:	690b      	ldr	r3, [r1, #16]
 800f3b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	bfb8      	it	lt
 800f3c0:	4613      	movlt	r3, r2
 800f3c2:	6033      	str	r3, [r6, #0]
 800f3c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3c8:	4607      	mov	r7, r0
 800f3ca:	460c      	mov	r4, r1
 800f3cc:	b10a      	cbz	r2, 800f3d2 <_printf_common+0x26>
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	6033      	str	r3, [r6, #0]
 800f3d2:	6823      	ldr	r3, [r4, #0]
 800f3d4:	0699      	lsls	r1, r3, #26
 800f3d6:	bf42      	ittt	mi
 800f3d8:	6833      	ldrmi	r3, [r6, #0]
 800f3da:	3302      	addmi	r3, #2
 800f3dc:	6033      	strmi	r3, [r6, #0]
 800f3de:	6825      	ldr	r5, [r4, #0]
 800f3e0:	f015 0506 	ands.w	r5, r5, #6
 800f3e4:	d106      	bne.n	800f3f4 <_printf_common+0x48>
 800f3e6:	f104 0a19 	add.w	sl, r4, #25
 800f3ea:	68e3      	ldr	r3, [r4, #12]
 800f3ec:	6832      	ldr	r2, [r6, #0]
 800f3ee:	1a9b      	subs	r3, r3, r2
 800f3f0:	42ab      	cmp	r3, r5
 800f3f2:	dc26      	bgt.n	800f442 <_printf_common+0x96>
 800f3f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f3f8:	1e13      	subs	r3, r2, #0
 800f3fa:	6822      	ldr	r2, [r4, #0]
 800f3fc:	bf18      	it	ne
 800f3fe:	2301      	movne	r3, #1
 800f400:	0692      	lsls	r2, r2, #26
 800f402:	d42b      	bmi.n	800f45c <_printf_common+0xb0>
 800f404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f408:	4649      	mov	r1, r9
 800f40a:	4638      	mov	r0, r7
 800f40c:	47c0      	blx	r8
 800f40e:	3001      	adds	r0, #1
 800f410:	d01e      	beq.n	800f450 <_printf_common+0xa4>
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	68e5      	ldr	r5, [r4, #12]
 800f416:	6832      	ldr	r2, [r6, #0]
 800f418:	f003 0306 	and.w	r3, r3, #6
 800f41c:	2b04      	cmp	r3, #4
 800f41e:	bf08      	it	eq
 800f420:	1aad      	subeq	r5, r5, r2
 800f422:	68a3      	ldr	r3, [r4, #8]
 800f424:	6922      	ldr	r2, [r4, #16]
 800f426:	bf0c      	ite	eq
 800f428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f42c:	2500      	movne	r5, #0
 800f42e:	4293      	cmp	r3, r2
 800f430:	bfc4      	itt	gt
 800f432:	1a9b      	subgt	r3, r3, r2
 800f434:	18ed      	addgt	r5, r5, r3
 800f436:	2600      	movs	r6, #0
 800f438:	341a      	adds	r4, #26
 800f43a:	42b5      	cmp	r5, r6
 800f43c:	d11a      	bne.n	800f474 <_printf_common+0xc8>
 800f43e:	2000      	movs	r0, #0
 800f440:	e008      	b.n	800f454 <_printf_common+0xa8>
 800f442:	2301      	movs	r3, #1
 800f444:	4652      	mov	r2, sl
 800f446:	4649      	mov	r1, r9
 800f448:	4638      	mov	r0, r7
 800f44a:	47c0      	blx	r8
 800f44c:	3001      	adds	r0, #1
 800f44e:	d103      	bne.n	800f458 <_printf_common+0xac>
 800f450:	f04f 30ff 	mov.w	r0, #4294967295
 800f454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f458:	3501      	adds	r5, #1
 800f45a:	e7c6      	b.n	800f3ea <_printf_common+0x3e>
 800f45c:	18e1      	adds	r1, r4, r3
 800f45e:	1c5a      	adds	r2, r3, #1
 800f460:	2030      	movs	r0, #48	; 0x30
 800f462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f466:	4422      	add	r2, r4
 800f468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f46c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f470:	3302      	adds	r3, #2
 800f472:	e7c7      	b.n	800f404 <_printf_common+0x58>
 800f474:	2301      	movs	r3, #1
 800f476:	4622      	mov	r2, r4
 800f478:	4649      	mov	r1, r9
 800f47a:	4638      	mov	r0, r7
 800f47c:	47c0      	blx	r8
 800f47e:	3001      	adds	r0, #1
 800f480:	d0e6      	beq.n	800f450 <_printf_common+0xa4>
 800f482:	3601      	adds	r6, #1
 800f484:	e7d9      	b.n	800f43a <_printf_common+0x8e>
	...

0800f488 <_printf_i>:
 800f488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f48c:	460c      	mov	r4, r1
 800f48e:	4691      	mov	r9, r2
 800f490:	7e27      	ldrb	r7, [r4, #24]
 800f492:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f494:	2f78      	cmp	r7, #120	; 0x78
 800f496:	4680      	mov	r8, r0
 800f498:	469a      	mov	sl, r3
 800f49a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f49e:	d807      	bhi.n	800f4b0 <_printf_i+0x28>
 800f4a0:	2f62      	cmp	r7, #98	; 0x62
 800f4a2:	d80a      	bhi.n	800f4ba <_printf_i+0x32>
 800f4a4:	2f00      	cmp	r7, #0
 800f4a6:	f000 80d8 	beq.w	800f65a <_printf_i+0x1d2>
 800f4aa:	2f58      	cmp	r7, #88	; 0x58
 800f4ac:	f000 80a3 	beq.w	800f5f6 <_printf_i+0x16e>
 800f4b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f4b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f4b8:	e03a      	b.n	800f530 <_printf_i+0xa8>
 800f4ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f4be:	2b15      	cmp	r3, #21
 800f4c0:	d8f6      	bhi.n	800f4b0 <_printf_i+0x28>
 800f4c2:	a001      	add	r0, pc, #4	; (adr r0, 800f4c8 <_printf_i+0x40>)
 800f4c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f4c8:	0800f521 	.word	0x0800f521
 800f4cc:	0800f535 	.word	0x0800f535
 800f4d0:	0800f4b1 	.word	0x0800f4b1
 800f4d4:	0800f4b1 	.word	0x0800f4b1
 800f4d8:	0800f4b1 	.word	0x0800f4b1
 800f4dc:	0800f4b1 	.word	0x0800f4b1
 800f4e0:	0800f535 	.word	0x0800f535
 800f4e4:	0800f4b1 	.word	0x0800f4b1
 800f4e8:	0800f4b1 	.word	0x0800f4b1
 800f4ec:	0800f4b1 	.word	0x0800f4b1
 800f4f0:	0800f4b1 	.word	0x0800f4b1
 800f4f4:	0800f641 	.word	0x0800f641
 800f4f8:	0800f565 	.word	0x0800f565
 800f4fc:	0800f623 	.word	0x0800f623
 800f500:	0800f4b1 	.word	0x0800f4b1
 800f504:	0800f4b1 	.word	0x0800f4b1
 800f508:	0800f663 	.word	0x0800f663
 800f50c:	0800f4b1 	.word	0x0800f4b1
 800f510:	0800f565 	.word	0x0800f565
 800f514:	0800f4b1 	.word	0x0800f4b1
 800f518:	0800f4b1 	.word	0x0800f4b1
 800f51c:	0800f62b 	.word	0x0800f62b
 800f520:	680b      	ldr	r3, [r1, #0]
 800f522:	1d1a      	adds	r2, r3, #4
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	600a      	str	r2, [r1, #0]
 800f528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f52c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f530:	2301      	movs	r3, #1
 800f532:	e0a3      	b.n	800f67c <_printf_i+0x1f4>
 800f534:	6825      	ldr	r5, [r4, #0]
 800f536:	6808      	ldr	r0, [r1, #0]
 800f538:	062e      	lsls	r6, r5, #24
 800f53a:	f100 0304 	add.w	r3, r0, #4
 800f53e:	d50a      	bpl.n	800f556 <_printf_i+0xce>
 800f540:	6805      	ldr	r5, [r0, #0]
 800f542:	600b      	str	r3, [r1, #0]
 800f544:	2d00      	cmp	r5, #0
 800f546:	da03      	bge.n	800f550 <_printf_i+0xc8>
 800f548:	232d      	movs	r3, #45	; 0x2d
 800f54a:	426d      	negs	r5, r5
 800f54c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f550:	485e      	ldr	r0, [pc, #376]	; (800f6cc <_printf_i+0x244>)
 800f552:	230a      	movs	r3, #10
 800f554:	e019      	b.n	800f58a <_printf_i+0x102>
 800f556:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f55a:	6805      	ldr	r5, [r0, #0]
 800f55c:	600b      	str	r3, [r1, #0]
 800f55e:	bf18      	it	ne
 800f560:	b22d      	sxthne	r5, r5
 800f562:	e7ef      	b.n	800f544 <_printf_i+0xbc>
 800f564:	680b      	ldr	r3, [r1, #0]
 800f566:	6825      	ldr	r5, [r4, #0]
 800f568:	1d18      	adds	r0, r3, #4
 800f56a:	6008      	str	r0, [r1, #0]
 800f56c:	0628      	lsls	r0, r5, #24
 800f56e:	d501      	bpl.n	800f574 <_printf_i+0xec>
 800f570:	681d      	ldr	r5, [r3, #0]
 800f572:	e002      	b.n	800f57a <_printf_i+0xf2>
 800f574:	0669      	lsls	r1, r5, #25
 800f576:	d5fb      	bpl.n	800f570 <_printf_i+0xe8>
 800f578:	881d      	ldrh	r5, [r3, #0]
 800f57a:	4854      	ldr	r0, [pc, #336]	; (800f6cc <_printf_i+0x244>)
 800f57c:	2f6f      	cmp	r7, #111	; 0x6f
 800f57e:	bf0c      	ite	eq
 800f580:	2308      	moveq	r3, #8
 800f582:	230a      	movne	r3, #10
 800f584:	2100      	movs	r1, #0
 800f586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f58a:	6866      	ldr	r6, [r4, #4]
 800f58c:	60a6      	str	r6, [r4, #8]
 800f58e:	2e00      	cmp	r6, #0
 800f590:	bfa2      	ittt	ge
 800f592:	6821      	ldrge	r1, [r4, #0]
 800f594:	f021 0104 	bicge.w	r1, r1, #4
 800f598:	6021      	strge	r1, [r4, #0]
 800f59a:	b90d      	cbnz	r5, 800f5a0 <_printf_i+0x118>
 800f59c:	2e00      	cmp	r6, #0
 800f59e:	d04d      	beq.n	800f63c <_printf_i+0x1b4>
 800f5a0:	4616      	mov	r6, r2
 800f5a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f5a6:	fb03 5711 	mls	r7, r3, r1, r5
 800f5aa:	5dc7      	ldrb	r7, [r0, r7]
 800f5ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f5b0:	462f      	mov	r7, r5
 800f5b2:	42bb      	cmp	r3, r7
 800f5b4:	460d      	mov	r5, r1
 800f5b6:	d9f4      	bls.n	800f5a2 <_printf_i+0x11a>
 800f5b8:	2b08      	cmp	r3, #8
 800f5ba:	d10b      	bne.n	800f5d4 <_printf_i+0x14c>
 800f5bc:	6823      	ldr	r3, [r4, #0]
 800f5be:	07df      	lsls	r7, r3, #31
 800f5c0:	d508      	bpl.n	800f5d4 <_printf_i+0x14c>
 800f5c2:	6923      	ldr	r3, [r4, #16]
 800f5c4:	6861      	ldr	r1, [r4, #4]
 800f5c6:	4299      	cmp	r1, r3
 800f5c8:	bfde      	ittt	le
 800f5ca:	2330      	movle	r3, #48	; 0x30
 800f5cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f5d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f5d4:	1b92      	subs	r2, r2, r6
 800f5d6:	6122      	str	r2, [r4, #16]
 800f5d8:	f8cd a000 	str.w	sl, [sp]
 800f5dc:	464b      	mov	r3, r9
 800f5de:	aa03      	add	r2, sp, #12
 800f5e0:	4621      	mov	r1, r4
 800f5e2:	4640      	mov	r0, r8
 800f5e4:	f7ff fee2 	bl	800f3ac <_printf_common>
 800f5e8:	3001      	adds	r0, #1
 800f5ea:	d14c      	bne.n	800f686 <_printf_i+0x1fe>
 800f5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f0:	b004      	add	sp, #16
 800f5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5f6:	4835      	ldr	r0, [pc, #212]	; (800f6cc <_printf_i+0x244>)
 800f5f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f5fc:	6823      	ldr	r3, [r4, #0]
 800f5fe:	680e      	ldr	r6, [r1, #0]
 800f600:	061f      	lsls	r7, r3, #24
 800f602:	f856 5b04 	ldr.w	r5, [r6], #4
 800f606:	600e      	str	r6, [r1, #0]
 800f608:	d514      	bpl.n	800f634 <_printf_i+0x1ac>
 800f60a:	07d9      	lsls	r1, r3, #31
 800f60c:	bf44      	itt	mi
 800f60e:	f043 0320 	orrmi.w	r3, r3, #32
 800f612:	6023      	strmi	r3, [r4, #0]
 800f614:	b91d      	cbnz	r5, 800f61e <_printf_i+0x196>
 800f616:	6823      	ldr	r3, [r4, #0]
 800f618:	f023 0320 	bic.w	r3, r3, #32
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	2310      	movs	r3, #16
 800f620:	e7b0      	b.n	800f584 <_printf_i+0xfc>
 800f622:	6823      	ldr	r3, [r4, #0]
 800f624:	f043 0320 	orr.w	r3, r3, #32
 800f628:	6023      	str	r3, [r4, #0]
 800f62a:	2378      	movs	r3, #120	; 0x78
 800f62c:	4828      	ldr	r0, [pc, #160]	; (800f6d0 <_printf_i+0x248>)
 800f62e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f632:	e7e3      	b.n	800f5fc <_printf_i+0x174>
 800f634:	065e      	lsls	r6, r3, #25
 800f636:	bf48      	it	mi
 800f638:	b2ad      	uxthmi	r5, r5
 800f63a:	e7e6      	b.n	800f60a <_printf_i+0x182>
 800f63c:	4616      	mov	r6, r2
 800f63e:	e7bb      	b.n	800f5b8 <_printf_i+0x130>
 800f640:	680b      	ldr	r3, [r1, #0]
 800f642:	6826      	ldr	r6, [r4, #0]
 800f644:	6960      	ldr	r0, [r4, #20]
 800f646:	1d1d      	adds	r5, r3, #4
 800f648:	600d      	str	r5, [r1, #0]
 800f64a:	0635      	lsls	r5, r6, #24
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	d501      	bpl.n	800f654 <_printf_i+0x1cc>
 800f650:	6018      	str	r0, [r3, #0]
 800f652:	e002      	b.n	800f65a <_printf_i+0x1d2>
 800f654:	0671      	lsls	r1, r6, #25
 800f656:	d5fb      	bpl.n	800f650 <_printf_i+0x1c8>
 800f658:	8018      	strh	r0, [r3, #0]
 800f65a:	2300      	movs	r3, #0
 800f65c:	6123      	str	r3, [r4, #16]
 800f65e:	4616      	mov	r6, r2
 800f660:	e7ba      	b.n	800f5d8 <_printf_i+0x150>
 800f662:	680b      	ldr	r3, [r1, #0]
 800f664:	1d1a      	adds	r2, r3, #4
 800f666:	600a      	str	r2, [r1, #0]
 800f668:	681e      	ldr	r6, [r3, #0]
 800f66a:	6862      	ldr	r2, [r4, #4]
 800f66c:	2100      	movs	r1, #0
 800f66e:	4630      	mov	r0, r6
 800f670:	f7f0 fdb6 	bl	80001e0 <memchr>
 800f674:	b108      	cbz	r0, 800f67a <_printf_i+0x1f2>
 800f676:	1b80      	subs	r0, r0, r6
 800f678:	6060      	str	r0, [r4, #4]
 800f67a:	6863      	ldr	r3, [r4, #4]
 800f67c:	6123      	str	r3, [r4, #16]
 800f67e:	2300      	movs	r3, #0
 800f680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f684:	e7a8      	b.n	800f5d8 <_printf_i+0x150>
 800f686:	6923      	ldr	r3, [r4, #16]
 800f688:	4632      	mov	r2, r6
 800f68a:	4649      	mov	r1, r9
 800f68c:	4640      	mov	r0, r8
 800f68e:	47d0      	blx	sl
 800f690:	3001      	adds	r0, #1
 800f692:	d0ab      	beq.n	800f5ec <_printf_i+0x164>
 800f694:	6823      	ldr	r3, [r4, #0]
 800f696:	079b      	lsls	r3, r3, #30
 800f698:	d413      	bmi.n	800f6c2 <_printf_i+0x23a>
 800f69a:	68e0      	ldr	r0, [r4, #12]
 800f69c:	9b03      	ldr	r3, [sp, #12]
 800f69e:	4298      	cmp	r0, r3
 800f6a0:	bfb8      	it	lt
 800f6a2:	4618      	movlt	r0, r3
 800f6a4:	e7a4      	b.n	800f5f0 <_printf_i+0x168>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	4632      	mov	r2, r6
 800f6aa:	4649      	mov	r1, r9
 800f6ac:	4640      	mov	r0, r8
 800f6ae:	47d0      	blx	sl
 800f6b0:	3001      	adds	r0, #1
 800f6b2:	d09b      	beq.n	800f5ec <_printf_i+0x164>
 800f6b4:	3501      	adds	r5, #1
 800f6b6:	68e3      	ldr	r3, [r4, #12]
 800f6b8:	9903      	ldr	r1, [sp, #12]
 800f6ba:	1a5b      	subs	r3, r3, r1
 800f6bc:	42ab      	cmp	r3, r5
 800f6be:	dcf2      	bgt.n	800f6a6 <_printf_i+0x21e>
 800f6c0:	e7eb      	b.n	800f69a <_printf_i+0x212>
 800f6c2:	2500      	movs	r5, #0
 800f6c4:	f104 0619 	add.w	r6, r4, #25
 800f6c8:	e7f5      	b.n	800f6b6 <_printf_i+0x22e>
 800f6ca:	bf00      	nop
 800f6cc:	0800fd31 	.word	0x0800fd31
 800f6d0:	0800fd42 	.word	0x0800fd42

0800f6d4 <memmove>:
 800f6d4:	4288      	cmp	r0, r1
 800f6d6:	b510      	push	{r4, lr}
 800f6d8:	eb01 0402 	add.w	r4, r1, r2
 800f6dc:	d902      	bls.n	800f6e4 <memmove+0x10>
 800f6de:	4284      	cmp	r4, r0
 800f6e0:	4623      	mov	r3, r4
 800f6e2:	d807      	bhi.n	800f6f4 <memmove+0x20>
 800f6e4:	1e43      	subs	r3, r0, #1
 800f6e6:	42a1      	cmp	r1, r4
 800f6e8:	d008      	beq.n	800f6fc <memmove+0x28>
 800f6ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6f2:	e7f8      	b.n	800f6e6 <memmove+0x12>
 800f6f4:	4402      	add	r2, r0
 800f6f6:	4601      	mov	r1, r0
 800f6f8:	428a      	cmp	r2, r1
 800f6fa:	d100      	bne.n	800f6fe <memmove+0x2a>
 800f6fc:	bd10      	pop	{r4, pc}
 800f6fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f706:	e7f7      	b.n	800f6f8 <memmove+0x24>

0800f708 <_realloc_r>:
 800f708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70a:	4607      	mov	r7, r0
 800f70c:	4614      	mov	r4, r2
 800f70e:	460e      	mov	r6, r1
 800f710:	b921      	cbnz	r1, 800f71c <_realloc_r+0x14>
 800f712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f716:	4611      	mov	r1, r2
 800f718:	f7ff bb84 	b.w	800ee24 <_malloc_r>
 800f71c:	b922      	cbnz	r2, 800f728 <_realloc_r+0x20>
 800f71e:	f7ff fc99 	bl	800f054 <_free_r>
 800f722:	4625      	mov	r5, r4
 800f724:	4628      	mov	r0, r5
 800f726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f728:	f000 f814 	bl	800f754 <_malloc_usable_size_r>
 800f72c:	42a0      	cmp	r0, r4
 800f72e:	d20f      	bcs.n	800f750 <_realloc_r+0x48>
 800f730:	4621      	mov	r1, r4
 800f732:	4638      	mov	r0, r7
 800f734:	f7ff fb76 	bl	800ee24 <_malloc_r>
 800f738:	4605      	mov	r5, r0
 800f73a:	2800      	cmp	r0, #0
 800f73c:	d0f2      	beq.n	800f724 <_realloc_r+0x1c>
 800f73e:	4631      	mov	r1, r6
 800f740:	4622      	mov	r2, r4
 800f742:	f7ff fb59 	bl	800edf8 <memcpy>
 800f746:	4631      	mov	r1, r6
 800f748:	4638      	mov	r0, r7
 800f74a:	f7ff fc83 	bl	800f054 <_free_r>
 800f74e:	e7e9      	b.n	800f724 <_realloc_r+0x1c>
 800f750:	4635      	mov	r5, r6
 800f752:	e7e7      	b.n	800f724 <_realloc_r+0x1c>

0800f754 <_malloc_usable_size_r>:
 800f754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f758:	1f18      	subs	r0, r3, #4
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	bfbc      	itt	lt
 800f75e:	580b      	ldrlt	r3, [r1, r0]
 800f760:	18c0      	addlt	r0, r0, r3
 800f762:	4770      	bx	lr

0800f764 <_init>:
 800f764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f766:	bf00      	nop
 800f768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f76a:	bc08      	pop	{r3}
 800f76c:	469e      	mov	lr, r3
 800f76e:	4770      	bx	lr

0800f770 <_fini>:
 800f770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f772:	bf00      	nop
 800f774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f776:	bc08      	pop	{r3}
 800f778:	469e      	mov	lr, r3
 800f77a:	4770      	bx	lr
